/*
ShaderGlass shader fsr-shaders\fsr-pass0 imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/fsr/shaders/fsr-pass0.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// SPDX-License-Identifier: Unlicense
// FSR - [EASU] EDGE ADAPTIVE SPATIAL UPSAMPLING
// filter_linear0 = true
// scale_type0 = viewport
// scale0 = 1.0
//==============================================================================================================================
//
//                                               [A] SHADER PORTABILITY 1.20210629
//
//==============================================================================================================================
// FidelityFX Super Resolution Sample
//
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//------------------------------------------------------------------------------------------------------------------------------
// MIT LICENSE
// ===========
// Copyright (c) 2014 Michal Drobot (for concepts used in "FLOAT APPROXIMATIONS").
// -----------
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// -----------
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
// Software.
// -----------
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//------------------------------------------------------------------------------------------------------------------------------
// ABOUT
// =====
// Common central point for high-level shading language and C portability for various shader headers.
//------------------------------------------------------------------------------------------------------------------------------
// DEFINES
// =======
// A_CPU ..... Include the CPU related code.
// A_GPU ..... Include the GPU related code.
// A_GLSL .... Using GLSL.
// A_HLSL .... Using HLSL.
// A_HLSL_6_2  Using HLSL 6.2 with new 'uint16_t' and related types (requires '-enable-16bit-types').
// A_NO_16_BIT_CAST Don't use instructions that are not availabe in SPIR-V (needed for running A_HLSL_6_2 on Vulkan)
// A_GCC ..... Using a GCC compatible compiler (else assume MSVC compatible compiler by default).
// =======
// A_BYTE .... Support 8-bit integer.
// A_HALF .... Support 16-bit integer and floating point.
// A_LONG .... Support 64-bit integer.
// A_DUBL .... Support 64-bit floating point.
// =======
// A_WAVE .... Support wave-wide operations.
//------------------------------------------------------------------------------------------------------------------------------
// To get #include "ffx_a.h" working in GLSL use '#extension GL_GOOGLE_include_directive:require'.
//------------------------------------------------------------------------------------------------------------------------------
// SIMPLIFIED TYPE SYSTEM
// ======================
//  - All ints will be unsigned with exception of when signed is required.
//  - Type naming simplified and shortened "A<type><#components>",
//     - H = 16-bit float (half)
//     - F = 32-bit float (float)
//     - D = 64-bit float (double)
//     - P = 1-bit integer (predicate, not using bool because 'B' is used for byte)
//     - B = 8-bit integer (byte)
//     - W = 16-bit integer (word)
//     - U = 32-bit integer (unsigned)
//     - L = 64-bit integer (long)
//  - Using "AS<type><#components>" for signed when required.
//------------------------------------------------------------------------------------------------------------------------------
// TODO
// ====
//  - Make sure 'ALerp*(a,b,m)' does 'b*m+(-a*m+a)' (2 ops).
//------------------------------------------------------------------------------------------------------------------------------
// CHANGE LOG
// ==========
// 20200914 - Expanded wave ops and prx code.
// 20200713 - Added [ZOL] section, fixed serious bugs in sRGB and Rec.709 color conversion code, etc.
//==============================================================================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                           COMMON
//==============================================================================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//
//
//                                                             CPU
//
//
//==============================================================================================================================
// Supporting user defined overrides.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
// Same types across CPU and GPU.
// Predicate uses 32-bit integer (C friendly bool).
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//
//                                                       CPU/GPU PORTING
//
//------------------------------------------------------------------------------------------------------------------------------
// Get CPU and GPU to share all setup code, without duplicate code paths.
// This uses a lower-case prefix for special vector constructs.
//  - In C restrict pointers are used.
//  - In the shading language, in/inout/out arguments are used.
// This depends on the ability to access a vector value in both languages via array syntax (aka color[2]).
//==============================================================================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                     VECTOR ARGUMENT/RETURN/INITIALIZATION PORTABILITY
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                     SCALAR RETURN OPS
//------------------------------------------------------------------------------------------------------------------------------
// TODO
// ====
//  - Replace transcendentals with manual versions.
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
// These follow the convention that A integer types don't have signage, until they are operated on.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                               SCALAR RETURN OPS - DEPENDENT
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                         VECTOR OPS
//------------------------------------------------------------------------------------------------------------------------------
// These are added as needed for production or prototyping, so not necessarily a complete set.
// They follow a convention of taking in a destination and also returning the destination value to increase utility.
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                     HALF FLOAT PACKING
//==============================================================================================================================
// Convert float to half (in lower 16-bits of output).
// Same fast technique as documented here: ftp://ftp.fox-toolkit.org/pub/fasthalffloatconversion.pdf
// Supports denormals.
// Conversion rules are to make computations possibly "safer" on the GPU,
//  -INF & -NaN -> -65504
//  +INF & +NaN -> +65504
//------------------------------------------------------------------------------------------------------------------------------
// Used to output packed constant.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//
//
//                                                            GLSL
//
//
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
// Proxy for V_BFI_B32 where the 'mask' is set as 'bits', 'mask=(1<<bits)-1', and 'bits' needs to be an immediate.
//------------------------------------------------------------------------------------------------------------------------------
// V_MED3_F32.
//------------------------------------------------------------------------------------------------------------------------------
// V_FRACT_F32 (note DX frac() is different).
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
// V_MAX3_F32.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
// Clamp has an easier pattern match for med3 when some ordering is known.
// V_MED3_F32.
//------------------------------------------------------------------------------------------------------------------------------
// V_MIN3_F32.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
// Normalized trig. Valid input domain is {-256 to +256}. No GLSL compiler intrinsic exists to map to this currently.
// V_COS_F32.
//------------------------------------------------------------------------------------------------------------------------------
// Normalized trig. Valid input domain is {-256 to +256}. No GLSL compiler intrinsic exists to map to this currently.
// V_SIN_F32.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                          GLSL BYTE
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                          GLSL HALF
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
// No packed version of max3.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
// No packed version of min3.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                         GLSL DOUBLE
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                         GLSL LONG
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                      WAVE OPERATIONS
//==============================================================================================================================
// Where 'x' must be a compile time literal.
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//
//
//                                                            HLSL
//
//
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                          HLSL BYTE
//==============================================================================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                          HLSL HALF
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
// Need to use manual unpack to get optimal execution (don't use packed types in buffers directly).
// Unpack requires this pattern: https://gpuopen.com/first-steps-implementing-fp16/
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
// V_FRACT_F16 (note DX frac() is different).
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                         HLSL DOUBLE
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//                                                         HLSL WAVE
//==============================================================================================================================
// Where 'x' must be a compile time literal.
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//
//
//                                                          GPU COMMON
//
//
//==============================================================================================================================
// Negative and positive infinity.
//------------------------------------------------------------------------------------------------------------------------------
// Copy sign from 's' to positive 'd'.
//------------------------------------------------------------------------------------------------------------------------------
// Single operation to return (useful to create a mask to use in lerp for branch free logic),
//  m=NaN := 0
//  m>=0  := 0
//  m<0   := 1
// Uses the following useful floating point logic,
//  saturate(+a*(-INF)==-INF) := 0
//  saturate( 0*(-INF)== NaN) := 0
//  saturate(-a*(-INF)==+INF) := 1
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                [FIS] FLOAT INTEGER SORTABLE
//------------------------------------------------------------------------------------------------------------------------------
// Float to integer sortable.
//  - If sign bit=0, flip the sign bit (positives).
//  - If sign bit=1, flip all bits     (negatives).
// Integer sortable to float.
//  - If sign bit=1, flip the sign bit (positives).
//  - If sign bit=0, flip all bits     (negatives).
// Has nice side effects.
//  - Larger integers are more positive values.
//  - Float zero is mapped to center of integers (so clear to integer zero is a nice default for atomic max usage).
// Burns 3 ops for conversion {shift,or,xor}.
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
// Just adjust high 16-bit value (useful when upper part of 32-bit word is a 16-bit float value).
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                      [PERM] V_PERM_B32
//------------------------------------------------------------------------------------------------------------------------------
// Support for V_PERM_B32 started in the 3rd generation of GCN.
//------------------------------------------------------------------------------------------------------------------------------
// yyyyxxxx - The 'i' input.
// 76543210
// ========
// HGFEDCBA - Naming on permutation.
//------------------------------------------------------------------------------------------------------------------------------
// TODO
// ====
//  - Make sure compiler optimizes this.
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                               [BUC] BYTE UNSIGNED CONVERSION
//------------------------------------------------------------------------------------------------------------------------------
// Designed to use the optimal conversion, enables the scaling to possibly be factored into other computation.
// Works on a range of {0 to A_BUC_<32,16>}, for <32-bit, and 16-bit> respectively.
//------------------------------------------------------------------------------------------------------------------------------
// OPCODE NOTES
// ============
// GCN does not do UNORM or SNORM for bytes in opcodes.
//  - V_CVT_F32_UBYTE{0,1,2,3} - Unsigned byte to float.
//  - V_CVT_PKACC_U8_F32 - Float to unsigned byte (does bit-field insert into 32-bit integer).
// V_PERM_B32 does byte packing with ability to zero fill bytes as well.
//  - Can pull out byte values from two sources, and zero fill upper 8-bits of packed hi and lo.
//------------------------------------------------------------------------------------------------------------------------------
// BYTE : FLOAT - ABuc{0,1,2,3}{To,From}U1() - Designed for V_CVT_F32_UBYTE* and V_CVT_PKACCUM_U8_F32 ops.
// ====   =====
//    0 : 0
//    1 : 1
//     ...
//  255 : 255
//      : 256 (just outside the encoding range)
//------------------------------------------------------------------------------------------------------------------------------
// BYTE : FLOAT - ABuc{0,1,2,3}{To,From}U2() - Designed for 16-bit denormal tricks and V_PERM_B32.
// ====   =====
//    0 : 0
//    1 : 1/512
//    2 : 1/256
//     ...
//   64 : 1/8
//  128 : 1/4
//  255 : 255/512
//      : 1/2 (just outside the encoding range)
//------------------------------------------------------------------------------------------------------------------------------
// OPTIMAL IMPLEMENTATIONS ON AMD ARCHITECTURES
// ============================================
// r=ABuc0FromU1(i)
//   V_CVT_F32_UBYTE0 r,i
// --------------------------------------------
// r=ABuc0ToU1(d,i)
//   V_CVT_PKACCUM_U8_F32 r,i,0,d
// --------------------------------------------
// d=ABuc0FromU2(i)
//   Where 'k0' is an SGPR with 0x0E0A
//   Where 'k1' is an SGPR with {32768.0} packed into the lower 16-bits
//   V_PERM_B32 d,i.x,i.y,k0
//   V_PK_FMA_F16 d,d,k1.x,0
// --------------------------------------------
// r=ABuc0ToU2(d,i)
//   Where 'k0' is an SGPR with {1.0/32768.0} packed into the lower 16-bits
//   Where 'k1' is an SGPR with 0x????
//   Where 'k2' is an SGPR with 0x????
//   V_PK_FMA_F16 i,i,k0.x,0
//   V_PERM_B32 r.x,i,i,k1
//   V_PERM_B32 r.y,i,i,k2
//==============================================================================================================================
// Peak range for 32-bit and 16-bit operations.
//==============================================================================================================================
// Designed to be one V_CVT_PKACCUM_U8_F32.
// The extra min is required to pattern match to V_CVT_PKACCUM_U8_F32.
//------------------------------------------------------------------------------------------------------------------------------
// Designed to be one V_CVT_F32_UBYTE*.
//==============================================================================================================================
// Takes {x0,x1} and {y0,y1} and builds {{x0,y0},{x1,y1}}.
//------------------------------------------------------------------------------------------------------------------------------
// Designed for 3 ops to do SOA to AOS and conversion.
//------------------------------------------------------------------------------------------------------------------------------
// Designed for 2 ops to do both AOS to SOA, and conversion.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                 [BSC] BYTE SIGNED CONVERSION
//------------------------------------------------------------------------------------------------------------------------------
// Similar to [BUC].
// Works on a range of {-/+ A_BSC_<32,16>}, for <32-bit, and 16-bit> respectively.
//------------------------------------------------------------------------------------------------------------------------------
// ENCODING (without zero-based encoding)
// ========
//   0 = unused (can be used to mean something else)
//   1 = lowest value
// 128 = exact zero center (zero based encoding
// 255 = highest value
//------------------------------------------------------------------------------------------------------------------------------
// Zero-based [Zb] flips the MSB bit of the byte (making 128 "exact zero" actually zero).
// This is useful if there is a desire for cleared values to decode as zero.
//------------------------------------------------------------------------------------------------------------------------------
// BYTE : FLOAT - ABsc{0,1,2,3}{To,From}U2() - Designed for 16-bit denormal tricks and V_PERM_B32.
// ====   =====
//    0 : -127/512 (unused)
//    1 : -126/512
//    2 : -125/512
//     ...
//  128 : 0
//     ...
//  255 : 127/512
//      : 1/4 (just outside the encoding range)
//==============================================================================================================================
// Peak range for 32-bit and 16-bit operations.
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
// Takes {x0,x1} and {y0,y1} and builds {{x0,y0},{x1,y1}}.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                     HALF APPROXIMATIONS
//------------------------------------------------------------------------------------------------------------------------------
// These support only positive inputs.
// Did not see value yet in specialization for range.
// Using quick testing, ended up mostly getting the same "best" approximation for various ranges.
// With hardware that can co-execute transcendentals, the value in approximations could be less than expected.
// However from a latency perspective, if execution of a transcendental is 4 clk, with no packed support, -> 8 clk total.
// And co-execution would require a compiler interleaving a lot of independent work for packed usage.
//------------------------------------------------------------------------------------------------------------------------------
// The one Newton Raphson iteration form of rsq() was skipped (requires 6 ops total).
// Same with sqrt(), as this could be x*rsq() (7 ops).
//==============================================================================================================================
// Minimize squared error across full positive range, 2 ops.
// The 0x1de2 based approximation maps {0 to 1} input maps to < 1 output.
//------------------------------------------------------------------------------------------------------------------------------
// Lower precision estimation, 1 op.
// Minimize squared error across {smallest normal to 16384.0}.
//------------------------------------------------------------------------------------------------------------------------------
// Medium precision estimation, one Newton Raphson iteration, 3 ops.
//------------------------------------------------------------------------------------------------------------------------------
// Minimize squared error across {smallest normal to 16384.0}, 2 ops.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                    FLOAT APPROXIMATIONS
//------------------------------------------------------------------------------------------------------------------------------
// Michal Drobot has an excellent presentation on these: "Low Level Optimizations For GCN",
//  - Idea dates back to SGI, then to Quake 3, etc.
//  - https://michaldrobot.files.wordpress.com/2014/05/gcn_alu_opt_digitaldragons2014.pdf
//     - sqrt(x)=rsqrt(x)*x
//     - rcp(x)=rsqrt(x)*rsqrt(x) for positive x
//  - https://github.com/michaldrobot/ShaderFastLibs/blob/master/ShaderFastMathLib.h
//------------------------------------------------------------------------------------------------------------------------------
// These below are from perhaps less complete searching for optimal.
// Used FP16 normal range for testing with +4096 32-bit step size for sampling error.
// So these match up well with the half approximations.
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                    PQ APPROXIMATIONS
//------------------------------------------------------------------------------------------------------------------------------
// PQ is very close to x^(1/8). The functions below Use the fast float approximation method to do
// PQ<~>Gamma2 (4th power and fast 4th root) and PQ<~>Linear (8th power and fast 8th root). Maximum error is ~0.2%.
//==============================================================================================================================
// Helpers
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                    PARABOLIC SIN & COS
//------------------------------------------------------------------------------------------------------------------------------
// Approximate answers to transcendental questions.
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
// Valid input range is {-1 to 1} representing {0 to 2 pi}.
// Output range is {-1/4 to 1/4} representing {-1 to 1}.
//------------------------------------------------------------------------------------------------------------------------------
// For a packed {sin,cos} pair,
//  - Native takes 16 clocks and 4 issue slots (no packed transcendentals).
//  - Parabolic takes 8 clocks and 8 issue slots (only fract is non-packed).
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                     [ZOL] ZERO ONE LOGIC
//------------------------------------------------------------------------------------------------------------------------------
// Conditional free logic designed for easy 16-bit packing, and backwards porting to 32-bit.
//------------------------------------------------------------------------------------------------------------------------------
// 0 := false
// 1 := true
//------------------------------------------------------------------------------------------------------------------------------
// AndNot(x,y)   -> !(x&y) .... One op.
// AndOr(x,y,z)  -> (x&y)|z ... One op.
// GtZero(x)     -> x>0.0 ..... One op.
// Sel(x,y,z)    -> x?y:z ..... Two ops, has no precision loss.
// Signed(x)     -> x<0.0 ..... One op.
// ZeroPass(x,y) -> x?0:y ..... Two ops, 'y' is a pass through safe for aliasing as integer.
//------------------------------------------------------------------------------------------------------------------------------
// OPTIMIZATION NOTES
// ==================
// - On Vega to use 2 constants in a packed op, pass in as one AW2 or one AH2 'k.xy' and use as 'k.xx' and 'k.yy'.
//   For example 'a.xy*k.xx+k.yy'.
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
// 2 ops, denormals don't work in 32-bit on PC (and if they are enabled, OMOD is disabled).
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
// Uses denormal trick.
//------------------------------------------------------------------------------------------------------------------------------
// AMD arch lacks a packed conversion opcode.
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                      COLOR CONVERSIONS
//------------------------------------------------------------------------------------------------------------------------------
// These are all linear to/from some other space (where 'linear' has been shortened out of the function name).
// So 'ToGamma' is 'LinearToGamma', and 'FromGamma' is 'LinearFromGamma'.
// These are branch free implementations.
// The AToSrgbF1() function is useful for stores for compute shaders for GPUs without hardware linear->sRGB store conversion.
//------------------------------------------------------------------------------------------------------------------------------
// TRANSFER FUNCTIONS
// ==================
// 709 ..... Rec709 used for some HDTVs
// Gamma ... Typically 2.2 for some PC displays, or 2.4-2.5 for CRTs, or 2.2 FreeSync2 native
// Pq ...... PQ native for HDR10
// Srgb .... The sRGB output, typical of PC displays, useful for 10-bit output, or storing to 8-bit UNORM without SRGB type
// Two ..... Gamma 2.0, fastest conversion (useful for intermediate pass approximations)
// Three ... Gamma 3.0, less fast, but good for HDR.
//------------------------------------------------------------------------------------------------------------------------------
// KEEPING TO SPEC
// ===============
// Both Rec.709 and sRGB have a linear segment which as spec'ed would intersect the curved segment 2 times.
//  (a.) For 8-bit sRGB, steps {0 to 10.3} are in the linear region (4% of the encoding range).
//  (b.) For 8-bit  709, steps {0 to 20.7} are in the linear region (8% of the encoding range).
// Also there is a slight step in the transition regions.
// Precision of the coefficients in the spec being the likely cause.
// Main usage case of the sRGB code is to do the linear->sRGB converstion in a compute shader before store.
// This is to work around lack of hardware (typically only ROP does the conversion for free).
// To "correct" the linear segment, would be to introduce error, because hardware decode of sRGB->linear is fixed (and free).
// So this header keeps with the spec.
// For linear->sRGB transforms, the linear segment in some respects reduces error, because rounding in that region is linear.
// Rounding in the curved region in hardware (and fast software code) introduces error due to rounding in non-linear.
//------------------------------------------------------------------------------------------------------------------------------
// FOR PQ
// ======
// Both input and output is {0.0-1.0}, and where output 1.0 represents 10000.0 cd/m^2.
// All constants are only specified to FP32 precision.
// External PQ source reference,
//  - https://github.com/ampas/aces-dev/blob/master/transforms/ctl/utilities/ACESlib.Utilities_Color.a1.0.1.ctl
//------------------------------------------------------------------------------------------------------------------------------
// PACKED VERSIONS
// ===============
// These are the A*H2() functions.
// There is no PQ functions as FP16 seemed to not have enough precision for the conversion.
// The remaining functions are "good enough" for 8-bit, and maybe 10-bit if not concerned about a few 1-bit errors.
// Precision is lowest in the 709 conversion, higher in sRGB, higher still in Two and Gamma (when using 2.2 at least).
//------------------------------------------------------------------------------------------------------------------------------
// NOTES
// =====
// Could be faster for PQ conversions to be in ALU or a texture lookup depending on usage case.
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
// Note 'rcpX' is '1/x', where the 'x' is what would be used in AFromGamma().
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
// Unfortunately median won't work here.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
// Unfortunately median won't work here.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                          CS REMAP
//==============================================================================================================================
// Simple remap 64x1 to 8x8 with rotated 2x2 pixel quads in quad linear.
//  543210
//  ======
//  ..xxx.
//  yy...y
//==============================================================================================================================
// More complex remap 64x1 to 8x8 which is necessary for 2D wave reductions.
//  543210
//  ======
//  .xx..x
//  y..yy.
// Details,
//  LANE TO 8x8 MAPPING
//  ===================
//  00 01 08 09 10 11 18 19
//  02 03 0a 0b 12 13 1a 1b
//  04 05 0c 0d 14 15 1c 1d
//  06 07 0e 0f 16 17 1e 1f
//  20 21 28 29 30 31 38 39
//  22 23 2a 2b 32 33 3a 3b
//  24 25 2c 2d 34 35 3c 3d
//  26 27 2e 2f 36 37 3e 3f
//==============================================================================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//
//                                                          REFERENCE
//
//------------------------------------------------------------------------------------------------------------------------------
// IEEE FLOAT RULES
// ================
//  - saturate(NaN)=0, saturate(-INF)=0, saturate(+INF)=1
//  - {+/-}0 * {+/-}INF = NaN
//  - -INF + (+INF) = NaN
//  - {+/-}0 / {+/-}0 = NaN
//  - {+/-}INF / {+/-}INF = NaN
//  - a<(-0) := sqrt(a) = NaN (a=-0.0 won't NaN)
//  - 0 == -0
//  - 4/0 = +INF
//  - 4/-0 = -INF
//  - 4+INF = +INF
//  - 4-INF = -INF
//  - 4*(+INF) = +INF
//  - 4*(-INF) = -INF
//  - -4*(+INF) = -INF
//  - sqrt(+INF) = +INF
//------------------------------------------------------------------------------------------------------------------------------
// FP16 ENCODING
// =============
// fedcba9876543210
// ----------------
// ......mmmmmmmmmm  10-bit mantissa (encodes 11-bit 0.5 to 1.0 except for denormals)
// .eeeee..........  5-bit exponent
// .00000..........  denormals
// .00001..........  -14 exponent
// .11110..........   15 exponent
// .111110000000000  infinity
// .11111nnnnnnnnnn  NaN with n!=0
// s...............  sign
//------------------------------------------------------------------------------------------------------------------------------
// FP16/INT16 ALIASING DENORMAL
// ============================
// 11-bit unsigned integers alias with half float denormal/normal values,
//     1 = 2^(-24) = 1/16777216 ....................... first denormal value
//     2 = 2^(-23)
//   ...
//  1023 = 2^(-14)*(1-2^(-10)) = 2^(-14)*(1-1/1024) ... last denormal value
//  1024 = 2^(-14) = 1/16384 .......................... first normal value that still maps to integers
//  2047 .............................................. last normal value that still maps to integers
// Scaling limits,
//  2^15 = 32768 ...................................... largest power of 2 scaling
// Largest pow2 conversion mapping is at *32768,
//     1 : 2^(-9) = 1/512
//     2 : 1/256
//     4 : 1/128
//     8 : 1/64
//    16 : 1/32
//    32 : 1/16
//    64 : 1/8
//   128 : 1/4
//   256 : 1/2
//   512 : 1
//  1024 : 2
//  2047 : a little less than 4
//==============================================================================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//
//
//                                                     GPU/CPU PORTABILITY
//
//
//------------------------------------------------------------------------------------------------------------------------------
// This is the GPU implementation.
// See the CPU implementation for docs.
//==============================================================================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                     VECTOR ARGUMENT/RETURN/INITIALIZATION PORTABILITY
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                     SCALAR RETURN OPS
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                               SCALAR RETURN OPS - DEPENDENT
//==============================================================================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                         VECTOR OPS
//------------------------------------------------------------------------------------------------------------------------------
// These are added as needed for production or prototyping, so not necessarily a complete set.
// They follow a convention of taking in a destination and also returning the destination value to increase utility.
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//
//
//                    AMD FidelityFX SUPER RESOLUTION [FSR 1] ::: SPATIAL SCALING & EXTRAS - v1.20210629
//
//
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------------------------------------------------------
// FidelityFX Super Resolution Sample
//
// Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved.
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------------------------------------------------------
// ABOUT
// =====
// FSR is a collection of algorithms relating to generating a higher resolution image.
// This specific header focuses on single-image non-temporal image scaling, and related tools.
//
// The core functions are EASU and RCAS:
//  [EASU] Edge Adaptive Spatial Upsampling ....... 1x to 4x area range spatial scaling, clamped adaptive elliptical filter.
//  [RCAS] Robust Contrast Adaptive Sharpening .... A non-scaling variation on CAS.
// RCAS needs to be applied after EASU as a separate pass.
//
// Optional utility functions are:
//  [LFGA] Linear Film Grain Applicator ........... Tool to apply film grain after scaling.
//  [SRTM] Simple Reversible Tone-Mapper .......... Linear HDR {0 to FP16_MAX} to {0 to 1} and back.
//  [TEPD] Temporal Energy Preserving Dither ...... Temporally energy preserving dithered {0 to 1} linear to gamma 2.0 conversion.
// See each individual sub-section for inline documentation.
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------------------------------------------------------
// FUNCTION PERMUTATIONS
// =====================
// *F() ..... Single item computation with 32-bit.
// *H() ..... Single item computation with 16-bit, with packing (aka two 16-bit ops in parallel) when possible.
// *Hx2() ... Processing two items in parallel with 16-bit, easier packing.
//            Not all interfaces in this file have a *Hx2() form.
//==============================================================================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//
//                                        FSR - [EASU] EDGE ADAPTIVE SPATIAL UPSAMPLING
//
//------------------------------------------------------------------------------------------------------------------------------
// EASU provides a high quality spatial-only scaling at relatively low cost.
// Meaning EASU is appropiate for laptops and other low-end GPUs.
// Quality from 1x to 4x area scaling is good.
//------------------------------------------------------------------------------------------------------------------------------
// The scalar uses a modified fast approximation to the standard lanczos(size=2) kernel.
// EASU runs in a single pass, so it applies a directionally and anisotropically adaptive radial lanczos.
// This is also kept as simple as possible to have minimum runtime.
//------------------------------------------------------------------------------------------------------------------------------
// The lanzcos filter has negative lobes, so by itself it will introduce ringing.
// To remove all ringing, the algorithm uses the nearest 2x2 input texels as a neighborhood,
// and limits output to the minimum and maximum of that neighborhood.
//------------------------------------------------------------------------------------------------------------------------------
// Input image requirements:
//
// Color needs to be encoded as 3 channel[red, green, blue](e.g.XYZ not supported)
// Each channel needs to be in the range[0, 1]
// Any color primaries are supported
// Display / tonemapping curve needs to be as if presenting to sRGB display or similar(e.g.Gamma 2.0)
// There should be no banding in the input
// There should be no high amplitude noise in the input
// There should be no noise in the input that is not at input pixel granularity
// For performance purposes, use 32bpp formats
//------------------------------------------------------------------------------------------------------------------------------
// Best to apply EASU at the end of the frame after tonemapping
// but before film grain or composite of the UI.
//------------------------------------------------------------------------------------------------------------------------------
// Example of including this header for D3D HLSL :
//
//  #define A_GPU 1
//  #define A_HLSL 1
//  #define A_HALF 1
//  #include "ffx_a.h
//  #define FSR_EASU_H 1
//  #define FSR_RCAS_H 1
//  //declare input callbacks
//  #include "ffx_fsr1.h
//
// Example of including this header for Vulkan GLSL :
//
//  #define A_GPU 1
//  #define A_GLSL 1
//  #define A_HALF 1
//  #include "ffx_a.h
//  #define FSR_EASU_H 1
//  #define FSR_RCAS_H 1
//  //declare input callbacks
//  #include "ffx_fsr1.h
//
// Example of including this header for Vulkan HLSL :
//
//  #define A_GPU 1
//  #define A_HLSL 1
//  #define A_HLSL_6_2 1
//  #define A_NO_16_BIT_CAST 1
//  #define A_HALF 1
//  #include "ffx_a.h
//  #define FSR_EASU_H 1
//  #define FSR_RCAS_H 1
//  //declare input callbacks
//  #include "ffx_fsr1.h
//
//  Example of declaring the required input callbacks for GLSL :
//  The callbacks need to gather4 for each color channel using the specified texture coordinate 'p'.
//  EASU uses gather4 to reduce position computation logic and for free Arrays of Structures to Structures of Arrays conversion.
//
//  AH4 FsrEasuRH(AF2 p){return AH4(textureGather(sampler2D(tex,sam),p,0));}
//  AH4 FsrEasuGH(AF2 p){return AH4(textureGather(sampler2D(tex,sam),p,1));}
//  AH4 FsrEasuBH(AF2 p){return AH4(textureGather(sampler2D(tex,sam),p,2));}
//  ...
//  The FsrEasuCon function needs to be called from the CPU or GPU to set up constants.
//  The difference in viewport and input image size is there to support Dynamic Resolution Scaling.
//  To use FsrEasuCon() on the CPU, define A_CPU before including ffx_a and ffx_fsr1.
//  Including a GPU example here, the 'con0' through 'con3' values would be stored out to a constant buffer.
//  AU4 con0,con1,con2,con3;
//  FsrEasuCon(con0,con1,con2,con3,
//    1920.0,1080.0,  // Viewport size (top left aligned) in the input image which is to be scaled.
//    3840.0,2160.0,  // The size of the input image.
//    2560.0,1440.0); // The output resolution.
//==============================================================================================================================
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                      CONSTANT SETUP
//==============================================================================================================================
// Call to setup required constant values (works on CPU or GPU).
// This the rendered image resolution being upscaled
// This is the resolution of the resource containing the input image (useful for dynamic resolution)
// This is the display resolution which the input image gets upscaled to
// Output integer position to a pixel position in viewport.
// Viewport pixel position to normalized image space.
// This is used to get upper-left of 'F' tap.
// Centers of gather4, first offset from upper-left of 'F'.
//      +---+---+
//      |   |   |
//      +--(0)--+
//      | b | c |
//  +---F---+---+---+
//  | e | f | g | h |
//  +--(1)--+--(2)--+
//  | i | j | k | l |
//  +---+---+---+---+
//      | n | o |
//      +--(3)--+
//      |   |   |
//      +---+---+
// These are from (0) instead of 'F'.
//If the an offset into the input image resource
// This the rendered image resolution being upscaled
// This is the resolution of the resource containing the input image (useful for dynamic resolution)
// This is the display resolution which the input image gets upscaled to
// This is the input image offset into the resource containing it (useful for dynamic resolution)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                   NON-PACKED 32-BIT VERSION
//==============================================================================================================================
// Input callback prototypes, need to be implemented by calling shader
//------------------------------------------------------------------------------------------------------------------------------
// Filtering for a given tap for the scalar.
// Rotate offset by direction.
// Anisotropy.
// Compute distance^2.
// Limit to the window as at corner, 2 taps can easily be outside.
// Approximation of lancos2 without sin() or rcp(), or sqrt() to get x.
//  (25/16 * (2/5 * x^2 - 1)^2 - (25/16 - 1)) * (1/4 * x^2 - 1)^2
//  |_______________________________________|   |_______________|
//                   base                             window
// The general form of the 'base' is,
//  (a*(b*x^2-1)^2-(a-1))
// Where 'a=1/(2*b-b^2)' and 'b' moves around the negative lobe.
// Do weighted average.
//------------------------------------------------------------------------------------------------------------------------------
// Accumulate direction and length.
// Compute bilinear weight, branches factor out as predicates are compiler time immediates.
//  s t
//  u v
// Direction is the '+' diff.
//    a
//  b c d
//    e
// Then takes magnitude from abs average of both sides of 'c'.
// Length converts gradient reversal to 0, smoothly to non-reversal at 1, shaped, then adding horz and vert terms.
// Repeat for the y axis.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
// Get position of 'f'.
//------------------------------------------------------------------------------------------------------------------------------
// 12-tap kernel.
//    b c
//  e f g h
//  i j k l
//    n o
// Gather 4 ordering.
//  a b
//  r g
// For packed FP16, need either {rg} or {ab} so using the following setup for gather in all versions,
//    a b    <- unused (z)
//    r g
//  a b a b
//  r g r g
//    a b
//    r g    <- unused (z)
// Allowing dead-code removal to remove the 'z's.
// These are from p0 to avoid pulling two constants on pre-Navi hardware.
//------------------------------------------------------------------------------------------------------------------------------
// Simplest multi-channel approximate luma possible (luma times 2, in 2 FMA/MAD).
// Rename.
// Accumulate for bilinear interpolation.
//------------------------------------------------------------------------------------------------------------------------------
// Normalize with approximation, and cleanup close to zero.
// Transform from {0 to 2} to {0 to 1} range, and shape with square.
// Stretch kernel {1.0 vert|horz, to sqrt(2.0) on diagonal}.
// Anisotropic length after rotation,
//  x := 1.0 lerp to 'stretch' on edges
//  y := 1.0 lerp to 2x on edges
// Based on the amount of 'edge',
// the window shifts from +/-{sqrt(2.0) to slightly beyond 2.0}.
// Set distance^2 clipping point to the end of the adjustable window.
//------------------------------------------------------------------------------------------------------------------------------
// Accumulation mixed with min/max of 4 nearest.
//    b c
//  e f g h
//  i j k l
//    n o
// Accumulation.
//------------------------------------------------------------------------------------------------------------------------------
// Normalize and dering.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                    PACKED 16-BIT VERSION
//==============================================================================================================================
// Input callback prototypes, need to be implemented by calling shader
//------------------------------------------------------------------------------------------------------------------------------
// This runs 2 taps in parallel.
//------------------------------------------------------------------------------------------------------------------------------
// This runs 2 taps in parallel.
// ABS is not free in the packed FP16 path.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
// This part is different, accumulating 2 taps in parallel.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
// FP16 is different, using packed trick to do min and max in same operation.
// This part is different for FP16, working pairs of taps at a time.
//------------------------------------------------------------------------------------------------------------------------------
// Slightly different for FP16 version due to combined min and max.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//
//                                      FSR - [RCAS] ROBUST CONTRAST ADAPTIVE SHARPENING
//
//------------------------------------------------------------------------------------------------------------------------------
// CAS uses a simplified mechanism to convert local contrast into a variable amount of sharpness.
// RCAS uses a more exact mechanism, solving for the maximum local sharpness possible before clipping.
// RCAS also has a built in process to limit sharpening of what it detects as possible noise.
// RCAS sharper does not support scaling, as it should be applied after EASU scaling.
// Pass EASU output straight into RCAS, no color conversions necessary.
//------------------------------------------------------------------------------------------------------------------------------
// RCAS is based on the following logic.
// RCAS uses a 5 tap filter in a cross pattern (same as CAS),
//    w                n
//  w 1 w  for taps  w m e
//    w                s
// Where 'w' is the negative lobe weight.
//  output = (w*(n+e+w+s)+m)/(4*w+1)
// RCAS solves for 'w' by seeing where the signal might clip out of the {0 to 1} input range,
//  0 == (w*(n+e+w+s)+m)/(4*w+1) -> w = -m/(n+e+w+s)
//  1 == (w*(n+e+w+s)+m)/(4*w+1) -> w = (1-m)/(n+e+w+s-4*1)
// Then chooses the 'w' which results in no clipping, limits 'w', and multiplies by the 'sharp' amount.
// This solution above has issues with MSAA input as the steps along the gradient cause edge detection issues.
// So RCAS uses 4x the maximum and 4x the minimum (depending on equation)in place of the individual taps.
// As well as switching from 'm' to either the minimum or maximum (depending on side), to help in energy conservation.
// This stabilizes RCAS.
// RCAS does a simple highpass which is normalized against the local contrast then shaped,
//       0.25
//  0.25  -1  0.25
//       0.25
// This is used as a noise detection filter, to reduce the effect of RCAS on grain, and focus on real edges.
//
//  GLSL example for the required callbacks :
//
//  AH4 FsrRcasLoadH(ASW2 p){return AH4(imageLoad(imgSrc,ASU2(p)));}
//  void FsrRcasInputH(inout AH1 r,inout AH1 g,inout AH1 b)
//  {
//    //do any simple input color conversions here or leave empty if none needed
//  }
//
//  FsrRcasCon need to be called from the CPU or GPU to set up constants.
//  Including a GPU example here, the 'con' value would be stored out to a constant buffer.
//
//  AU4 con;
//  FsrRcasCon(con,
//   0.0); // The scale is {0.0 := maximum sharpness, to N>0, where N is the number of stops (halving) of the reduction of sharpness}.
// ---------------
// RCAS sharpening supports a CAS-like pass-through alpha via,
//  #define FSR_RCAS_PASSTHROUGH_ALPHA 1
// RCAS also supports a define to enable a more expensive path to avoid some sharpening of noise.
// Would suggest it is better to apply film grain after RCAS sharpening (and after scaling) instead of using this define,
//  #define FSR_RCAS_DENOISE 1
//==============================================================================================================================
// This is set at the limit of providing unnatural results for sharpening.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                      CONSTANT SETUP
//==============================================================================================================================
// Call to setup required constant values (works on CPU or GPU).
// The scale is {0.0 := maximum, to N>0, where N is the number of stops (halving) of the reduction of sharpness}.
// Transform from stops to linear value.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                   NON-PACKED 32-BIT VERSION
//==============================================================================================================================
// Input callback prototypes that need to be implemented by calling shader
//------------------------------------------------------------------------------------------------------------------------------
// Algorithm uses minimal 3x3 pixel neighborhood.
//    b
//  d e f
//    h
// Rename (32-bit) or regroup (16-bit).
// Run optional input transform.
// Luma times 2.
// Noise detection.
// Min and max of ring.
// Immediate constants for peak range.
// Limiters, these need to be high precision RCPs.
// Apply noise removal.
// Resolve, which needs the medium precision rcp approximation to avoid visible tonality changes.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                  NON-PACKED 16-BIT VERSION
//==============================================================================================================================
// Input callback prototypes that need to be implemented by calling shader
//------------------------------------------------------------------------------------------------------------------------------
// Sharpening algorithm uses minimal 3x3 pixel neighborhood.
//    b
//  d e f
//    h
// Rename (32-bit) or regroup (16-bit).
// Run optional input transform.
// Luma times 2.
// Noise detection.
// Min and max of ring.
// Immediate constants for peak range.
// Limiters, these need to be high precision RCPs.
// Apply noise removal.
// Resolve, which needs the medium precision rcp approximation to avoid visible tonality changes.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//                                                     PACKED 16-BIT VERSION
//==============================================================================================================================
// Input callback prototypes that need to be implemented by the calling shader
//------------------------------------------------------------------------------------------------------------------------------
// Can be used to convert from packed Structures of Arrays to Arrays of Structures for store.
// Invoke a slower path for DX only, since it won't allow uninitialized values.
//------------------------------------------------------------------------------------------------------------------------------
// Output values are for 2 8x8 tiles in a 16x8 region.
//  pix<R,G,B>.x =  left 8x8 tile
//  pix<R,G,B>.y = right 8x8 tile
// This enables later processing to easily be packed as well.
// No scaling algorithm uses minimal 3x3 pixel neighborhood.
// Arrays of Structures to Structures of Arrays conversion.
// Run optional input transform.
// Luma times 2.
// Noise detection.
// Min and max of ring.
// Immediate constants for peak range.
// Limiters, these need to be high precision RCPs.
// Apply noise removal.
// Resolve, which needs the medium precision rcp approximation to avoid visible tonality changes.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//
//                                          FSR - [LFGA] LINEAR FILM GRAIN APPLICATOR
//
//------------------------------------------------------------------------------------------------------------------------------
// Adding output-resolution film grain after scaling is a good way to mask both rendering and scaling artifacts.
// Suggest using tiled blue noise as film grain input, with peak noise frequency set for a specific look and feel.
// The 'Lfga*()' functions provide a convenient way to introduce grain.
// These functions limit grain based on distance to signal limits.
// This is done so that the grain is temporally energy preserving, and thus won't modify image tonality.
// Grain application should be done in a linear colorspace.
// The grain should be temporally changing, but have a temporal sum per pixel that adds to zero (non-biased).
//------------------------------------------------------------------------------------------------------------------------------
// Usage,
//   FsrLfga*(
//    color, // In/out linear colorspace color {0 to 1} ranged.
//    grain, // Per pixel grain texture value {-0.5 to 0.5} ranged, input is 3-channel to support colored grain.
//    amount); // Amount of grain (0 to 1} ranged.
//------------------------------------------------------------------------------------------------------------------------------
// Example if grain texture is monochrome: 'FsrLfgaF(color,AF3_(grain),amount)'
//==============================================================================================================================
// Maximum grain is the minimum distance to the signal limit.
//==============================================================================================================================
// Half precision version (slower).
//------------------------------------------------------------------------------------------------------------------------------
// Packed half precision version (faster).
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//
//                                          FSR - [SRTM] SIMPLE REVERSIBLE TONE-MAPPER
//
//------------------------------------------------------------------------------------------------------------------------------
// This provides a way to take linear HDR color {0 to FP16_MAX} and convert it into a temporary {0 to 1} ranged post-tonemapped linear.
// The tonemapper preserves RGB ratio, which helps maintain HDR color bleed during filtering.
//------------------------------------------------------------------------------------------------------------------------------
// Reversible tonemapper usage,
//  FsrSrtm*(color); // {0 to FP16_MAX} converted to {0 to 1}.
//  FsrSrtmInv*(color); // {0 to 1} converted into {0 to 32768, output peak safe for FP16}.
//==============================================================================================================================
// The extra max solves the c=1.0 case (which is a /0).
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//_____________________________________________________________/\_______________________________________________________________
//==============================================================================================================================
//
//                                       FSR - [TEPD] TEMPORAL ENERGY PRESERVING DITHER
//
//------------------------------------------------------------------------------------------------------------------------------
// Temporally energy preserving dithered {0 to 1} linear to gamma 2.0 conversion.
// Gamma 2.0 is used so that the conversion back to linear is just to square the color.
// The conversion comes in 8-bit and 10-bit modes, designed for output to 8-bit UNORM or 10:10:10:2 respectively.
// Given good non-biased temporal blue noise as dither input,
// the output dither will temporally conserve energy.
// This is done by choosing the linear nearest step point instead of perceptual nearest.
// See code below for details.
//------------------------------------------------------------------------------------------------------------------------------
// DX SPEC RULES FOR FLOAT->UNORM 8-BIT CONVERSION
// ===============================================
// - Output is 'uint(floor(saturate(n)*255.0+0.5))'.
// - Thus rounding is to nearest.
// - NaN gets converted to zero.
// - INF is clamped to {0.0 to 1.0}.
//==============================================================================================================================
// Hand tuned integer position to dither value, with more values than simple checkerboard.
// Only 32-bit has enough precision for this compddation.
// Output is {0 to <1}.
// The 1.61803 golden ratio.
// Number designed to provide a good visual pattern.
//------------------------------------------------------------------------------------------------------------------------------
// This version is 8-bit gamma 2.0.
// The 'c' input is {0 to 1}.
// Output is {0 to 1} ready for image store.
// Ratio of 'a' to 'b' required to produce 'c'.
// APrxLoRcpF1() won't work here (at least for very high dynamic ranges).
// APrxMedRcpF1() is an IADD,FMA,MUL.
// Use the ratio as a cutoff to choose 'a' or 'b'.
// AGtZeroF1() is a MUL.
//------------------------------------------------------------------------------------------------------------------------------
// This version is 10-bit gamma 2.0.
// The 'c' input is {0 to 1}.
// Output is {0 to 1} ready for image store.
//==============================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
//==============================================================================================================================
// This computes dither for positions 'p' and 'p+{8,0}'.
//------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------

*/

#pragma once

namespace RetroArchFsrShadersFsrPass0ShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,15,158,
229,37,70,46,162,206,
246,29,166,234,94,101,
159,175,1,0,0,0,
32,42,0,0,5,0,
0,0,52,0,0,0,
120,2,0,0,172,2,
0,0,224,2,0,0,
132,41,0,0,82,68,
69,70,60,2,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
20,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,4,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,112,1,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,140,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,176,1,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
140,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
196,1,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,140,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,214,1,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,240,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,130,1,0,0,
112,97,114,97,109,115,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,112,97,114,97,
109,115,95,79,117,116,
112,117,116,83,105,122,
101,0,112,97,114,97,
109,115,95,70,114,97,
109,101,67,111,117,110,
116,0,100,119,111,114,
100,0,171,171,0,0,
19,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
232,1,0,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,73,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,156,38,0,0,
80,0,0,0,167,9,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,1,0,0,0,
3,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,88,24,
0,4,0,112,16,0,
2,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
18,0,0,0,56,0,
0,8,50,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
70,128,32,0,1,0,
0,0,2,0,0,0,
28,0,0,5,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,86,0,0,5,
50,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,14,0,
0,11,194,0,16,0,
0,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,128,63,
6,132,32,0,1,0,
0,0,2,0,0,0,
56,0,0,8,194,0,
16,0,0,0,0,0,
166,14,16,0,0,0,
0,0,6,132,32,0,
1,0,0,0,0,0,
0,0,50,0,0,15,
50,0,16,0,1,0,
0,0,230,10,16,0,
0,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,63,0,0,
0,0,0,0,0,0,
2,64,0,0,0,0,
0,191,0,0,0,191,
0,0,0,0,0,0,
0,0,50,0,0,9,
50,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,230,10,
16,0,0,0,0,0,
70,0,16,0,1,0,
0,0,65,0,0,5,
194,0,16,0,0,0,
0,0,6,4,16,0,
0,0,0,0,0,0,
0,8,50,0,16,0,
0,0,0,0,230,10,
16,128,65,0,0,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
14,0,0,11,50,0,
16,0,1,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,0,0,
128,63,70,128,32,0,
1,0,0,0,0,0,
0,0,54,0,0,6,
66,0,16,0,1,0,
0,0,26,0,16,128,
65,0,0,0,1,0,
0,0,50,0,0,9,
194,0,16,0,0,0,
0,0,166,14,16,0,
0,0,0,0,6,4,
16,0,1,0,0,0,
6,8,16,0,1,0,
0,0,109,0,0,139,
194,0,0,128,67,85,
21,0,50,0,16,0,
2,0,0,0,230,10,
16,0,0,0,0,0,
22,126,16,0,2,0,
0,0,10,96,16,0,
2,0,0,0,54,0,
0,5,18,0,16,0,
3,0,0,0,26,0,
16,0,2,0,0,0,
109,0,0,139,194,0,
0,128,67,85,21,0,
50,0,16,0,4,0,
0,0,230,10,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
26,96,16,0,2,0,
0,0,54,0,0,5,
34,0,16,0,3,0,
0,0,10,0,16,0,
4,0,0,0,109,0,
0,139,194,0,0,128,
67,85,21,0,194,0,
16,0,4,0,0,0,
230,10,16,0,0,0,
0,0,230,116,16,0,
2,0,0,0,42,96,
16,0,2,0,0,0,
54,0,0,5,66,0,
16,0,3,0,0,0,
42,0,16,0,4,0,
0,0,50,0,0,12,
50,0,16,0,5,0,
0,0,22,5,16,0,
2,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,63,0,0,
0,0,0,0,0,0,
70,0,16,0,4,0,
0,0,54,0,0,5,
98,0,16,0,2,0,
0,0,86,7,16,0,
4,0,0,0,50,0,
0,12,50,0,16,0,
4,0,0,0,230,10,
16,0,4,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,0,0,0,
0,0,70,0,16,0,
5,0,0,0,56,0,
0,7,130,0,16,0,
1,0,0,0,26,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
0,64,0,0,0,7,
194,0,16,0,1,0,
0,0,166,14,16,0,
0,0,0,0,6,12,
16,0,1,0,0,0,
56,0,0,10,226,0,
16,0,5,0,0,0,
86,4,16,0,1,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
128,64,0,0,128,191,
0,0,0,64,109,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,6,0,0,0,
230,10,16,0,1,0,
0,0,70,123,16,0,
2,0,0,0,42,96,
16,0,2,0,0,0,
109,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,7,0,
0,0,230,10,16,0,
1,0,0,0,70,126,
16,0,2,0,0,0,
10,96,16,0,2,0,
0,0,109,0,0,139,
194,0,0,128,67,85,
21,0,242,0,16,0,
1,0,0,0,230,10,
16,0,1,0,0,0,
134,125,16,0,2,0,
0,0,26,96,16,0,
2,0,0,0,50,0,
0,12,242,0,16,0,
8,0,0,0,70,14,
16,0,7,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,63,0,0,
0,63,134,13,16,0,
1,0,0,0,50,0,
0,12,242,0,16,0,
8,0,0,0,70,11,
16,0,6,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,63,0,0,
0,63,70,14,16,0,
8,0,0,0,0,0,
0,8,98,0,16,0,
4,0,0,0,86,5,
16,128,65,0,0,0,
4,0,0,0,246,12,
16,0,8,0,0,0,
0,0,0,8,114,0,
16,0,9,0,0,0,
246,12,16,128,65,0,
0,0,8,0,0,0,
38,9,16,0,8,0,
0,0,52,0,0,9,
130,0,16,0,2,0,
0,0,26,0,16,128,
129,0,0,0,4,0,
0,0,26,0,16,128,
129,0,0,0,9,0,
0,0,30,0,0,8,
130,0,16,0,2,0,
0,0,58,0,16,128,
65,0,0,0,2,0,
0,0,1,64,0,0,
187,126,240,126,56,32,
0,8,130,0,16,0,
2,0,0,0,58,0,
16,0,2,0,0,0,
42,0,16,128,129,0,
0,0,4,0,0,0,
56,0,0,7,130,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,54,0,
0,5,18,0,16,0,
5,0,0,0,1,64,
0,0,0,0,0,0,
0,0,0,7,242,0,
16,0,5,0,0,0,
230,14,16,0,0,0,
0,0,230,4,16,0,
5,0,0,0,109,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,10,0,0,0,
70,0,16,0,5,0,
0,0,70,123,16,0,
2,0,0,0,42,96,
16,0,2,0,0,0,
109,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,11,0,
0,0,70,0,16,0,
5,0,0,0,70,126,
16,0,2,0,0,0,
10,96,16,0,2,0,
0,0,109,0,0,139,
194,0,0,128,67,85,
21,0,242,0,16,0,
12,0,0,0,70,0,
16,0,5,0,0,0,
134,125,16,0,2,0,
0,0,26,96,16,0,
2,0,0,0,50,0,
0,12,242,0,16,0,
13,0,0,0,230,1,
16,0,11,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,63,0,0,
0,63,214,2,16,0,
12,0,0,0,50,0,
0,12,242,0,16,0,
13,0,0,0,182,1,
16,0,10,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,63,0,0,
0,63,70,14,16,0,
13,0,0,0,0,0,
0,8,194,0,16,0,
0,0,0,0,6,0,
16,128,65,0,0,0,
4,0,0,0,6,8,
16,0,13,0,0,0,
0,0,0,8,178,0,
16,0,4,0,0,0,
22,13,16,128,65,0,
0,0,13,0,0,0,
134,8,16,0,13,0,
0,0,52,0,0,9,
66,0,16,0,0,0,
0,0,42,0,16,128,
129,0,0,0,0,0,
0,0,26,0,16,128,
129,0,0,0,4,0,
0,0,30,0,0,8,
66,0,16,0,0,0,
0,0,42,0,16,128,
65,0,0,0,0,0,
0,0,1,64,0,0,
187,126,240,126,56,32,
0,8,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
58,0,16,128,129,0,
0,0,0,0,0,0,
56,0,0,7,66,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,0,0,
0,11,242,0,16,0,
14,0,0,0,70,4,
16,128,65,0,0,0,
0,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
0,0,0,0,128,191,
56,0,0,7,130,0,
16,0,3,0,0,0,
26,0,16,0,14,0,
0,0,10,0,16,0,
14,0,0,0,56,0,
0,7,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
58,0,16,0,3,0,
0,0,0,0,0,8,
242,0,16,0,15,0,
0,0,246,2,16,0,
8,0,0,0,70,8,
16,128,65,0,0,0,
13,0,0,0,52,0,
0,9,146,0,16,0,
4,0,0,0,6,12,
16,128,129,0,0,0,
4,0,0,0,6,12,
16,128,129,0,0,0,
15,0,0,0,30,0,
0,11,146,0,16,0,
4,0,0,0,6,12,
16,128,65,0,0,0,
4,0,0,0,2,64,
0,0,187,126,240,126,
0,0,0,0,0,0,
0,0,187,126,240,126,
56,32,0,8,18,0,
16,0,4,0,0,0,
10,0,16,0,4,0,
0,0,26,0,16,128,
129,0,0,0,15,0,
0,0,56,0,0,7,
18,0,16,0,4,0,
0,0,10,0,16,0,
4,0,0,0,10,0,
16,0,4,0,0,0,
50,0,0,9,66,0,
16,0,0,0,0,0,
10,0,16,0,4,0,
0,0,58,0,16,0,
3,0,0,0,42,0,
16,0,0,0,0,0,
52,0,0,9,50,0,
16,0,5,0,0,0,
134,0,16,128,129,0,
0,0,9,0,0,0,
198,0,16,128,129,0,
0,0,15,0,0,0,
30,0,0,11,50,0,
16,0,5,0,0,0,
70,0,16,128,65,0,
0,0,5,0,0,0,
2,64,0,0,187,126,
240,126,187,126,240,126,
0,0,0,0,0,0,
0,0,56,32,0,8,
18,0,16,0,4,0,
0,0,10,0,16,0,
5,0,0,0,42,0,
16,128,129,0,0,0,
15,0,0,0,56,0,
0,7,18,0,16,0,
4,0,0,0,10,0,
16,0,4,0,0,0,
10,0,16,0,4,0,
0,0,56,0,0,7,
82,0,16,0,9,0,
0,0,6,1,16,0,
0,0,0,0,86,4,
16,0,14,0,0,0,
50,0,0,9,66,0,
16,0,0,0,0,0,
10,0,16,0,4,0,
0,0,10,0,16,0,
9,0,0,0,42,0,
16,0,0,0,0,0,
50,0,0,9,66,0,
16,0,0,0,0,0,
58,0,16,0,2,0,
0,0,10,0,16,0,
9,0,0,0,42,0,
16,0,0,0,0,0,
0,0,0,8,98,0,
16,0,8,0,0,0,
6,1,16,0,8,0,
0,0,246,14,16,128,
65,0,0,0,13,0,
0,0,56,32,0,8,
130,0,16,0,2,0,
0,0,58,0,16,0,
4,0,0,0,26,0,
16,128,129,0,0,0,
8,0,0,0,56,0,
0,7,130,0,16,0,
2,0,0,0,58,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,50,0,0,9,
66,0,16,0,0,0,
0,0,58,0,16,0,
2,0,0,0,42,0,
16,0,9,0,0,0,
42,0,16,0,0,0,
0,0,109,0,0,139,
194,0,0,128,67,85,
21,0,146,0,16,0,
4,0,0,0,230,10,
16,0,5,0,0,0,
38,125,16,0,2,0,
0,0,10,96,16,0,
2,0,0,0,109,0,
0,139,194,0,0,128,
67,85,21,0,162,0,
16,0,16,0,0,0,
230,10,16,0,5,0,
0,0,134,125,16,0,
2,0,0,0,26,96,
16,0,2,0,0,0,
109,0,0,139,194,0,
0,128,67,85,21,0,
194,0,16,0,17,0,
0,0,230,10,16,0,
5,0,0,0,70,123,
16,0,2,0,0,0,
42,96,16,0,2,0,
0,0,50,0,0,12,
82,0,16,0,5,0,
0,0,6,3,16,0,
4,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,0,0,0,
0,63,0,0,0,0,
86,7,16,0,16,0,
0,0,50,0,0,12,
82,0,16,0,5,0,
0,0,246,14,16,0,
17,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,0,0,0,
0,63,0,0,0,0,
6,2,16,0,5,0,
0,0,0,0,0,8,
194,0,16,0,5,0,
0,0,166,2,16,128,
65,0,0,0,13,0,
0,0,166,10,16,0,
5,0,0,0,0,0,
0,8,146,0,16,0,
8,0,0,0,6,12,
16,128,65,0,0,0,
8,0,0,0,6,0,
16,0,5,0,0,0,
52,0,0,9,130,0,
16,0,2,0,0,0,
26,0,16,128,129,0,
0,0,4,0,0,0,
42,0,16,128,129,0,
0,0,5,0,0,0,
30,0,0,8,130,0,
16,0,2,0,0,0,
58,0,16,128,65,0,
0,0,2,0,0,0,
1,64,0,0,187,126,
240,126,56,32,0,8,
130,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,58,0,
16,128,129,0,0,0,
5,0,0,0,56,0,
0,7,130,0,16,0,
2,0,0,0,58,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,50,0,0,9,
66,0,16,0,0,0,
0,0,58,0,16,0,
2,0,0,0,42,0,
16,0,9,0,0,0,
42,0,16,0,0,0,
0,0,56,32,0,8,
130,0,16,0,2,0,
0,0,26,0,16,0,
5,0,0,0,42,0,
16,128,129,0,0,0,
8,0,0,0,56,0,
0,7,130,0,16,0,
2,0,0,0,58,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,56,0,0,7,
34,0,16,0,4,0,
0,0,26,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
50,0,0,9,66,0,
16,0,0,0,0,0,
58,0,16,0,2,0,
0,0,26,0,16,0,
4,0,0,0,42,0,
16,0,0,0,0,0,
52,0,0,9,130,0,
16,0,2,0,0,0,
26,0,16,128,129,0,
0,0,9,0,0,0,
10,0,16,128,129,0,
0,0,8,0,0,0,
30,0,0,8,130,0,
16,0,2,0,0,0,
58,0,16,128,65,0,
0,0,2,0,0,0,
1,64,0,0,187,126,
240,126,56,32,0,8,
130,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,58,0,
16,128,129,0,0,0,
8,0,0,0,56,0,
0,7,130,0,16,0,
2,0,0,0,58,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,50,0,0,9,
66,0,16,0,0,0,
0,0,58,0,16,0,
2,0,0,0,26,0,
16,0,4,0,0,0,
42,0,16,0,0,0,
0,0,56,0,0,7,
66,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,63,
56,0,0,7,66,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,50,0,
0,15,98,0,16,0,
5,0,0,0,166,10,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,191,
225,122,148,190,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
128,63,0,0,0,63,
0,0,0,0,56,0,
0,7,130,0,16,0,
2,0,0,0,42,0,
16,0,4,0,0,0,
10,0,16,0,9,0,
0,0,50,0,0,9,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,58,0,
16,0,3,0,0,0,
58,0,16,0,2,0,
0,0,50,0,0,9,
130,0,16,0,0,0,
0,0,58,0,16,0,
5,0,0,0,42,0,
16,0,9,0,0,0,
58,0,16,0,0,0,
0,0,50,0,0,9,
66,0,16,0,13,0,
0,0,58,0,16,0,
8,0,0,0,26,0,
16,0,4,0,0,0,
58,0,16,0,0,0,
0,0,56,0,0,7,
130,0,16,0,0,0,
0,0,10,0,16,0,
9,0,0,0,42,0,
16,0,15,0,0,0,
50,0,0,9,130,0,
16,0,0,0,0,0,
26,0,16,0,15,0,
0,0,58,0,16,0,
3,0,0,0,58,0,
16,0,0,0,0,0,
50,0,0,9,130,0,
16,0,0,0,0,0,
26,0,16,0,8,0,
0,0,42,0,16,0,
9,0,0,0,58,0,
16,0,0,0,0,0,
50,0,0,9,34,0,
16,0,13,0,0,0,
42,0,16,0,8,0,
0,0,26,0,16,0,
4,0,0,0,58,0,
16,0,0,0,0,0,
56,0,0,7,98,0,
16,0,4,0,0,0,
86,6,16,0,13,0,
0,0,86,6,16,0,
13,0,0,0,0,0,
0,7,130,0,16,0,
0,0,0,0,42,0,
16,0,4,0,0,0,
26,0,16,0,4,0,
0,0,85,0,0,7,
130,0,16,0,2,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,1,0,0,0,
49,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,56,30,0,
0,8,130,0,16,0,
2,0,0,0,58,0,
16,128,65,0,0,0,
2,0,0,0,1,64,
0,0,116,125,52,95,
55,0,0,9,130,0,
16,0,2,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,58,0,
16,0,2,0,0,0,
55,0,0,9,18,0,
16,0,13,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,26,0,
16,0,13,0,0,0,
56,0,0,7,98,0,
16,0,4,0,0,0,
246,15,16,0,2,0,
0,0,6,2,16,0,
13,0,0,0,52,0,
0,9,130,0,16,0,
0,0,0,0,42,0,
16,128,129,0,0,0,
4,0,0,0,26,0,
16,128,129,0,0,0,
4,0,0,0,30,0,
0,8,130,0,16,0,
0,0,0,0,58,0,
16,128,65,0,0,0,
0,0,0,0,1,64,
0,0,187,126,240,126,
15,0,0,7,130,0,
16,0,2,0,0,0,
150,5,16,0,4,0,
0,0,150,5,16,0,
4,0,0,0,50,0,
0,9,130,0,16,0,
0,0,0,0,58,0,
16,0,2,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,191,50,0,
0,9,18,0,16,0,
5,0,0,0,58,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,0,0,
0,11,242,0,16,0,
8,0,0,0,70,4,
16,128,65,0,0,0,
0,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,191,0,0,
128,191,0,0,128,63,
56,0,0,7,194,0,
16,0,0,0,0,0,
86,5,16,0,4,0,
0,0,86,13,16,0,
8,0,0,0,50,0,
0,10,194,0,16,0,
9,0,0,0,6,8,
16,0,8,0,0,0,
166,10,16,128,65,0,
0,0,4,0,0,0,
166,14,16,0,0,0,
0,0,15,0,0,7,
34,0,16,0,9,0,
0,0,70,0,16,0,
8,0,0,0,150,5,
16,0,4,0,0,0,
15,0,0,7,18,0,
16,0,9,0,0,0,
230,10,16,0,8,0,
0,0,150,5,16,0,
4,0,0,0,56,0,
0,7,194,0,16,0,
0,0,0,0,6,4,
16,0,5,0,0,0,
6,12,16,0,9,0,
0,0,56,0,0,7,
50,0,16,0,8,0,
0,0,70,0,16,0,
5,0,0,0,150,5,
16,0,9,0,0,0,
15,0,0,7,130,0,
16,0,2,0,0,0,
70,0,16,0,8,0,
0,0,70,0,16,0,
8,0,0,0,15,0,
0,7,66,0,16,0,
0,0,0,0,230,10,
16,0,0,0,0,0,
230,10,16,0,0,0,
0,0,30,0,0,8,
130,0,16,0,0,0,
0,0,42,0,16,128,
65,0,0,0,5,0,
0,0,1,64,0,0,
187,126,240,126,51,0,
0,7,130,0,16,0,
2,0,0,0,58,0,
16,0,0,0,0,0,
58,0,16,0,2,0,
0,0,50,0,0,9,
130,0,16,0,3,0,
0,0,42,0,16,0,
5,0,0,0,58,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
128,191,50,0,0,9,
130,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,1,64,
0,0,205,204,204,62,
1,64,0,0,0,0,
128,191,56,0,0,7,
130,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,58,0,
16,0,2,0,0,0,
50,0,0,9,130,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,1,64,0,0,
0,0,200,63,1,64,
0,0,0,0,16,191,
56,0,0,7,130,0,
16,0,3,0,0,0,
58,0,16,0,3,0,
0,0,58,0,16,0,
3,0,0,0,56,0,
0,7,130,0,16,0,
2,0,0,0,58,0,
16,0,2,0,0,0,
58,0,16,0,3,0,
0,0,56,0,0,7,
114,0,16,0,2,0,
0,0,246,15,16,0,
2,0,0,0,70,2,
16,0,2,0,0,0,
56,0,0,7,130,0,
16,0,3,0,0,0,
26,0,16,0,4,0,
0,0,58,0,16,0,
14,0,0,0,50,0,
0,10,34,0,16,0,
8,0,0,0,42,0,
16,0,14,0,0,0,
42,0,16,128,65,0,
0,0,4,0,0,0,
58,0,16,0,3,0,
0,0,15,0,0,7,
18,0,16,0,8,0,
0,0,230,10,16,0,
14,0,0,0,150,5,
16,0,4,0,0,0,
56,0,0,7,50,0,
16,0,8,0,0,0,
70,0,16,0,5,0,
0,0,70,0,16,0,
8,0,0,0,15,0,
0,7,130,0,16,0,
3,0,0,0,70,0,
16,0,8,0,0,0,
70,0,16,0,8,0,
0,0,51,0,0,7,
130,0,16,0,3,0,
0,0,58,0,16,0,
0,0,0,0,58,0,
16,0,3,0,0,0,
50,0,0,9,130,0,
16,0,5,0,0,0,
42,0,16,0,5,0,
0,0,58,0,16,0,
3,0,0,0,1,64,
0,0,0,0,128,191,
50,0,0,9,130,0,
16,0,3,0,0,0,
58,0,16,0,3,0,
0,0,1,64,0,0,
205,204,204,62,1,64,
0,0,0,0,128,191,
56,0,0,7,130,0,
16,0,3,0,0,0,
58,0,16,0,3,0,
0,0,58,0,16,0,
3,0,0,0,50,0,
0,9,130,0,16,0,
3,0,0,0,58,0,
16,0,3,0,0,0,
1,64,0,0,0,0,
200,63,1,64,0,0,
0,0,16,191,56,0,
0,7,130,0,16,0,
5,0,0,0,58,0,
16,0,5,0,0,0,
58,0,16,0,5,0,
0,0,56,0,0,7,
18,0,16,0,8,0,
0,0,58,0,16,0,
3,0,0,0,58,0,
16,0,5,0,0,0,
50,0,0,9,130,0,
16,0,2,0,0,0,
58,0,16,0,3,0,
0,0,58,0,16,0,
5,0,0,0,58,0,
16,0,2,0,0,0,
50,0,0,9,114,0,
16,0,2,0,0,0,
70,2,16,0,3,0,
0,0,6,0,16,0,
8,0,0,0,70,2,
16,0,2,0,0,0,
51,0,0,7,66,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,50,0,
0,9,18,0,16,0,
3,0,0,0,42,0,
16,0,5,0,0,0,
42,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,191,50,0,
0,9,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
1,64,0,0,205,204,
204,62,1,64,0,0,
0,0,128,191,56,0,
0,7,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,50,0,0,9,
66,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,1,64,
0,0,0,0,200,63,
1,64,0,0,0,0,
16,191,56,0,0,7,
18,0,16,0,3,0,
0,0,10,0,16,0,
3,0,0,0,10,0,
16,0,3,0,0,0,
56,0,0,7,34,0,
16,0,3,0,0,0,
42,0,16,0,0,0,
0,0,10,0,16,0,
3,0,0,0,50,0,
0,9,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
10,0,16,0,3,0,
0,0,58,0,16,0,
2,0,0,0,54,0,
0,5,18,0,16,0,
8,0,0,0,10,0,
16,0,11,0,0,0,
54,0,0,5,34,0,
16,0,8,0,0,0,
10,0,16,0,12,0,
0,0,54,0,0,5,
66,0,16,0,8,0,
0,0,10,0,16,0,
10,0,0,0,50,0,
0,9,114,0,16,0,
2,0,0,0,70,2,
16,0,8,0,0,0,
86,5,16,0,3,0,
0,0,70,2,16,0,
2,0,0,0,0,0,
0,11,242,0,16,0,
3,0,0,0,70,4,
16,128,65,0,0,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,128,63,0,0,
128,191,0,0,0,0,
56,0,0,7,50,0,
16,0,8,0,0,0,
86,5,16,0,4,0,
0,0,214,5,16,0,
3,0,0,0,50,0,
0,10,194,0,16,0,
8,0,0,0,6,8,
16,0,3,0,0,0,
166,10,16,128,65,0,
0,0,4,0,0,0,
6,4,16,0,8,0,
0,0,15,0,0,7,
34,0,16,0,8,0,
0,0,70,0,16,0,
3,0,0,0,150,5,
16,0,4,0,0,0,
15,0,0,7,18,0,
16,0,8,0,0,0,
230,10,16,0,3,0,
0,0,150,5,16,0,
4,0,0,0,56,0,
0,7,242,0,16,0,
3,0,0,0,70,4,
16,0,5,0,0,0,
198,9,16,0,8,0,
0,0,15,0,0,7,
130,0,16,0,2,0,
0,0,230,10,16,0,
3,0,0,0,230,10,
16,0,3,0,0,0,
51,0,0,7,130,0,
16,0,2,0,0,0,
58,0,16,0,0,0,
0,0,58,0,16,0,
2,0,0,0,15,0,
0,7,18,0,16,0,
3,0,0,0,70,0,
16,0,3,0,0,0,
70,0,16,0,3,0,
0,0,51,0,0,7,
18,0,16,0,3,0,
0,0,58,0,16,0,
0,0,0,0,10,0,
16,0,3,0,0,0,
50,0,0,9,34,0,
16,0,3,0,0,0,
42,0,16,0,5,0,
0,0,58,0,16,0,
2,0,0,0,1,64,
0,0,0,0,128,191,
50,0,0,9,130,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,1,64,0,0,
205,204,204,62,1,64,
0,0,0,0,128,191,
56,0,0,7,130,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,50,0,
0,9,130,0,16,0,
2,0,0,0,58,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
200,63,1,64,0,0,
0,0,16,191,56,0,
0,7,34,0,16,0,
3,0,0,0,26,0,
16,0,3,0,0,0,
26,0,16,0,3,0,
0,0,56,0,0,7,
66,0,16,0,3,0,
0,0,58,0,16,0,
2,0,0,0,26,0,
16,0,3,0,0,0,
50,0,0,9,66,0,
16,0,0,0,0,0,
58,0,16,0,2,0,
0,0,26,0,16,0,
3,0,0,0,42,0,
16,0,0,0,0,0,
54,0,0,5,18,0,
16,0,8,0,0,0,
26,0,16,0,11,0,
0,0,54,0,0,5,
34,0,16,0,8,0,
0,0,42,0,16,0,
12,0,0,0,54,0,
0,5,66,0,16,0,
8,0,0,0,26,0,
16,0,10,0,0,0,
50,0,0,9,114,0,
16,0,2,0,0,0,
70,2,16,0,8,0,
0,0,166,10,16,0,
3,0,0,0,70,2,
16,0,2,0,0,0,
56,0,0,8,130,0,
16,0,2,0,0,0,
26,0,16,128,65,0,
0,0,0,0,0,0,
26,0,16,0,4,0,
0,0,50,0,0,9,
34,0,16,0,9,0,
0,0,10,0,16,0,
0,0,0,0,42,0,
16,0,4,0,0,0,
58,0,16,0,2,0,
0,0,15,0,0,8,
18,0,16,0,9,0,
0,0,70,0,16,128,
65,0,0,0,0,0,
0,0,150,5,16,0,
4,0,0,0,56,0,
0,7,98,0,16,0,
3,0,0,0,6,1,
16,0,5,0,0,0,
6,1,16,0,9,0,
0,0,15,0,0,7,
130,0,16,0,2,0,
0,0,150,5,16,0,
3,0,0,0,150,5,
16,0,3,0,0,0,
51,0,0,7,130,0,
16,0,2,0,0,0,
58,0,16,0,0,0,
0,0,58,0,16,0,
2,0,0,0,50,0,
0,9,34,0,16,0,
3,0,0,0,42,0,
16,0,5,0,0,0,
58,0,16,0,2,0,
0,0,1,64,0,0,
0,0,128,191,50,0,
0,9,130,0,16,0,
2,0,0,0,58,0,
16,0,2,0,0,0,
1,64,0,0,205,204,
204,62,1,64,0,0,
0,0,128,191,56,0,
0,7,130,0,16,0,
2,0,0,0,58,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,50,0,0,9,
130,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,1,64,
0,0,0,0,200,63,
1,64,0,0,0,0,
16,191,56,0,0,7,
34,0,16,0,3,0,
0,0,26,0,16,0,
3,0,0,0,26,0,
16,0,3,0,0,0,
56,0,0,7,66,0,
16,0,3,0,0,0,
58,0,16,0,2,0,
0,0,26,0,16,0,
3,0,0,0,50,0,
0,9,66,0,16,0,
0,0,0,0,58,0,
16,0,2,0,0,0,
26,0,16,0,3,0,
0,0,42,0,16,0,
0,0,0,0,54,0,
0,5,18,0,16,0,
12,0,0,0,42,0,
16,0,11,0,0,0,
54,0,0,5,18,0,
16,0,10,0,0,0,
58,0,16,0,11,0,
0,0,54,0,0,5,
34,0,16,0,10,0,
0,0,58,0,16,0,
12,0,0,0,54,0,
0,5,66,0,16,0,
12,0,0,0,58,0,
16,0,10,0,0,0,
50,0,0,9,114,0,
16,0,2,0,0,0,
70,2,16,0,12,0,
0,0,166,10,16,0,
3,0,0,0,70,2,
16,0,2,0,0,0,
50,0,0,9,130,0,
16,0,2,0,0,0,
42,0,16,0,5,0,
0,0,10,0,16,0,
3,0,0,0,1,64,
0,0,0,0,128,191,
50,0,0,9,18,0,
16,0,3,0,0,0,
10,0,16,0,3,0,
0,0,1,64,0,0,
205,204,204,62,1,64,
0,0,0,0,128,191,
56,0,0,7,18,0,
16,0,3,0,0,0,
10,0,16,0,3,0,
0,0,10,0,16,0,
3,0,0,0,50,0,
0,9,18,0,16,0,
3,0,0,0,10,0,
16,0,3,0,0,0,
1,64,0,0,0,0,
200,63,1,64,0,0,
0,0,16,191,56,0,
0,7,130,0,16,0,
2,0,0,0,58,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,56,0,0,7,
34,0,16,0,3,0,
0,0,58,0,16,0,
2,0,0,0,10,0,
16,0,3,0,0,0,
50,0,0,9,66,0,
16,0,0,0,0,0,
10,0,16,0,3,0,
0,0,58,0,16,0,
2,0,0,0,42,0,
16,0,0,0,0,0,
50,0,0,9,114,0,
16,0,2,0,0,0,
70,2,16,0,10,0,
0,0,86,5,16,0,
3,0,0,0,70,2,
16,0,2,0,0,0,
0,0,0,11,242,0,
16,0,3,0,0,0,
70,4,16,128,65,0,
0,0,0,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,0,64,0,0,
128,63,56,0,0,7,
50,0,16,0,9,0,
0,0,86,5,16,0,
4,0,0,0,214,5,
16,0,3,0,0,0,
50,0,0,10,194,0,
16,0,9,0,0,0,
6,8,16,0,3,0,
0,0,166,10,16,128,
65,0,0,0,4,0,
0,0,6,4,16,0,
9,0,0,0,15,0,
0,7,34,0,16,0,
9,0,0,0,70,0,
16,0,3,0,0,0,
150,5,16,0,4,0,
0,0,15,0,0,7,
18,0,16,0,9,0,
0,0,230,10,16,0,
3,0,0,0,150,5,
16,0,4,0,0,0,
56,0,0,7,242,0,
16,0,3,0,0,0,
70,4,16,0,5,0,
0,0,198,9,16,0,
9,0,0,0,15,0,
0,7,130,0,16,0,
2,0,0,0,230,10,
16,0,3,0,0,0,
230,10,16,0,3,0,
0,0,51,0,0,7,
130,0,16,0,2,0,
0,0,58,0,16,0,
0,0,0,0,58,0,
16,0,2,0,0,0,
15,0,0,7,18,0,
16,0,3,0,0,0,
70,0,16,0,3,0,
0,0,70,0,16,0,
3,0,0,0,51,0,
0,7,18,0,16,0,
3,0,0,0,58,0,
16,0,0,0,0,0,
10,0,16,0,3,0,
0,0,50,0,0,9,
34,0,16,0,3,0,
0,0,42,0,16,0,
5,0,0,0,58,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
128,191,50,0,0,9,
130,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,1,64,
0,0,205,204,204,62,
1,64,0,0,0,0,
128,191,56,0,0,7,
130,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,58,0,
16,0,2,0,0,0,
50,0,0,9,130,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,1,64,0,0,
0,0,200,63,1,64,
0,0,0,0,16,191,
56,0,0,7,34,0,
16,0,3,0,0,0,
26,0,16,0,3,0,
0,0,26,0,16,0,
3,0,0,0,56,0,
0,7,66,0,16,0,
3,0,0,0,58,0,
16,0,2,0,0,0,
26,0,16,0,3,0,
0,0,50,0,0,9,
66,0,16,0,0,0,
0,0,58,0,16,0,
2,0,0,0,26,0,
16,0,3,0,0,0,
42,0,16,0,0,0,
0,0,54,0,0,5,
18,0,16,0,9,0,
0,0,10,0,16,0,
7,0,0,0,54,0,
0,5,34,0,16,0,
9,0,0,0,10,0,
16,0,1,0,0,0,
54,0,0,5,66,0,
16,0,9,0,0,0,
10,0,16,0,6,0,
0,0,50,0,0,9,
114,0,16,0,2,0,
0,0,70,2,16,0,
9,0,0,0,166,10,
16,0,3,0,0,0,
70,2,16,0,2,0,
0,0,54,0,0,5,
18,0,16,0,10,0,
0,0,26,0,16,0,
7,0,0,0,54,0,
0,5,34,0,16,0,
10,0,0,0,42,0,
16,0,1,0,0,0,
54,0,0,5,66,0,
16,0,10,0,0,0,
26,0,16,0,6,0,
0,0,50,0,0,9,
130,0,16,0,2,0,
0,0,42,0,16,0,
5,0,0,0,10,0,
16,0,3,0,0,0,
1,64,0,0,0,0,
128,191,50,0,0,9,
18,0,16,0,3,0,
0,0,10,0,16,0,
3,0,0,0,1,64,
0,0,205,204,204,62,
1,64,0,0,0,0,
128,191,56,0,0,7,
18,0,16,0,3,0,
0,0,10,0,16,0,
3,0,0,0,10,0,
16,0,3,0,0,0,
50,0,0,9,18,0,
16,0,3,0,0,0,
10,0,16,0,3,0,
0,0,1,64,0,0,
0,0,200,63,1,64,
0,0,0,0,16,191,
56,0,0,7,130,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,56,0,
0,7,34,0,16,0,
3,0,0,0,58,0,
16,0,2,0,0,0,
10,0,16,0,3,0,
0,0,50,0,0,9,
66,0,16,0,0,0,
0,0,10,0,16,0,
3,0,0,0,58,0,
16,0,2,0,0,0,
42,0,16,0,0,0,
0,0,50,0,0,9,
114,0,16,0,2,0,
0,0,70,2,16,0,
10,0,0,0,86,5,
16,0,3,0,0,0,
70,2,16,0,2,0,
0,0,54,0,0,5,
18,0,16,0,1,0,
0,0,42,0,16,0,
7,0,0,0,54,0,
0,5,18,0,16,0,
6,0,0,0,58,0,
16,0,7,0,0,0,
54,0,0,5,34,0,
16,0,6,0,0,0,
58,0,16,0,1,0,
0,0,54,0,0,5,
66,0,16,0,1,0,
0,0,58,0,16,0,
6,0,0,0,0,0,
0,11,242,0,16,0,
3,0,0,0,70,4,
16,128,65,0,0,0,
0,0,0,0,2,64,
0,0,0,0,0,64,
0,0,0,0,0,0,
128,63,0,0,0,0,
0,0,0,11,242,0,
16,0,7,0,0,0,
70,4,16,128,65,0,
0,0,0,0,0,0,
2,64,0,0,0,0,
128,63,0,0,0,64,
0,0,0,0,0,0,
0,64,56,0,0,7,
50,0,16,0,0,0,
0,0,86,5,16,0,
4,0,0,0,214,5,
16,0,3,0,0,0,
50,0,0,10,194,0,
16,0,10,0,0,0,
6,8,16,0,3,0,
0,0,166,10,16,128,
65,0,0,0,4,0,
0,0,6,4,16,0,
0,0,0,0,15,0,
0,7,34,0,16,0,
10,0,0,0,70,0,
16,0,3,0,0,0,
150,5,16,0,4,0,
0,0,15,0,0,7,
18,0,16,0,10,0,
0,0,230,10,16,0,
3,0,0,0,150,5,
16,0,4,0,0,0,
56,0,0,7,50,0,
16,0,0,0,0,0,
70,0,16,0,5,0,
0,0,198,0,16,0,
10,0,0,0,56,0,
0,7,50,0,16,0,
3,0,0,0,70,0,
16,0,5,0,0,0,
150,5,16,0,10,0,
0,0,15,0,0,7,
130,0,16,0,1,0,
0,0,70,0,16,0,
3,0,0,0,70,0,
16,0,3,0,0,0,
51,0,0,7,130,0,
16,0,1,0,0,0,
58,0,16,0,0,0,
0,0,58,0,16,0,
1,0,0,0,15,0,
0,7,18,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,51,0,0,7,
18,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
50,0,0,9,34,0,
16,0,0,0,0,0,
42,0,16,0,5,0,
0,0,58,0,16,0,
1,0,0,0,1,64,
0,0,0,0,128,191,
50,0,0,9,130,0,
16,0,1,0,0,0,
58,0,16,0,1,0,
0,0,1,64,0,0,
205,204,204,62,1,64,
0,0,0,0,128,191,
56,0,0,7,130,0,
16,0,1,0,0,0,
58,0,16,0,1,0,
0,0,58,0,16,0,
1,0,0,0,50,0,
0,9,130,0,16,0,
1,0,0,0,58,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
200,63,1,64,0,0,
0,0,16,191,56,0,
0,7,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,56,0,0,7,
130,0,16,0,2,0,
0,0,26,0,16,0,
0,0,0,0,58,0,
16,0,1,0,0,0,
50,0,0,9,34,0,
16,0,0,0,0,0,
58,0,16,0,1,0,
0,0,26,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
50,0,0,9,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,246,15,16,0,
2,0,0,0,70,2,
16,0,2,0,0,0,
50,0,0,9,66,0,
16,0,0,0,0,0,
42,0,16,0,5,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,191,
50,0,0,9,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
205,204,204,62,1,64,
0,0,0,0,128,191,
56,0,0,7,82,0,
16,0,0,0,0,0,
6,2,16,0,0,0,
0,0,6,2,16,0,
0,0,0,0,50,0,
0,9,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
200,63,1,64,0,0,
0,0,16,191,56,0,
0,7,130,0,16,0,
1,0,0,0,42,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,50,0,0,9,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,50,0,0,9,
114,0,16,0,1,0,
0,0,70,2,16,0,
6,0,0,0,246,15,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,54,0,0,5,
18,0,16,0,16,0,
0,0,10,0,16,0,
4,0,0,0,54,0,
0,5,18,0,16,0,
17,0,0,0,58,0,
16,0,4,0,0,0,
54,0,0,5,34,0,
16,0,17,0,0,0,
58,0,16,0,16,0,
0,0,54,0,0,5,
66,0,16,0,16,0,
0,0,58,0,16,0,
17,0,0,0,56,0,
0,7,98,0,16,0,
0,0,0,0,86,5,
16,0,4,0,0,0,
86,7,16,0,7,0,
0,0,50,0,0,10,
194,0,16,0,2,0,
0,0,6,8,16,0,
7,0,0,0,166,10,
16,128,65,0,0,0,
4,0,0,0,86,9,
16,0,0,0,0,0,
15,0,0,7,34,0,
16,0,2,0,0,0,
70,0,16,0,7,0,
0,0,150,5,16,0,
4,0,0,0,15,0,
0,7,18,0,16,0,
2,0,0,0,230,10,
16,0,7,0,0,0,
150,5,16,0,4,0,
0,0,56,0,0,7,
98,0,16,0,0,0,
0,0,6,1,16,0,
5,0,0,0,6,3,
16,0,2,0,0,0,
56,0,0,7,50,0,
16,0,2,0,0,0,
70,0,16,0,5,0,
0,0,150,5,16,0,
2,0,0,0,15,0,
0,7,130,0,16,0,
1,0,0,0,70,0,
16,0,2,0,0,0,
70,0,16,0,2,0,
0,0,51,0,0,7,
130,0,16,0,1,0,
0,0,58,0,16,0,
0,0,0,0,58,0,
16,0,1,0,0,0,
15,0,0,7,34,0,
16,0,0,0,0,0,
150,5,16,0,0,0,
0,0,150,5,16,0,
0,0,0,0,51,0,
0,7,34,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,50,0,0,9,
66,0,16,0,0,0,
0,0,42,0,16,0,
5,0,0,0,58,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
128,191,50,0,0,9,
130,0,16,0,0,0,
0,0,58,0,16,0,
1,0,0,0,1,64,
0,0,205,204,204,62,
1,64,0,0,0,0,
128,191,56,0,0,7,
194,0,16,0,0,0,
0,0,166,14,16,0,
0,0,0,0,166,14,
16,0,0,0,0,0,
50,0,0,9,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,200,63,1,64,
0,0,0,0,16,191,
50,0,0,9,130,0,
16,0,1,0,0,0,
42,0,16,0,5,0,
0,0,26,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,191,
50,0,0,9,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,1,64,0,0,
205,204,204,62,1,64,
0,0,0,0,128,191,
56,0,0,7,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,50,0,
0,9,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
200,63,1,64,0,0,
0,0,16,191,56,0,
0,7,130,0,16,0,
1,0,0,0,58,0,
16,0,1,0,0,0,
58,0,16,0,1,0,
0,0,56,0,0,7,
18,0,16,0,2,0,
0,0,42,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
50,0,0,9,18,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
50,0,0,9,18,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,58,0,16,0,
1,0,0,0,10,0,
16,0,0,0,0,0,
56,0,0,7,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,58,0,16,0,
1,0,0,0,14,0,
0,10,18,0,16,0,
0,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,128,63,
10,0,16,0,0,0,
0,0,50,0,0,9,
114,0,16,0,1,0,
0,0,70,2,16,0,
16,0,0,0,6,0,
16,0,2,0,0,0,
70,2,16,0,1,0,
0,0,50,0,0,9,
226,0,16,0,0,0,
0,0,6,9,16,0,
17,0,0,0,86,5,
16,0,0,0,0,0,
6,9,16,0,1,0,
0,0,56,0,0,7,
114,0,16,0,0,0,
0,0,6,0,16,0,
0,0,0,0,150,7,
16,0,0,0,0,0,
51,0,0,7,114,0,
16,0,1,0,0,0,
70,2,16,0,8,0,
0,0,70,2,16,0,
6,0,0,0,52,0,
0,7,114,0,16,0,
2,0,0,0,70,2,
16,0,8,0,0,0,
70,2,16,0,6,0,
0,0,52,0,0,7,
114,0,16,0,2,0,
0,0,70,2,16,0,
2,0,0,0,70,2,
16,0,12,0,0,0,
51,0,0,7,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,70,2,16,0,
12,0,0,0,51,0,
0,7,114,0,16,0,
1,0,0,0,70,2,
16,0,9,0,0,0,
70,2,16,0,1,0,
0,0,52,0,0,7,
114,0,16,0,2,0,
0,0,70,2,16,0,
9,0,0,0,70,2,
16,0,2,0,0,0,
52,0,0,7,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,51,0,
0,7,114,32,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
70,2,16,0,2,0,
0,0,54,0,0,5,
130,32,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,62,0,
0,1,83,84,65,84,
148,0,0,0,52,1,
0,0,18,0,0,0,
0,0,0,0,2,0,
0,0,251,0,0,0,
9,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,30,0,0,0,
2,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
12,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};

}

namespace RetroArch
{
class FsrShadersFsrPass0ShaderDef : public ShaderDef
{
public:
	FsrShadersFsrPass0ShaderDef() : ShaderDef{}
	{
		Name = "fsr-pass0";
		VertexByteCode = RetroArchFsrShadersFsrPass0ShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchFsrShadersFsrPass0ShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchFsrShadersFsrPass0ShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchFsrShadersFsrPass0ShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
