/*
ShaderGlass shader motion-interpolation-shaders-motion_interpolation\motion_interpolation_pass3 imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/motion-interpolation/shaders/motion_interpolation/motion_interpolation_pass3.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

 Video Motion Interpolation
 based on Drudgerist's shadertoy:
 https://www.shadertoy.com/view/MtVfRz
 which is, in turn, based on bodhid's V+
 https://github.com/bodhid/Vplus
 This pass uses the motion vectors to make an in-between frame
 uncomment the next line to see the motion vectors for debugging purposes
#define OUTPUT_MOTION_VECTOR

*/

#pragma once

namespace RetroArchMotionInterpolationShadersMotion_interpolationMotion_interpolation_pass3ShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,83,76,
6,207,158,232,23,218,
199,54,6,190,190,231,
170,174,1,0,0,0,
176,6,0,0,5,0,
0,0,52,0,0,0,
240,3,0,0,36,4,
0,0,88,4,0,0,
20,6,0,0,82,68,
69,70,180,3,0,0,
1,0,0,0,124,1,
0,0,7,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
137,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
28,1,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,1,0,
0,0,54,1,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,4,0,
0,0,1,0,0,0,
1,0,0,0,69,1,
0,0,3,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
5,0,0,0,1,0,
0,0,1,0,0,0,
87,1,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,3,0,0,0,
1,0,0,0,13,0,
0,0,104,1,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,4,0,
0,0,1,0,0,0,
13,0,0,0,110,1,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
5,0,0,0,1,0,
0,0,13,0,0,0,
119,1,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,95,79,114,105,
103,105,110,97,108,72,
105,115,116,111,114,121,
49,95,115,97,109,112,
108,101,114,0,95,80,
97,115,115,48,95,115,
97,109,112,108,101,114,
0,95,79,114,105,103,
105,110,97,108,95,115,
97,109,112,108,101,114,
0,79,114,105,103,105,
110,97,108,72,105,115,
116,111,114,121,49,0,
80,97,115,115,48,0,
79,114,105,103,105,110,
97,108,0,80,117,115,
104,0,119,1,0,0,
6,0,0,0,148,1,
0,0,64,0,0,0,
0,0,0,0,0,0,
0,0,132,2,0,0,
0,0,0,0,16,0,
0,0,0,0,0,0,
160,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
196,2,0,0,16,0,
0,0,16,0,0,0,
0,0,0,0,160,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,216,2,
0,0,32,0,0,0,
16,0,0,0,0,0,
0,0,160,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,234,2,0,0,
48,0,0,0,4,0,
0,0,0,0,0,0,
4,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
40,3,0,0,52,0,
0,0,4,0,0,0,
2,0,0,0,76,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,3,
0,0,56,0,0,0,
4,0,0,0,2,0,
0,0,76,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,150,2,0,0,
112,97,114,97,109,115,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,112,97,114,97,
109,115,95,79,117,116,
112,117,116,83,105,122,
101,0,112,97,114,97,
109,115,95,70,114,97,
109,101,67,111,117,110,
116,0,100,119,111,114,
100,0,171,171,0,0,
19,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
252,2,0,0,112,97,
114,97,109,115,95,77,
79,84,73,79,78,95,
83,67,65,76,69,95,
70,65,67,84,79,82,
0,102,108,111,97,116,
0,171,171,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
67,3,0,0,112,97,
114,97,109,115,95,77,
79,84,73,79,78,95,
77,73,88,95,70,65,
67,84,79,82,0,77,
105,99,114,111,115,111,
102,116,32,40,82,41,
32,72,76,83,76,32,
83,104,97,100,101,114,
32,67,111,109,112,105,
108,101,114,32,49,48,
46,49,0,171,171,171,
73,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,0,
0,0,83,86,95,84,
97,114,103,101,116,0,
171,171,83,72,69,88,
180,1,0,0,80,0,
0,0,109,0,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
1,0,0,0,4,0,
0,0,90,0,0,3,
0,96,16,0,3,0,
0,0,90,0,0,3,
0,96,16,0,4,0,
0,0,90,0,0,3,
0,96,16,0,5,0,
0,0,88,24,0,4,
0,112,16,0,3,0,
0,0,85,85,0,0,
88,24,0,4,0,112,
16,0,4,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
5,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
2,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,50,0,
16,0,0,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
4,0,0,0,0,96,
16,0,4,0,0,0,
14,0,0,8,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,86,133,32,0,
1,0,0,0,3,0,
0,0,50,0,0,13,
50,0,16,0,0,0,
0,0,70,0,16,128,
65,0,0,0,0,0,
0,0,2,64,0,0,
0,0,0,63,0,0,
0,63,0,0,0,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,1,0,
0,0,70,0,16,0,
0,0,0,0,70,126,
16,0,5,0,0,0,
0,96,16,0,5,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,242,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
70,126,16,0,3,0,
0,0,0,96,16,0,
3,0,0,0,0,0,
0,8,242,0,16,0,
1,0,0,0,70,14,
16,128,65,0,0,0,
0,0,0,0,70,14,
16,0,1,0,0,0,
50,0,0,10,242,32,
16,0,0,0,0,0,
166,138,32,0,1,0,
0,0,3,0,0,0,
70,14,16,0,1,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,8,0,
0,0,2,0,0,0,
0,0,0,0,2,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};

}

namespace RetroArch
{
class MotionInterpolationShadersMotion_interpolationMotion_interpolation_pass3ShaderDef : public ShaderDef
{
public:
	MotionInterpolationShadersMotion_interpolationMotion_interpolation_pass3ShaderDef() : ShaderDef{}
	{
		Name = "motion_interpolation_pass3";
		VertexByteCode = RetroArchMotionInterpolationShadersMotion_interpolationMotion_interpolation_pass3ShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchMotionInterpolationShadersMotion_interpolationMotion_interpolation_pass3ShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchMotionInterpolationShadersMotion_interpolationMotion_interpolation_pass3ShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchMotionInterpolationShadersMotion_interpolationMotion_interpolation_pass3ShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("MOTION_SCALE_FACTOR", -1, 52, 4, 100.000000f, 1000.000000f, 300.000000f));
		Params.push_back(ShaderParam("MOTION_MIX_FACTOR", -1, 56, 4, 0.000000f, 1.000000f, 0.500000f));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f));
		Samplers.push_back(ShaderSampler("Source", 2));
		Samplers.push_back(ShaderSampler("Pass0", 4));
		Samplers.push_back(ShaderSampler("OriginalHistory1", 3));
		Samplers.push_back(ShaderSampler("Original", 5));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
