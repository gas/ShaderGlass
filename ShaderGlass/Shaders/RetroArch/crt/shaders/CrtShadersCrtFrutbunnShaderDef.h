/*
ShaderGlass shader crt-shaders\crt-frutbunn imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/crt/shaders/crt-frutbunn.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.


Adapted for RetroArch from frutbunn's "Another CRT shader" from shadertoy:
https://www.shadertoy.com/view/XdyGzR

//#define CURVATURE 1. //moved to parameter
//#define SCANLINES 1. //moved to parameter
//#define CURVED_SCANLINES 1. //moved to parameter
//#define LIGHT 1. //moved to parameter
//const float light = 9.; //moved to parameter
//const float blur = 1.0; //moved to parameter
// Sigma 1. Size 3
// Curvature/light
// CRT color blur
// Light
// Scanlines
//    if (params.SourceSize.y<360.) showScanlines = 0.;
//    color *= 1. - ( .01 + ceil(mod( (st.x+.5)*params.SourceSize.x, 3.) ) * (.995-1.01) )*showScanlines;
// Border mask

*/

#pragma once

namespace RetroArchCrtShadersCrtFrutbunnShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,238,177,
107,162,79,188,163,69,
73,198,164,8,37,53,
236,186,1,0,0,0,
140,13,0,0,5,0,
0,0,52,0,0,0,
244,3,0,0,40,4,
0,0,92,4,0,0,
240,12,0,0,82,68,
69,70,184,3,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
143,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,10,0,0,0,
208,0,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,96,2,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,124,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,160,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
124,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
180,2,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,124,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,198,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,224,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,4,3,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
28,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
64,3,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,28,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,81,3,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,28,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,105,3,0,0,
64,0,0,0,4,0,
0,0,2,0,0,0,
28,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
118,3,0,0,68,0,
0,0,4,0,0,0,
2,0,0,0,28,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,131,3,
0,0,72,0,0,0,
4,0,0,0,2,0,
0,0,28,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,114,2,0,0,
112,97,114,97,109,115,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,112,97,114,97,
109,115,95,79,117,116,
112,117,116,83,105,122,
101,0,112,97,114,97,
109,115,95,70,114,97,
109,101,67,111,117,110,
116,0,100,119,111,114,
100,0,171,171,0,0,
19,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
216,2,0,0,112,97,
114,97,109,115,95,67,
85,82,86,65,84,85,
82,69,0,102,108,111,
97,116,0,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
21,3,0,0,112,97,
114,97,109,115,95,83,
67,65,78,76,73,78,
69,83,0,112,97,114,
97,109,115,95,67,85,
82,86,69,68,95,83,
67,65,78,76,73,78,
69,83,0,112,97,114,
97,109,115,95,76,73,
71,72,84,0,112,97,
114,97,109,115,95,108,
105,103,104,116,0,112,
97,114,97,109,115,95,
98,108,117,114,0,77,
105,99,114,111,115,111,
102,116,32,40,82,41,
32,72,76,83,76,32,
83,104,97,100,101,114,
32,67,111,109,112,105,
108,101,114,32,49,48,
46,49,0,171,73,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,140,8,
0,0,80,0,0,0,
35,2,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,5,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,8,0,0,0,
0,0,0,9,50,0,
16,0,0,0,0,0,
22,133,32,0,1,0,
0,0,0,0,0,0,
22,133,32,0,1,0,
0,0,0,0,0,0,
14,0,0,7,66,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,14,0,
0,8,66,0,16,0,
0,0,0,0,42,128,
32,0,1,0,0,0,
4,0,0,0,42,0,
16,0,0,0,0,0,
14,0,0,7,50,0,
16,0,0,0,0,0,
166,10,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,0,0,
0,10,194,0,16,0,
0,0,0,0,6,20,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,191,0,0,
0,191,56,0,0,7,
50,0,16,0,1,0,
0,0,230,10,16,0,
0,0,0,0,230,10,
16,0,0,0,0,0,
56,0,0,10,50,0,
16,0,1,0,0,0,
70,0,16,0,1,0,
0,0,2,64,0,0,
0,0,128,62,0,0,
128,62,0,0,0,0,
0,0,0,0,15,0,
0,7,18,0,16,0,
1,0,0,0,70,0,
16,0,1,0,0,0,
70,0,16,0,1,0,
0,0,75,0,0,5,
18,0,16,0,1,0,
0,0,10,0,16,0,
1,0,0,0,56,0,
0,10,98,0,16,0,
1,0,0,0,166,11,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,41,92,111,63,
41,92,111,63,0,0,
0,0,50,0,0,9,
98,0,16,0,1,0,
0,0,166,11,16,0,
0,0,0,0,6,0,
16,0,1,0,0,0,
86,6,16,0,1,0,
0,0,56,0,0,8,
18,0,16,0,1,0,
0,0,10,0,16,0,
1,0,0,0,26,128,
32,0,1,0,0,0,
4,0,0,0,51,0,
0,7,18,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
128,63,0,0,0,8,
18,0,16,0,1,0,
0,0,10,0,16,128,
65,0,0,0,1,0,
0,0,1,64,0,0,
0,0,128,63,49,0,
0,11,114,0,16,0,
2,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,63,0,0,
0,63,0,0,0,0,
214,134,32,0,1,0,
0,0,3,0,0,0,
55,0,0,9,98,0,
16,0,1,0,0,0,
6,0,16,0,2,0,
0,0,86,6,16,0,
1,0,0,0,166,11,
16,0,0,0,0,0,
55,0,0,9,66,0,
16,0,0,0,0,0,
26,0,16,0,2,0,
0,0,42,0,16,0,
1,0,0,0,58,0,
16,0,0,0,0,0,
56,0,0,8,66,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,26,128,32,0,
1,0,0,0,0,0,
0,0,0,0,0,10,
194,0,16,0,3,0,
0,0,166,6,16,0,
1,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,63,0,0,0,63,
52,0,0,9,130,0,
16,0,0,0,0,0,
42,0,16,128,129,0,
0,0,1,0,0,0,
26,0,16,128,129,0,
0,0,1,0,0,0,
50,0,0,10,130,0,
16,0,0,0,0,0,
58,0,16,128,65,0,
0,0,0,0,0,0,
1,64,0,0,0,0,
0,64,1,64,0,0,
0,0,128,63,52,0,
0,7,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,0,56,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,0,0,72,67,
51,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,0,0,
0,8,50,0,16,0,
3,0,0,0,22,5,
16,128,65,0,0,0,
0,0,0,0,182,15,
16,0,3,0,0,0,
0,0,0,7,50,0,
16,0,4,0,0,0,
70,0,16,0,0,0,
0,0,230,10,16,0,
3,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,226,0,
16,0,1,0,0,0,
134,0,16,0,3,0,
0,0,54,121,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
56,0,0,10,226,0,
16,0,1,0,0,0,
86,14,16,0,1,0,
0,0,2,64,0,0,
0,0,0,0,160,141,
252,61,160,141,252,61,
160,141,252,61,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,5,0,0,0,
70,0,16,0,3,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
50,0,0,12,226,0,
16,0,1,0,0,0,
6,9,16,0,5,0,
0,0,2,64,0,0,
0,0,0,0,63,110,
159,61,63,110,159,61,
63,110,159,61,86,14,
16,0,1,0,0,0,
54,0,0,5,194,0,
16,0,4,0,0,0,
6,12,16,0,3,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
5,0,0,0,38,10,
16,0,4,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,6,0,0,0,
54,15,16,0,4,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
50,0,0,12,226,0,
16,0,1,0,0,0,
6,9,16,0,5,0,
0,0,2,64,0,0,
0,0,0,0,63,110,
159,61,63,110,159,61,
63,110,159,61,86,14,
16,0,1,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,5,0,
0,0,118,15,16,0,
3,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
7,0,0,0,182,15,
16,0,3,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,50,0,
0,12,226,0,16,0,
1,0,0,0,6,9,
16,0,5,0,0,0,
2,64,0,0,0,0,
0,0,160,141,252,61,
160,141,252,61,160,141,
252,61,86,14,16,0,
1,0,0,0,50,0,
0,12,226,0,16,0,
1,0,0,0,6,9,
16,0,7,0,0,0,
2,64,0,0,0,0,
0,0,200,8,72,62,
200,8,72,62,200,8,
72,62,86,14,16,0,
1,0,0,0,50,0,
0,12,226,0,16,0,
1,0,0,0,6,9,
16,0,6,0,0,0,
2,64,0,0,0,0,
0,0,160,141,252,61,
160,141,252,61,160,141,
252,61,86,14,16,0,
1,0,0,0,54,0,
0,5,18,0,16,0,
3,0,0,0,26,0,
16,0,4,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,4,0,
0,0,22,5,16,0,
4,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
5,0,0,0,70,0,
16,0,3,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,3,0,0,0,
134,0,16,0,3,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
50,0,0,12,226,0,
16,0,1,0,0,0,
6,9,16,0,5,0,
0,0,2,64,0,0,
0,0,0,0,63,110,
159,61,63,110,159,61,
63,110,159,61,86,14,
16,0,1,0,0,0,
50,0,0,12,226,0,
16,0,1,0,0,0,
6,9,16,0,3,0,
0,0,2,64,0,0,
0,0,0,0,160,141,
252,61,160,141,252,61,
160,141,252,61,86,14,
16,0,1,0,0,0,
50,0,0,12,226,0,
16,0,1,0,0,0,
6,9,16,0,4,0,
0,0,2,64,0,0,
0,0,0,0,63,110,
159,61,63,110,159,61,
63,110,159,61,86,14,
16,0,1,0,0,0,
56,0,0,7,114,0,
16,0,3,0,0,0,
6,0,16,0,1,0,
0,0,150,7,16,0,
1,0,0,0,49,0,
0,8,18,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,63,
10,128,32,0,1,0,
0,0,4,0,0,0,
55,0,0,9,114,0,
16,0,1,0,0,0,
6,0,16,0,0,0,
0,0,70,2,16,0,
3,0,0,0,150,7,
16,0,1,0,0,0,
50,0,0,11,18,0,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,2,0,0,0,
58,128,32,0,1,0,
0,0,0,0,0,0,
1,64,0,0,0,0,
32,64,56,0,0,7,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
77,0,0,6,0,208,
0,0,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
56,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,62,50,0,
0,10,114,0,16,0,
0,0,0,0,70,2,
16,128,65,0,0,0,
1,0,0,0,6,0,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,55,0,0,9,
114,0,16,0,0,0,
0,0,166,10,16,0,
2,0,0,0,70,2,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,56,0,0,7,
114,0,16,0,1,0,
0,0,246,15,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
55,0,0,9,114,32,
16,0,0,0,0,0,
6,0,16,0,2,0,
0,0,70,2,16,0,
1,0,0,0,70,2,
16,0,0,0,0,0,
54,0,0,5,130,32,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,62,0,0,1,
83,84,65,84,148,0,
0,0,59,0,0,0,
8,0,0,0,0,0,
0,0,2,0,0,0,
41,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,9,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,5,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};

}

namespace RetroArch
{
class CrtShadersCrtFrutbunnShaderDef : public ShaderDef
{
public:
	CrtShadersCrtFrutbunnShaderDef() : ShaderDef{}
	{
		Name = "crt-frutbunn";
		VertexByteCode = RetroArchCrtShadersCrtFrutbunnShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersCrtFrutbunnShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchCrtShadersCrtFrutbunnShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersCrtFrutbunnShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("CURVATURE", -1, 52, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "Curvature Toggle"));
		Params.push_back(ShaderParam("SCANLINES", -1, 56, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "Scanlines Toggle"));
		Params.push_back(ShaderParam("CURVED_SCANLINES", -1, 60, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "Scanline Curve Toggle"));
		Params.push_back(ShaderParam("LIGHT", -1, 64, 4, 0.000000f, 1.000000f, 1.000000f, 1.000000f, "Vignetting Toggle"));
		Params.push_back(ShaderParam("light", -1, 68, 4, 0.000000f, 20.000000f, 9.000000f, 1.000000f, "Vignetting Strength"));
		Params.push_back(ShaderParam("blur", -1, 72, 4, 0.000000f, 8.000000f, 1.000000f, 0.050000f, "Blur Strength"));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
