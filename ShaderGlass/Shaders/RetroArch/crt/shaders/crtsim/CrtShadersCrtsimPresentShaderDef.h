/*
ShaderGlass shader crt-shaders-crtsim\present imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/crt/shaders/crtsim/present.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

//////////////////////////////////////////////////////////////////////////
//
// CC0 1.0 Universal (CC0 1.0)
// Public Domain Dedication
//
// To the extent possible under law, J. Kyle Pittman has waived all
// copyright and related or neighboring rights to this implementation
// of CRT simulation. This work is published from the United States.
//
// For more information, please visit
// https://creativecommons.org/publicdomain/zero/1.0/
//
//////////////////////////////////////////////////////////////////////////
// Blends the original full-resolution scene with the blurred output of post shaders to create bloom.
//#pragma parameter mixfactor "Bloom Mix" 0.5 0.0 1.0 0.05
//	float mixfactor;
//	float CRTMask_Offset_X;
//	float CRTMask_Offset_Y;
//	float Tuning_Overscan;
//	float Tuning_Dimming;
//	float Tuning_ReflScalar;
//	float Tuning_Barrel;
//	float Tuning_Diff_Brightness;
//	float Tuning_Spec_Brightness;
//	float Tuning_Spec_Power;
//	float Tuning_Fres_Brightness;
//	float Tuning_LightPos_R;
//	float Tuning_LightPos_G;
//	float Tuning_LightPos_B;
//#pragma parameter CRTMask_Offset_X "CRT Mask Offset X" 0.0 0.0 1.0 0.05
//#pragma parameter CRTMask_Offset_Y "CRT Mask Offset Y" 0.0 0.0 1.0 0.05
//#pragma parameter Tuning_Overscan "Overscan" 0.95 0.0 1.0 0.05
//#pragma parameter Tuning_Dimming "Dimming" 0.0 0.0 1.0 0.05
//#pragma parameter Tuning_ReflScalar "Reflection" 0.0 0.0 1.0 0.05
//#pragma parameter Tuning_Barrel "Barrel Distortion" 0.25 0.0 1.0 0.05
//#pragma parameter Tuning_Diff_Brightness "Diff Brightness" 0.5 0.0 1.0 0.05
//#pragma parameter Tuning_Spec_Brightness "Spec Brightness" 0.5 0.0 1.0 0.05
//#pragma parameter Tuning_Fres_Brightness "Fres Brightness" 0.5 0.0 1.0 0.05
//#pragma parameter Tuning_LightPos_R "Light Position R" 1.0 0.0 1.0 0.05
//#pragma parameter Tuning_LightPos_G "Light Position G" 1.0 0.0 1.0 0.05
//#pragma parameter Tuning_LightPos_B "Light Position B" 1.0 0.0 1.0 0.05
//	ScaledUV *= UVScalar;
//	ScaledUV += UVOffset;
  // commenting this to move to present shader
// Apply overscan after scanline sampling is done.
half2 overscanuv = (ScaledUV * params.Tuning_Overscan) - ((params.Tuning_Overscan - 1.0) * 0.5);

// Curve UVs for composite texture inwards to garble things a bit.
overscanuv = overscanuv - half2(0.5,0.5);
half rsq = (overscanuv.x*overscanuv.x) + (overscanuv.y*overscanuv.y);
overscanuv = overscanuv + (overscanuv * (params.Tuning_Barrel * rsq)) + half2(0.5,0.5);

// Apply power to brightness while preserving color
// TODO: Clamp ActLuma to very small number to prevent (zero) division by zero when a component is zero?
// This method preserves color better.
// Apply overscan after scanline sampling is done.
// Curve UVs for composite texture inwards to garble things a bit.
// Mask effect cancels curvature due to righteous moire

*/

#pragma once

namespace RetroArchCrtShadersCrtsimPresentShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,89,130,
105,133,107,190,75,181,
246,144,115,204,147,189,
141,195,1,0,0,0,
40,6,0,0,5,0,
0,0,52,0,0,0,
216,3,0,0,36,4,
0,0,124,4,0,0,
140,5,0,0,82,68,
69,70,156,3,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
114,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,10,0,
0,0,120,0,0,0,
144,0,0,0,0,0,
0,0,0,0,0,0,
8,2,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,28,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,64,2,
0,0,64,0,0,0,
16,0,0,0,0,0,
0,0,92,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,128,2,0,0,
80,0,0,0,16,0,
0,0,0,0,0,0,
92,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
148,2,0,0,96,0,
0,0,16,0,0,0,
0,0,0,0,92,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,166,2,
0,0,112,0,0,0,
4,0,0,0,0,0,
0,0,192,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,228,2,0,0,
116,0,0,0,4,0,
0,0,0,0,0,0,
252,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
32,3,0,0,120,0,
0,0,4,0,0,0,
0,0,0,0,252,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,51,3,
0,0,124,0,0,0,
4,0,0,0,0,0,
0,0,252,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,74,3,0,0,
128,0,0,0,4,0,
0,0,0,0,0,0,
252,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
95,3,0,0,132,0,
0,0,4,0,0,0,
0,0,0,0,252,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,19,2,0,0,
103,108,111,98,97,108,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
82,2,0,0,103,108,
111,98,97,108,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
103,108,111,98,97,108,
95,79,117,116,112,117,
116,83,105,122,101,0,
103,108,111,98,97,108,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,184,2,
0,0,103,108,111,98,
97,108,95,66,108,111,
111,109,80,111,119,101,
114,0,102,108,111,97,
116,0,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,246,2,
0,0,103,108,111,98,
97,108,95,66,108,111,
111,109,83,99,97,108,
97,114,0,103,108,111,
98,97,108,95,84,117,
110,105,110,103,95,79,
118,101,114,115,99,97,
110,0,103,108,111,98,
97,108,95,84,117,110,
105,110,103,95,66,97,
114,114,101,108,0,103,
108,111,98,97,108,95,
109,97,115,107,95,116,
111,103,103,108,101,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,171,171,
73,83,71,78,68,0,
0,0,2,0,0,0,
8,0,0,0,56,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,15,0,0,56,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,80,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,12,
0,0,65,0,0,0,
0,0,0,0,1,0,
0,0,3,0,0,0,
1,0,0,0,15,0,
0,0,84,69,88,67,
79,79,82,68,0,83,
86,95,80,111,115,105,
116,105,111,110,0,171,
171,171,83,72,69,88,
8,1,0,0,80,0,
1,0,66,0,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
0,0,0,0,4,0,
0,0,95,0,0,3,
242,16,16,0,0,0,
0,0,95,0,0,3,
50,16,16,0,1,0,
0,0,101,0,0,3,
50,32,16,0,0,0,
0,0,103,0,0,4,
242,32,16,0,1,0,
0,0,1,0,0,0,
104,0,0,2,1,0,
0,0,54,0,0,5,
50,32,16,0,0,0,
0,0,70,16,16,0,
1,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,1,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
6,0,0,0,1,0,
0,0,0,0,0,0,
4,0,0,0,4,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,27,47,
116,164,131,60,85,144,
5,35,143,221,50,211,
232,171,1,0,0,0,
100,12,0,0,5,0,
0,0,52,0,0,0,
56,6,0,0,108,6,
0,0,160,6,0,0,
200,11,0,0,82,68,
69,70,252,5,0,0,
2,0,0,0,164,1,
0,0,8,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
210,5,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
60,1,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,76,1,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
1,0,0,0,93,1,
0,0,3,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
4,0,0,0,1,0,
0,0,1,0,0,0,
120,1,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,2,0,0,0,
1,0,0,0,13,0,
0,0,127,1,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,3,0,
0,0,1,0,0,0,
13,0,0,0,135,1,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
4,0,0,0,1,0,
0,0,13,0,0,0,
153,1,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,157,1,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,95,83,
111,117,114,99,101,95,
115,97,109,112,108,101,
114,0,95,67,82,84,
80,65,83,83,95,115,
97,109,112,108,101,114,
0,95,115,104,97,100,
111,119,77,97,115,107,
83,97,109,112,108,101,
114,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,67,
82,84,80,65,83,83,
0,115,104,97,100,111,
119,77,97,115,107,83,
97,109,112,108,101,114,
0,85,66,79,0,80,
117,115,104,0,171,171,
153,1,0,0,10,0,
0,0,212,1,0,0,
144,0,0,0,0,0,
0,0,0,0,0,0,
157,1,0,0,4,0,
0,0,208,4,0,0,
16,0,0,0,0,0,
0,0,0,0,0,0,
100,3,0,0,0,0,
0,0,64,0,0,0,
0,0,0,0,120,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,156,3,
0,0,64,0,0,0,
16,0,0,0,2,0,
0,0,184,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,220,3,0,0,
80,0,0,0,16,0,
0,0,0,0,0,0,
184,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
240,3,0,0,96,0,
0,0,16,0,0,0,
0,0,0,0,184,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,2,4,
0,0,112,0,0,0,
4,0,0,0,0,0,
0,0,28,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,64,4,0,0,
116,0,0,0,4,0,
0,0,2,0,0,0,
88,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
124,4,0,0,120,0,
0,0,4,0,0,0,
2,0,0,0,88,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,143,4,
0,0,124,0,0,0,
4,0,0,0,2,0,
0,0,88,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,166,4,0,0,
128,0,0,0,4,0,
0,0,2,0,0,0,
88,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
187,4,0,0,132,0,
0,0,4,0,0,0,
2,0,0,0,88,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,111,3,0,0,
103,108,111,98,97,108,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
174,3,0,0,103,108,
111,98,97,108,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
103,108,111,98,97,108,
95,79,117,116,112,117,
116,83,105,122,101,0,
103,108,111,98,97,108,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,20,4,
0,0,103,108,111,98,
97,108,95,66,108,111,
111,109,80,111,119,101,
114,0,102,108,111,97,
116,0,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,82,4,
0,0,103,108,111,98,
97,108,95,66,108,111,
111,109,83,99,97,108,
97,114,0,103,108,111,
98,97,108,95,84,117,
110,105,110,103,95,79,
118,101,114,115,99,97,
110,0,103,108,111,98,
97,108,95,84,117,110,
105,110,103,95,66,97,
114,114,101,108,0,103,
108,111,98,97,108,95,
109,97,115,107,95,116,
111,103,103,108,101,0,
171,171,112,5,0,0,
0,0,0,0,4,0,
0,0,2,0,0,0,
88,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
133,5,0,0,4,0,
0,0,4,0,0,0,
2,0,0,0,88,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,153,5,
0,0,8,0,0,0,
4,0,0,0,2,0,
0,0,88,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,183,5,0,0,
12,0,0,0,4,0,
0,0,2,0,0,0,
88,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,67,82,84,77,97,
115,107,95,83,99,97,
108,101,0,112,97,114,
97,109,115,95,84,117,
110,105,110,103,95,83,
97,116,117,114,0,112,
97,114,97,109,115,95,
84,117,110,105,110,103,
95,77,97,115,107,95,
66,114,105,103,104,116,
110,101,115,115,0,112,
97,114,97,109,115,95,
84,117,110,105,110,103,
95,77,97,115,107,95,
79,112,97,99,105,116,
121,0,77,105,99,114,
111,115,111,102,116,32,
40,82,41,32,72,76,
83,76,32,83,104,97,
100,101,114,32,67,111,
109,112,105,108,101,114,
32,49,48,46,49,0,
171,171,73,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,32,5,0,0,
80,0,0,0,72,1,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,0,0,0,0,
9,0,0,0,89,0,
0,4,70,142,32,0,
1,0,0,0,1,0,
0,0,90,0,0,3,
0,96,16,0,2,0,
0,0,90,0,0,3,
0,96,16,0,3,0,
0,0,90,0,0,3,
0,96,16,0,4,0,
0,0,88,24,0,4,
0,112,16,0,2,0,
0,0,85,85,0,0,
88,24,0,4,0,112,
16,0,3,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
4,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
4,0,0,0,0,0,
0,8,18,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,191,
58,128,32,0,0,0,
0,0,7,0,0,0,
56,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,50,0,
0,11,50,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
246,143,32,0,0,0,
0,0,7,0,0,0,
6,0,16,128,65,0,
0,0,0,0,0,0,
0,0,0,10,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,2,64,0,0,
0,0,0,191,0,0,
0,191,0,0,0,0,
0,0,0,0,15,0,
0,7,66,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,56,0,0,8,
66,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,10,128,
32,0,0,0,0,0,
8,0,0,0,50,0,
0,9,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
166,10,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,0,0,
0,10,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,0,0,0,
0,0,49,0,0,8,
66,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,26,128,
32,0,0,0,0,0,
8,0,0,0,55,0,
0,9,50,0,16,0,
0,0,0,0,166,10,
16,0,0,0,0,0,
70,16,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,31,0,
4,3,42,0,16,0,
0,0,0,0,56,0,
0,8,194,0,16,0,
0,0,0,0,6,4,
16,0,0,0,0,0,
6,132,32,0,0,0,
0,0,4,0,0,0,
14,0,0,8,194,0,
16,0,0,0,0,0,
166,14,16,0,0,0,
0,0,6,128,32,0,
1,0,0,0,0,0,
0,0,26,0,0,5,
194,0,16,0,0,0,
0,0,166,14,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,1,0,0,0,
230,10,16,0,0,0,
0,0,70,126,16,0,
4,0,0,0,0,96,
16,0,4,0,0,0,
0,0,0,8,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,166,138,32,0,
1,0,0,0,0,0,
0,0,0,0,0,10,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,2,64,
0,0,0,0,128,191,
0,0,128,191,0,0,
128,191,0,0,0,0,
50,0,0,13,114,0,
16,0,1,0,0,0,
246,143,32,0,1,0,
0,0,0,0,0,0,
70,2,16,0,1,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,63,0,0,128,63,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,2,0,0,0,
70,0,16,0,0,0,
0,0,70,126,16,0,
3,0,0,0,0,96,
16,0,3,0,0,0,
56,0,0,7,114,0,
16,0,3,0,0,0,
70,2,16,0,1,0,
0,0,70,2,16,0,
2,0,0,0,16,0,
0,10,18,0,16,0,
3,0,0,0,2,64,
0,0,135,22,153,62,
162,69,22,63,213,120,
233,61,0,0,0,0,
70,2,16,0,3,0,
0,0,54,0,0,5,
34,0,16,0,3,0,
0,0,1,64,0,0,
0,0,128,63,50,0,
0,10,114,0,16,0,
1,0,0,0,70,2,
16,0,2,0,0,0,
70,2,16,0,1,0,
0,0,6,0,16,128,
65,0,0,0,3,0,
0,0,54,0,0,5,
130,0,16,0,1,0,
0,0,1,64,0,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
1,0,0,0,86,133,
32,0,1,0,0,0,
0,0,0,0,70,14,
16,0,1,0,0,0,
6,4,16,0,3,0,
0,0,18,0,0,1,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,1,0,
0,0,70,0,16,0,
0,0,0,0,70,126,
16,0,3,0,0,0,
0,96,16,0,3,0,
0,0,21,0,0,1,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,16,0,0,10,
18,0,16,0,2,0,
0,0,70,2,16,0,
0,0,0,0,2,64,
0,0,135,22,153,62,
162,69,22,63,213,120,
233,61,0,0,0,0,
14,0,0,7,242,0,
16,0,0,0,0,0,
70,14,16,0,0,0,
0,0,6,0,16,0,
2,0,0,0,47,0,
0,5,18,0,16,0,
2,0,0,0,10,0,
16,0,2,0,0,0,
56,0,0,8,18,0,
16,0,2,0,0,0,
10,0,16,0,2,0,
0,0,26,128,32,0,
0,0,0,0,7,0,
0,0,25,0,0,5,
18,0,16,0,2,0,
0,0,10,0,16,0,
2,0,0,0,56,0,
0,7,242,0,16,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
6,0,16,0,2,0,
0,0,50,0,0,10,
242,32,16,0,0,0,
0,0,70,14,16,0,
0,0,0,0,166,138,
32,0,0,0,0,0,
7,0,0,0,70,14,
16,0,1,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
37,0,0,0,4,0,
0,0,0,0,0,0,
2,0,0,0,26,0,
0,0,0,0,0,0,
0,0,0,0,2,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,2,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};

}

namespace RetroArch
{
class CrtShadersCrtsimPresentShaderDef : public ShaderDef
{
public:
	CrtShadersCrtsimPresentShaderDef() : ShaderDef{}
	{
		Name = "present";
		VertexByteCode = RetroArchCrtShadersCrtsimPresentShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersCrtsimPresentShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchCrtShadersCrtsimPresentShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersCrtsimPresentShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("BloomPower", 0, 116, 4, 0.000000f, 10.000000f, 1.000000f));
		Params.push_back(ShaderParam("BloomScalar", 0, 120, 4, 0.000000f, 1.000000f, 0.100000f));
		Params.push_back(ShaderParam("Tuning_Overscan", 0, 124, 4, 0.000000f, 1.000000f, 0.950000f));
		Params.push_back(ShaderParam("Tuning_Barrel", 0, 128, 4, 0.000000f, 1.000000f, 0.250000f));
		Params.push_back(ShaderParam("mask_toggle", 0, 132, 4, 0.000000f, 1.000000f, 1.000000f));
		Params.push_back(ShaderParam("CRTMask_Scale", -1, 0, 4, 0.000000f, 10.000000f, 1.000000f));
		Params.push_back(ShaderParam("Tuning_Satur", -1, 4, 4, 0.000000f, 1.000000f, 1.000000f));
		Params.push_back(ShaderParam("Tuning_Mask_Brightness", -1, 8, 4, 0.000000f, 1.000000f, 0.500000f));
		Params.push_back(ShaderParam("Tuning_Mask_Opacity", -1, 12, 4, 0.000000f, 1.000000f, 0.300000f));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("SourceSize", 0, 64, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OriginalSize", 0, 80, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OutputSize", 0, 96, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("FrameCount", 0, 112, 4, 0.000000f, 0.000000f, 0.000000f));
		Samplers.push_back(ShaderSampler("shadowMaskSampler", 4));
		Samplers.push_back(ShaderSampler("CRTPASS", 3));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
