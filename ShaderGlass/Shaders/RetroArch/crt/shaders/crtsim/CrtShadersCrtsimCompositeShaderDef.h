/*
ShaderGlass shader crt-shaders-crtsim\composite imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/crt/shaders/crtsim/composite.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

////////////////////////////////////////////////////////////////////////

 CC0 1.0 Universal (CC0 1.0)
 Public Domain Dedication

 To the extent possible under law, J. Kyle Pittman has waived all
 copyright and related or neighboring rights to this implementation
 of CRT simulation. This work is published from the United States.

 For more information, please visit
 https://creativecommons.org/publicdomain/zero/1.0/

////////////////////////////////////////////////////////////////////////
 This is the second step of the CRT simulation process,
 after the ntsc.fx shader has transformed the RGB values with a lookup table.
 This is where we apply effects "inside the screen," including spatial and temporal bleeding,
 an unsharp mask to simulate overshoot/undershoot, NTSC artifacts, and so on.
 Weight for applying an unsharp mask at a distance of 1, 2, or 3 pixels from changes in luma.
 The sign of each weight changes in order to alternately simulate overshooting and undershooting.
 Calculate luma for an RGB value.
 Passthrough vertex shader. Nothing interesting here.
 Note: The "persistence" and "bleed" parameters have some overlap, but they are not redundant.
 "Persistence" affects bleeding AND trails. (Scales the sum of the previous value and its scaled neighbors.)
 "Bleed" only affects bleeding. (Scaling of neighboring previous values.)
 Apply NTSC artifacts based on differences in luma between local pixel and neighbors..
 Step left and right looking for changes in luma that would produce a ring or halo on this pixel due to undershooting/overshooting.
 (Note: It would probably be more accurate to look at changes in luma between pixels at a distance of N and N+1,
 as opposed to 0 and N as done here, but this works pretty well and is a little cheaper.)
 Apply the NTSC artifacts to the unsharp offset as well.
 Take the max here because adding is overkill; bleeding should only brighten up dark areas, not blow out the whole screen.

*/

#pragma once

namespace RetroArchCrtShadersCrtsimCompositeShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,254,58,
215,29,82,99,253,129,
162,226,122,40,51,10,
37,170,1,0,0,0,
184,15,0,0,5,0,
0,0,52,0,0,0,
188,5,0,0,240,5,
0,0,36,6,0,0,
28,15,0,0,82,68,
69,70,128,5,0,0,
1,0,0,0,144,1,
0,0,7,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
86,5,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
28,1,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,51,1,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
1,0,0,0,67,1,
0,0,3,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
4,0,0,0,1,0,
0,0,1,0,0,0,
96,1,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,2,0,0,0,
1,0,0,0,13,0,
0,0,110,1,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,3,0,
0,0,1,0,0,0,
13,0,0,0,117,1,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
4,0,0,0,1,0,
0,0,13,0,0,0,
137,1,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,95,80,97,115,
115,70,101,101,100,98,
97,99,107,48,95,115,
97,109,112,108,101,114,
0,95,83,111,117,114,
99,101,95,115,97,109,
112,108,101,114,0,95,
78,84,83,67,65,114,
116,105,102,97,99,116,
83,97,109,112,108,101,
114,95,115,97,109,112,
108,101,114,0,80,97,
115,115,70,101,101,100,
98,97,99,107,48,0,
83,111,117,114,99,101,
0,78,84,83,67,65,
114,116,105,102,97,99,
116,83,97,109,112,108,
101,114,0,80,117,115,
104,0,171,171,137,1,
0,0,13,0,0,0,
168,1,0,0,96,0,
0,0,0,0,0,0,
0,0,0,0,176,3,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,204,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,240,3,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
204,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
4,4,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,204,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,22,4,
0,0,48,0,0,0,
4,0,0,0,2,0,
0,0,48,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,84,4,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
112,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
148,4,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,112,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,176,4,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,112,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,204,4,0,0,
64,0,0,0,4,0,
0,0,2,0,0,0,
112,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
232,4,0,0,68,0,
0,0,4,0,0,0,
2,0,0,0,112,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,252,4,
0,0,72,0,0,0,
4,0,0,0,2,0,
0,0,112,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,20,5,0,0,
76,0,0,0,4,0,
0,0,2,0,0,0,
112,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
36,5,0,0,80,0,
0,0,4,0,0,0,
2,0,0,0,112,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,61,5,
0,0,84,0,0,0,
4,0,0,0,2,0,
0,0,112,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,194,3,0,0,
112,97,114,97,109,115,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,112,97,114,97,
109,115,95,79,117,116,
112,117,116,83,105,122,
101,0,112,97,114,97,
109,115,95,70,114,97,
109,101,67,111,117,110,
116,0,100,119,111,114,
100,0,171,171,0,0,
19,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
40,4,0,0,112,97,
114,97,109,115,95,84,
117,110,105,110,103,95,
83,104,97,114,112,0,
102,108,111,97,116,0,
171,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,104,4,
0,0,112,97,114,97,
109,115,95,84,117,110,
105,110,103,95,80,101,
114,115,105,115,116,101,
110,99,101,95,82,0,
112,97,114,97,109,115,
95,84,117,110,105,110,
103,95,80,101,114,115,
105,115,116,101,110,99,
101,95,71,0,112,97,
114,97,109,115,95,84,
117,110,105,110,103,95,
80,101,114,115,105,115,
116,101,110,99,101,95,
66,0,112,97,114,97,
109,115,95,84,117,110,
105,110,103,95,66,108,
101,101,100,0,112,97,
114,97,109,115,95,84,
117,110,105,110,103,95,
65,114,116,105,102,97,
99,116,115,0,112,97,
114,97,109,115,95,78,
84,83,67,76,101,114,
112,0,112,97,114,97,
109,115,95,78,84,83,
67,65,114,116,105,102,
97,99,116,83,99,97,
108,101,0,112,97,114,
97,109,115,95,97,110,
105,109,97,116,101,95,
97,114,116,105,102,97,
99,116,115,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,171,171,73,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,240,8,
0,0,80,0,0,0,
60,2,0,0,106,8,
0,1,53,24,0,0,
14,0,0,0,0,0,
128,63,0,0,0,0,
0,0,0,0,0,0,
0,0,153,232,161,190,
0,0,0,0,0,0,
0,0,0,0,0,0,
205,204,204,61,0,0,
0,0,0,0,0,0,
0,0,0,0,89,0,
0,4,70,142,32,0,
1,0,0,0,6,0,
0,0,90,0,0,3,
0,96,16,0,2,0,
0,0,90,0,0,3,
0,96,16,0,3,0,
0,0,90,0,0,3,
0,96,16,0,4,0,
0,0,88,24,0,4,
0,112,16,0,2,0,
0,0,85,85,0,0,
88,24,0,4,0,112,
16,0,3,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
4,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
8,0,0,0,56,0,
0,8,50,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
70,128,32,0,1,0,
0,0,0,0,0,0,
56,0,0,10,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,2,64,0,0,
71,3,128,63,71,3,
128,63,0,0,0,0,
0,0,0,0,14,0,
0,8,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
6,128,32,0,1,0,
0,0,5,0,0,0,
26,0,0,5,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,242,0,16,0,
1,0,0,0,70,0,
16,0,0,0,0,0,
70,126,16,0,4,0,
0,0,0,96,16,0,
4,0,0,0,14,0,
0,11,50,0,16,0,
2,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,128,63,
22,133,32,0,1,0,
0,0,0,0,0,0,
54,0,0,5,66,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
0,0,0,0,0,7,
50,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,38,10,
16,0,2,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,70,126,
16,0,4,0,0,0,
0,96,16,0,4,0,
0,0,49,0,0,8,
18,0,16,0,2,0,
0,0,1,64,0,0,
0,0,0,63,26,128,
32,0,1,0,0,0,
5,0,0,0,86,0,
0,6,130,0,16,0,
2,0,0,0,10,128,
32,0,1,0,0,0,
3,0,0,0,56,0,
0,7,18,0,16,0,
3,0,0,0,58,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
0,63,65,0,0,5,
18,0,16,0,3,0,
0,0,10,0,16,0,
3,0,0,0,50,0,
0,10,130,0,16,0,
2,0,0,0,10,0,
16,128,65,0,0,0,
3,0,0,0,1,64,
0,0,0,0,0,64,
58,0,16,0,2,0,
0,0,55,0,0,10,
18,0,16,0,2,0,
0,0,10,0,16,0,
2,0,0,0,58,0,
16,0,2,0,0,0,
58,128,32,0,1,0,
0,0,4,0,0,0,
0,0,0,8,18,0,
16,0,2,0,0,0,
10,0,16,128,65,0,
0,0,2,0,0,0,
1,64,0,0,0,0,
128,63,0,0,0,8,
242,0,16,0,0,0,
0,0,70,14,16,128,
65,0,0,0,1,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,9,242,0,16,0,
0,0,0,0,6,0,
16,0,2,0,0,0,
70,14,16,0,0,0,
0,0,70,14,16,0,
1,0,0,0,0,0,
0,8,50,0,16,0,
1,0,0,0,150,5,
16,128,65,0,0,0,
2,0,0,0,70,16,
16,0,0,0,0,0,
0,0,0,7,194,0,
16,0,1,0,0,0,
86,9,16,0,2,0,
0,0,6,20,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,2,0,0,0,
70,0,16,0,1,0,
0,0,70,126,16,0,
3,0,0,0,0,96,
16,0,3,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,3,0,
0,0,70,16,16,0,
0,0,0,0,70,126,
16,0,3,0,0,0,
0,96,16,0,3,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,242,0,16,0,
4,0,0,0,230,10,
16,0,1,0,0,0,
70,126,16,0,3,0,
0,0,0,96,16,0,
3,0,0,0,56,0,
0,8,242,0,16,0,
5,0,0,0,70,14,
16,0,0,0,0,0,
166,138,32,0,1,0,
0,0,4,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,6,0,
0,0,70,0,16,0,
1,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,242,0,16,0,
7,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,1,0,0,0,
230,10,16,0,1,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
0,0,0,8,242,0,
16,0,2,0,0,0,
70,14,16,0,2,0,
0,0,70,14,16,128,
65,0,0,0,3,0,
0,0,0,0,0,8,
242,0,16,0,4,0,
0,0,70,14,16,128,
65,0,0,0,3,0,
0,0,70,14,16,0,
4,0,0,0,0,0,
0,7,242,0,16,0,
2,0,0,0,70,14,
16,0,2,0,0,0,
70,14,16,0,4,0,
0,0,50,32,0,9,
242,0,16,0,2,0,
0,0,70,14,16,0,
2,0,0,0,70,14,
16,0,5,0,0,0,
70,14,16,0,3,0,
0,0,16,0,0,10,
18,0,16,0,3,0,
0,0,70,2,16,0,
2,0,0,0,2,64,
0,0,135,22,153,62,
162,69,22,63,213,120,
233,61,0,0,0,0,
54,0,0,8,98,0,
16,0,3,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,48,0,0,1,
33,0,0,7,130,0,
16,0,3,0,0,0,
42,0,16,0,3,0,
0,0,1,64,0,0,
3,0,0,0,3,0,
4,3,58,0,16,0,
3,0,0,0,30,0,
0,7,130,0,16,0,
3,0,0,0,42,0,
16,0,3,0,0,0,
1,64,0,0,1,0,
0,0,43,0,0,5,
18,0,16,0,4,0,
0,0,58,0,16,0,
3,0,0,0,50,0,
0,13,98,0,16,0,
4,0,0,0,6,0,
16,128,65,0,0,0,
4,0,0,0,2,64,
0,0,0,0,0,0,
0,0,128,59,0,0,
0,0,0,0,0,0,
6,17,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,226,0,16,0,
4,0,0,0,150,5,
16,0,4,0,0,0,
54,121,16,0,3,0,
0,0,0,96,16,0,
3,0,0,0,50,0,
0,12,50,0,16,0,
5,0,0,0,6,0,
16,0,4,0,0,0,
2,64,0,0,0,0,
128,59,0,0,0,0,
0,0,0,0,0,0,
0,0,70,16,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,5,0,0,0,
70,0,16,0,5,0,
0,0,70,126,16,0,
3,0,0,0,0,96,
16,0,3,0,0,0,
16,0,0,10,18,0,
16,0,4,0,0,0,
150,7,16,0,4,0,
0,0,2,64,0,0,
135,22,153,62,162,69,
22,63,213,120,233,61,
0,0,0,0,16,0,
0,10,34,0,16,0,
4,0,0,0,70,2,
16,0,5,0,0,0,
2,64,0,0,135,22,
153,62,162,69,22,63,
213,120,233,61,0,0,
0,0,0,0,0,8,
50,0,16,0,4,0,
0,0,6,0,16,0,
3,0,0,0,70,0,
16,128,65,0,0,0,
4,0,0,0,0,0,
0,7,18,0,16,0,
4,0,0,0,26,0,
16,0,4,0,0,0,
10,0,16,0,4,0,
0,0,50,0,0,10,
34,0,16,0,3,0,
0,0,10,0,16,0,
4,0,0,0,10,144,
144,0,42,0,16,0,
3,0,0,0,26,0,
16,0,3,0,0,0,
54,0,0,5,98,0,
16,0,3,0,0,0,
86,7,16,0,3,0,
0,0,22,0,0,1,
0,0,0,10,242,0,
16,0,0,0,0,0,
70,14,16,0,0,0,
0,0,2,64,0,0,
0,0,128,191,0,0,
128,191,0,0,128,191,
0,0,128,191,50,0,
0,13,242,0,16,0,
0,0,0,0,166,138,
32,0,1,0,0,0,
4,0,0,0,70,14,
16,0,0,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,0,0,
128,63,56,0,0,8,
18,0,16,0,3,0,
0,0,26,0,16,0,
3,0,0,0,26,128,
32,0,1,0,0,0,
3,0,0,0,50,32,
0,9,242,0,16,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
6,0,16,0,3,0,
0,0,70,14,16,0,
2,0,0,0,50,0,
0,10,18,0,16,0,
2,0,0,0,26,128,
32,0,1,0,0,0,
4,0,0,0,1,64,
0,0,0,0,0,64,
1,64,0,0,0,0,
128,63,14,0,0,7,
130,0,16,0,2,0,
0,0,1,64,0,0,
0,0,32,65,10,0,
16,0,2,0,0,0,
56,0,0,8,50,0,
16,0,2,0,0,0,
246,15,16,0,2,0,
0,0,230,138,32,0,
1,0,0,0,3,0,
0,0,56,0,0,8,
66,0,16,0,2,0,
0,0,58,0,16,0,
2,0,0,0,10,128,
32,0,1,0,0,0,
4,0,0,0,0,0,
0,7,242,0,16,0,
1,0,0,0,70,14,
16,0,1,0,0,0,
70,14,16,0,6,0,
0,0,50,0,0,10,
242,0,16,0,1,0,
0,0,70,14,16,0,
1,0,0,0,86,133,
32,0,1,0,0,0,
4,0,0,0,70,14,
16,0,7,0,0,0,
56,0,0,7,242,0,
16,0,1,0,0,0,
70,14,16,0,1,0,
0,0,70,14,16,0,
2,0,0,0,52,0,
0,7,242,0,16,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
70,14,16,0,1,0,
0,0,51,0,0,10,
242,32,16,0,0,0,
0,0,70,14,16,0,
0,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,128,63,
62,0,0,1,83,84,
65,84,148,0,0,0,
63,0,0,0,8,0,
0,0,3,0,0,0,
2,0,0,0,41,0,
0,0,2,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,10,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};

}

namespace RetroArch
{
class CrtShadersCrtsimCompositeShaderDef : public ShaderDef
{
public:
	CrtShadersCrtsimCompositeShaderDef() : ShaderDef{}
	{
		Name = "composite";
		VertexByteCode = RetroArchCrtShadersCrtsimCompositeShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersCrtsimCompositeShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchCrtShadersCrtsimCompositeShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersCrtsimCompositeShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("Tuning_Sharp", -1, 52, 4, 0.000000f, 1.000000f, 0.200000f));
		Params.push_back(ShaderParam("Tuning_Persistence_R", -1, 56, 4, 0.000000f, 1.000000f, 0.065000f));
		Params.push_back(ShaderParam("Tuning_Persistence_G", -1, 60, 4, 0.000000f, 1.000000f, 0.050000f));
		Params.push_back(ShaderParam("Tuning_Persistence_B", -1, 64, 4, 0.000000f, 1.000000f, 0.050000f));
		Params.push_back(ShaderParam("Tuning_Bleed", -1, 68, 4, 0.000000f, 1.000000f, 0.500000f));
		Params.push_back(ShaderParam("Tuning_Artifacts", -1, 72, 4, 0.000000f, 1.000000f, 0.500000f));
		Params.push_back(ShaderParam("NTSCLerp", -1, 76, 4, 0.000000f, 1.000000f, 1.000000f));
		Params.push_back(ShaderParam("NTSCArtifactScale", -1, 80, 4, 0.000000f, 1000.000000f, 255.000000f));
		Params.push_back(ShaderParam("animate_artifacts", -1, 84, 4, 0.000000f, 1.000000f, 1.000000f));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f));
		Samplers.push_back(ShaderSampler("NTSCArtifactSampler", 4));
		Samplers.push_back(ShaderSampler("Source", 3));
		Samplers.push_back(ShaderSampler("PassFeedback0", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
