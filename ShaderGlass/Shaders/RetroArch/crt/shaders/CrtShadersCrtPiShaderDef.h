/*
ShaderGlass shader crt-shaders\crt-pi imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/crt/shaders/crt-pi.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

 MASK_TYPE: 0 = none, 1 = green/magenta, 2 = trinitron(ish) 
//#define FAKE_GAMMA
//#define GAMMA
//#define SHARPER

crt-pi - A Raspberry Pi friendly CRT shader.
Copyright (C) 2015-2016 davej
This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.

Notes:
This shader is designed to work well on Raspberry Pi GPUs (i.e. 1080P @ 60Hz on
a game with a 4:3 aspect ratio).
It pushes the Pi's GPU hard and enabling some features will slow it down so that
it is no longer able to match 1080P @ 60Hz.
You will need to overclock your Pi to the fastest setting in raspi-config to get
the best results from this shader: 'Pi2' for Pi2 and 'Turbo' for original Pi and
Pi Zero.
Note: Pi2s are slower at running the shader than other Pis, this seems to be
down to Pi2s lower maximum memory speed.
Pi2s don't quite manage 1080P @ 60Hz - they drop about 1 in 1000 frames.
You probably won't notice this, but if you do, try enabling FAKE_GAMMA.
SCANLINES enables scanlines.
You'll almost certainly want to use it with MULTISAMPLE to reduce moire effects.
SCANLINE_WEIGHT defines how wide scanlines are (it is an inverse value so a
higher number = thinner lines).
SCANLINE_GAP_BRIGHTNESS defines how dark the gaps between the scan lines are.
Darker gaps between scan lines make moire effects more likely.
GAMMA enables gamma correction using the values in INPUT_GAMMA and OUTPUT_GAMMA.
FAKE_GAMMA causes it to ignore the values in INPUT_GAMMA and OUTPUT_GAMMA and
approximate gamma correction in a way which is faster than true gamma whilst
still looking better than having none.
You must have GAMMA defined to enable FAKE_GAMMA.
CURVATURE distorts the screen by CURVATURE_X and CURVATURE_Y.
Curvature slows things down a lot.
By default the shader uses linear blending horizontally. If you find this too
blury, enable SHARPER.
BLOOM_FACTOR controls the increase in width for bright scanlines.
MASK_TYPE defines what, if any, shadow mask to use. MASK_BRIGHTNESS defines how
much the mask type darkens the screen.

// Barrel distortion shrinks the display area a bit, this will allow us to counteract that.
//  coord *= screenScale; // not necessary in slang
//      coord /= screenScale; // not necessary in slang
 Apply scanlines 
#endif /* SCANLINES 

*/

#pragma once

namespace RetroArchCrtShadersCrtPiShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,58,68,
223,24,116,58,143,35,
202,24,110,31,227,199,
84,34,1,0,0,0,
208,4,0,0,5,0,
0,0,52,0,0,0,
28,2,0,0,104,2,
0,0,216,2,0,0,
52,4,0,0,82,68,
69,70,224,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
182,1,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,4,0,
0,0,120,0,0,0,
112,0,0,0,0,0,
0,0,0,0,0,0,
24,1,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,44,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,80,1,
0,0,64,0,0,0,
16,0,0,0,2,0,
0,0,108,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,144,1,0,0,
80,0,0,0,16,0,
0,0,0,0,0,0,
108,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
164,1,0,0,96,0,
0,0,16,0,0,0,
2,0,0,0,108,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,35,1,0,0,
103,108,111,98,97,108,
95,79,117,116,112,117,
116,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
98,1,0,0,103,108,
111,98,97,108,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
103,108,111,98,97,108,
95,83,111,117,114,99,
101,83,105,122,101,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,171,171,
73,83,71,78,68,0,
0,0,2,0,0,0,
8,0,0,0,56,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,15,0,0,56,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,104,0,0,0,
3,0,0,0,8,0,
0,0,80,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,12,
0,0,80,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,4,11,
0,0,89,0,0,0,
0,0,0,0,1,0,
0,0,3,0,0,0,
1,0,0,0,15,0,
0,0,84,69,88,67,
79,79,82,68,0,83,
86,95,80,111,115,105,
116,105,111,110,0,171,
171,171,83,72,69,88,
84,1,0,0,80,0,
1,0,85,0,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
0,0,0,0,7,0,
0,0,95,0,0,3,
242,16,16,0,0,0,
0,0,95,0,0,3,
50,16,16,0,1,0,
0,0,101,0,0,3,
50,32,16,0,0,0,
0,0,101,0,0,3,
66,32,16,0,0,0,
0,0,103,0,0,4,
242,32,16,0,1,0,
0,0,1,0,0,0,
104,0,0,2,1,0,
0,0,56,0,0,9,
18,0,16,0,0,0,
0,0,58,128,32,0,
0,0,0,0,4,0,
0,0,26,128,32,0,
0,0,0,0,6,0,
0,0,56,0,0,7,
66,32,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,171,170,170,62,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,8,0,
0,0,1,0,0,0,
0,0,0,0,5,0,
0,0,6,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,226,50,
113,180,247,64,44,154,
231,147,39,162,254,156,
101,84,1,0,0,0,
96,13,0,0,5,0,
0,0,52,0,0,0,
192,4,0,0,12,5,
0,0,64,5,0,0,
196,12,0,0,82,68,
69,70,132,4,0,0,
2,0,0,0,220,0,
0,0,4,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
92,4,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
188,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,204,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,211,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
215,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,95,83,111,117,
114,99,101,95,115,97,
109,112,108,101,114,0,
83,111,117,114,99,101,
0,85,66,79,0,80,
117,115,104,0,211,0,
0,0,4,0,0,0,
12,1,0,0,112,0,
0,0,0,0,0,0,
0,0,0,0,215,0,
0,0,8,0,0,0,
76,2,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,172,1,
0,0,0,0,0,0,
64,0,0,0,0,0,
0,0,192,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,228,1,0,0,
64,0,0,0,16,0,
0,0,2,0,0,0,
0,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
36,2,0,0,80,0,
0,0,16,0,0,0,
0,0,0,0,0,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,56,2,
0,0,96,0,0,0,
16,0,0,0,2,0,
0,0,0,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
183,1,0,0,103,108,
111,98,97,108,95,79,
117,116,112,117,116,83,
105,122,101,0,102,108,
111,97,116,52,0,171,
171,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,246,1,
0,0,103,108,111,98,
97,108,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,103,108,
111,98,97,108,95,83,
111,117,114,99,101,83,
105,122,101,0,171,171,
140,3,0,0,0,0,
0,0,4,0,0,0,
2,0,0,0,164,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,200,3,
0,0,4,0,0,0,
4,0,0,0,2,0,
0,0,164,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,218,3,0,0,
8,0,0,0,4,0,
0,0,2,0,0,0,
164,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
240,3,0,0,12,0,
0,0,4,0,0,0,
2,0,0,0,164,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,6,4,
0,0,16,0,0,0,
4,0,0,0,2,0,
0,0,164,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,36,4,0,0,
20,0,0,0,4,0,
0,0,2,0,0,0,
164,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
55,4,0,0,24,0,
0,0,4,0,0,0,
0,0,0,0,164,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,73,4,
0,0,28,0,0,0,
4,0,0,0,0,0,
0,0,164,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,95,67,85,82,86,
65,84,85,82,69,95,
88,0,102,108,111,97,
116,0,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,158,3,
0,0,112,97,114,97,
109,95,67,85,82,86,
65,84,85,82,69,95,
89,0,112,97,114,97,
109,95,77,65,83,75,
95,66,82,73,71,72,
84,78,69,83,83,0,
112,97,114,97,109,95,
83,67,65,78,76,73,
78,69,95,87,69,73,
71,72,84,0,112,97,
114,97,109,95,83,67,
65,78,76,73,78,69,
95,71,65,80,95,66,
82,73,71,72,84,78,
69,83,83,0,112,97,
114,97,109,95,66,76,
79,79,77,95,70,65,
67,84,79,82,0,112,
97,114,97,109,95,73,
78,80,85,84,95,71,
65,77,77,65,0,112,
97,114,97,109,95,79,
85,84,80,85,84,95,
71,65,77,77,65,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,4,4,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,124,7,
0,0,80,0,0,0,
223,1,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,7,0,0,0,
89,0,0,4,70,142,
32,0,1,0,0,0,
2,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,88,24,
0,4,0,112,16,0,
2,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,98,16,0,3,
66,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
4,0,0,0,50,0,
0,17,50,0,16,0,
0,0,0,0,70,128,
32,128,65,0,0,0,
1,0,0,0,0,0,
0,0,2,64,0,0,
31,133,107,62,31,133,
107,62,0,0,0,0,
0,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
0,0,0,0,0,0,
0,0,0,10,194,0,
16,0,0,0,0,0,
6,20,16,0,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,191,
0,0,0,191,15,0,
0,7,18,0,16,0,
1,0,0,0,230,10,
16,0,0,0,0,0,
230,10,16,0,0,0,
0,0,56,0,0,8,
50,0,16,0,1,0,
0,0,6,0,16,0,
1,0,0,0,70,128,
32,0,1,0,0,0,
0,0,0,0,50,0,
0,9,194,0,16,0,
0,0,0,0,166,14,
16,0,0,0,0,0,
6,4,16,0,1,0,
0,0,166,14,16,0,
0,0,0,0,56,0,
0,7,50,0,16,0,
1,0,0,0,70,0,
16,0,0,0,0,0,
230,10,16,0,0,0,
0,0,49,0,0,8,
18,0,16,0,1,0,
0,0,10,0,16,128,
129,0,0,0,1,0,
0,0,1,64,0,0,
0,0,0,63,29,0,
0,8,34,0,16,0,
1,0,0,0,26,0,
16,128,129,0,0,0,
1,0,0,0,1,64,
0,0,0,0,0,63,
55,0,0,9,18,0,
16,0,1,0,0,0,
10,0,16,0,1,0,
0,0,26,0,16,0,
1,0,0,0,1,64,
0,0,255,255,255,255,
50,0,0,12,50,0,
16,0,0,0,0,0,
230,10,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,63,0,0,
0,0,0,0,0,0,
55,0,0,12,50,0,
16,0,0,0,0,0,
6,0,16,0,1,0,
0,0,2,64,0,0,
0,0,128,191,0,0,
128,191,0,0,0,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
29,0,0,7,130,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,0,31,0,
4,3,58,0,16,0,
0,0,0,0,56,0,
0,8,130,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
26,128,32,0,0,0,
0,0,6,0,0,0,
65,0,0,5,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,0,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,63,
50,0,0,11,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,26,128,32,0,
0,0,0,0,6,0,
0,0,58,0,16,128,
65,0,0,0,0,0,
0,0,56,0,0,7,
18,0,16,0,1,0,
0,0,26,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
50,0,0,11,18,0,
16,0,1,0,0,0,
10,0,16,128,65,0,
0,0,1,0,0,0,
58,128,32,0,1,0,
0,0,0,0,0,0,
1,64,0,0,0,0,
128,63,0,0,0,8,
34,0,16,0,1,0,
0,0,26,0,16,0,
0,0,0,0,42,16,
16,128,65,0,0,0,
0,0,0,0,56,0,
0,7,34,0,16,0,
1,0,0,0,26,0,
16,0,1,0,0,0,
26,0,16,0,1,0,
0,0,50,0,0,11,
34,0,16,0,1,0,
0,0,26,0,16,128,
65,0,0,0,1,0,
0,0,58,128,32,0,
1,0,0,0,0,0,
0,0,1,64,0,0,
0,0,128,63,52,0,
0,8,50,0,16,0,
1,0,0,0,70,0,
16,0,1,0,0,0,
6,128,32,0,1,0,
0,0,1,0,0,0,
0,0,0,7,18,0,
16,0,1,0,0,0,
26,0,16,0,1,0,
0,0,10,0,16,0,
1,0,0,0,0,0,
0,7,34,0,16,0,
1,0,0,0,26,0,
16,0,0,0,0,0,
42,16,16,0,0,0,
0,0,56,0,0,7,
34,0,16,0,1,0,
0,0,26,0,16,0,
1,0,0,0,26,0,
16,0,1,0,0,0,
50,0,0,11,34,0,
16,0,1,0,0,0,
26,0,16,128,65,0,
0,0,1,0,0,0,
58,128,32,0,1,0,
0,0,0,0,0,0,
1,64,0,0,0,0,
128,63,52,0,0,8,
34,0,16,0,1,0,
0,0,26,0,16,0,
1,0,0,0,10,128,
32,0,1,0,0,0,
1,0,0,0,0,0,
0,7,18,0,16,0,
1,0,0,0,26,0,
16,0,1,0,0,0,
10,0,16,0,1,0,
0,0,56,0,0,8,
18,0,16,0,1,0,
0,0,10,0,16,0,
1,0,0,0,26,128,
32,0,1,0,0,0,
1,0,0,0,49,0,
0,7,34,0,16,0,
1,0,0,0,1,64,
0,0,0,0,0,0,
26,0,16,0,0,0,
0,0,49,0,0,7,
66,0,16,0,1,0,
0,0,26,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,0,
30,0,0,8,34,0,
16,0,1,0,0,0,
26,0,16,128,65,0,
0,0,1,0,0,0,
42,0,16,0,1,0,
0,0,43,0,0,5,
34,0,16,0,1,0,
0,0,26,0,16,0,
1,0,0,0,0,0,
0,9,34,0,16,0,
0,0,0,0,26,0,
16,128,129,0,0,0,
0,0,0,0,26,0,
16,128,129,0,0,0,
0,0,0,0,56,0,
0,7,66,0,16,0,
1,0,0,0,26,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,56,0,0,7,
34,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,42,0,
16,0,1,0,0,0,
56,0,0,8,34,0,
16,0,1,0,0,0,
26,0,16,0,1,0,
0,0,58,128,32,0,
0,0,0,0,6,0,
0,0,56,0,0,7,
34,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,26,0,
16,0,1,0,0,0,
56,0,0,7,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,50,0,
0,10,66,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
58,128,32,0,0,0,
0,0,6,0,0,0,
26,0,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
0,0,0,0,134,0,
16,0,0,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,56,0,
0,7,130,0,16,0,
0,0,0,0,10,0,
16,0,1,0,0,0,
1,64,0,0,170,170,
170,62,56,0,0,7,
114,0,16,0,0,0,
0,0,246,15,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
56,0,0,8,130,0,
16,0,0,0,0,0,
10,16,16,0,0,0,
0,0,10,128,32,0,
0,0,0,0,4,0,
0,0,56,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,170,170,170,62,
26,0,0,5,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,49,0,0,10,
50,0,16,0,1,0,
0,0,246,15,16,0,
0,0,0,0,2,64,
0,0,170,170,170,62,
170,170,42,63,0,0,
0,0,0,0,0,0,
54,0,0,5,18,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
128,63,54,0,0,6,
98,0,16,0,2,0,
0,0,166,138,32,0,
1,0,0,0,0,0,
0,0,55,0,0,9,
98,0,16,0,3,0,
0,0,86,5,16,0,
1,0,0,0,6,2,
16,0,2,0,0,0,
166,8,16,0,2,0,
0,0,54,0,0,6,
18,0,16,0,3,0,
0,0,42,128,32,0,
1,0,0,0,0,0,
0,0,55,0,0,9,
114,0,16,0,1,0,
0,0,6,0,16,0,
1,0,0,0,70,2,
16,0,2,0,0,0,
70,2,16,0,3,0,
0,0,56,0,0,7,
114,32,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
54,0,0,5,130,32,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,18,0,0,1,
54,0,0,8,242,32,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,21,0,0,1,
62,0,0,1,83,84,
65,84,148,0,0,0,
59,0,0,0,4,0,
0,0,0,0,0,0,
3,0,0,0,43,0,
0,0,1,0,0,0,
0,0,0,0,2,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,5,0,
0,0,4,0,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};

}

namespace RetroArch
{
class CrtShadersCrtPiShaderDef : public ShaderDef
{
public:
	CrtShadersCrtPiShaderDef() : ShaderDef{}
	{
		Name = "crt-pi";
		VertexByteCode = RetroArchCrtShadersCrtPiShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersCrtPiShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchCrtShadersCrtPiShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersCrtPiShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("CURVATURE_X", -1, 0, 4, 0.000000f, 1.000000f, 0.100000f, 0.010000f, "Screen curvature - horizontal"));
		Params.push_back(ShaderParam("CURVATURE_Y", -1, 4, 4, 0.000000f, 1.000000f, 0.150000f, 0.010000f, "Screen curvature - vertical"));
		Params.push_back(ShaderParam("MASK_BRIGHTNESS", -1, 8, 4, 0.000000f, 1.000000f, 0.700000f, 0.010000f, "Mask brightness"));
		Params.push_back(ShaderParam("SCANLINE_WEIGHT", -1, 12, 4, 0.000000f, 15.000000f, 6.000000f, 0.100000f, "Scanline weight"));
		Params.push_back(ShaderParam("SCANLINE_GAP_BRIGHTNESS", -1, 16, 4, 0.000000f, 1.000000f, 0.120000f, 0.010000f, "Scanline gap brightness"));
		Params.push_back(ShaderParam("BLOOM_FACTOR", -1, 20, 4, 0.000000f, 5.000000f, 1.500000f, 0.010000f, "Bloom factor"));
		Params.push_back(ShaderParam("INPUT_GAMMA", -1, 24, 4, 0.000000f, 5.000000f, 2.400000f, 0.010000f, "Input gamma"));
		Params.push_back(ShaderParam("OUTPUT_GAMMA", -1, 28, 4, 0.000000f, 5.000000f, 2.200000f, 0.010000f, "Output gamma"));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", 0, 96, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", 0, 80, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", 0, 64, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
