/*
ShaderGlass shader crt-shaders\fakelottes imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/crt/shaders/fakelottes.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

// Simple scanlines with curvature and mask effects lifted from crt-lottes
// by hunterk
////////////////////////////////////////////////////////////////////
////////////////////////////  SETTINGS  ////////////////////////////
/////  comment these lines to disable effects and gain speed  //////
////////////////////////////////////////////////////////////////////
//#define ROTATE_SCANLINES // for TATE games; also disables the mask effects, which look bad with it
////////////////////////////////////////////////////////////////////
//////////////////////////  END SETTINGS  //////////////////////////
////////////////////////////////////////////////////////////////////
// prevent stupid behavior
// Distortion of scanlines, and end of screen alpha.
// Shadow mask.
// Very compressed TV style shadow mask.
// Aperture-grille.
// These can cause moire with curvature and scanlines
// so they're an easy target for freeing up registers
// Stretched VGA style shadow mask (same as prior shaders).
// VGA style shadow mask.
// mask effects look bad unless applied in linear gamma space
// apply the mask; looks bad with vert scanlines so make them mutually exclusive
// re-apply the gamma curve for the mask path

*/

#pragma once

namespace RetroArchCrtShadersFakelottesShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,88,206,
231,163,235,92,102,172,
58,12,242,195,68,136,
213,169,1,0,0,0,
28,15,0,0,5,0,
0,0,52,0,0,0,
0,5,0,0,52,5,
0,0,104,5,0,0,
128,14,0,0,82,68,
69,70,196,4,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
153,4,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,14,0,0,0,
208,0,0,0,96,0,
0,0,0,0,0,0,
0,0,0,0,0,3,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,28,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,64,3,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
28,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
84,3,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,28,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,102,3,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,128,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,164,3,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
188,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
224,3,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,188,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,252,3,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,188,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,9,4,0,0,
64,0,0,0,4,0,
0,0,2,0,0,0,
188,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
22,4,0,0,68,0,
0,0,4,0,0,0,
2,0,0,0,188,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,38,4,
0,0,72,0,0,0,
4,0,0,0,2,0,
0,0,188,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,55,4,0,0,
76,0,0,0,4,0,
0,0,2,0,0,0,
188,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
72,4,0,0,80,0,
0,0,4,0,0,0,
2,0,0,0,188,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,93,4,
0,0,84,0,0,0,
4,0,0,0,2,0,
0,0,188,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,121,4,0,0,
88,0,0,0,4,0,
0,0,2,0,0,0,
188,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
18,3,0,0,112,97,
114,97,109,115,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
112,97,114,97,109,115,
95,79,117,116,112,117,
116,83,105,122,101,0,
112,97,114,97,109,115,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,120,3,
0,0,112,97,114,97,
109,115,95,115,104,97,
100,111,119,77,97,115,
107,0,102,108,111,97,
116,0,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,182,3,
0,0,112,97,114,97,
109,115,95,83,67,65,
78,76,73,78,69,95,
83,73,78,69,95,67,
79,77,80,95,66,0,
112,97,114,97,109,115,
95,119,97,114,112,88,
0,112,97,114,97,109,
115,95,119,97,114,112,
89,0,112,97,114,97,
109,115,95,109,97,115,
107,68,97,114,107,0,
112,97,114,97,109,115,
95,109,97,115,107,76,
105,103,104,116,0,112,
97,114,97,109,115,95,
99,114,116,95,103,97,
109,109,97,0,112,97,
114,97,109,115,95,109,
111,110,105,116,111,114,
95,103,97,109,109,97,
0,112,97,114,97,109,
115,95,83,67,65,78,
76,73,78,69,95,83,
73,78,69,95,67,79,
77,80,95,65,0,112,
97,114,97,109,115,95,
83,67,65,78,76,73,
78,69,95,66,65,83,
69,95,66,82,73,71,
72,84,78,69,83,83,
0,77,105,99,114,111,
115,111,102,116,32,40,
82,41,32,72,76,83,
76,32,83,104,97,100,
101,114,32,67,111,109,
112,105,108,101,114,32,
49,48,46,49,0,171,
171,171,73,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,16,9,0,0,
80,0,0,0,68,2,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,1,0,0,0,
6,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,88,24,
0,4,0,112,16,0,
2,0,0,0,85,85,
0,0,98,16,0,3,
50,16,16,0,0,0,
0,0,101,0,0,3,
242,32,16,0,0,0,
0,0,104,0,0,2,
6,0,0,0,50,0,
0,15,50,0,16,0,
0,0,0,0,70,16,
16,0,0,0,0,0,
2,64,0,0,0,0,
0,64,0,0,0,64,
0,0,0,0,0,0,
0,0,2,64,0,0,
0,0,128,191,0,0,
128,191,0,0,0,0,
0,0,0,0,56,0,
0,7,194,0,16,0,
0,0,0,0,86,1,
16,0,0,0,0,0,
86,1,16,0,0,0,
0,0,50,0,0,10,
18,0,16,0,1,0,
0,0,42,0,16,0,
0,0,0,0,58,128,
32,0,1,0,0,0,
3,0,0,0,1,64,
0,0,0,0,128,63,
50,0,0,10,34,0,
16,0,1,0,0,0,
58,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,4,0,
0,0,1,64,0,0,
0,0,128,63,56,0,
0,7,50,0,16,0,
0,0,0,0,70,0,
16,0,0,0,0,0,
70,0,16,0,1,0,
0,0,50,0,0,15,
50,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,63,0,0,
0,0,0,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,0,0,0,
0,0,14,0,0,11,
66,0,16,0,0,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,63,0,0,128,63,
0,0,128,63,58,128,
32,0,1,0,0,0,
4,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,1,0,0,0,
70,0,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
47,0,0,5,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,56,0,0,8,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,6,128,
32,0,1,0,0,0,
5,0,0,0,25,0,
0,5,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
56,0,0,8,114,0,
16,0,2,0,0,0,
22,21,16,0,0,0,
0,0,22,133,32,0,
1,0,0,0,2,0,
0,0,24,0,0,8,
130,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,26,128,
32,0,1,0,0,0,
3,0,0,0,31,0,
4,3,58,0,16,0,
0,0,0,0,56,0,
0,10,114,0,16,0,
3,0,0,0,86,5,
16,0,2,0,0,0,
2,64,0,0,10,175,
42,62,10,175,170,62,
10,175,170,62,0,0,
0,0,26,0,0,5,
114,0,16,0,3,0,
0,0,70,2,16,0,
3,0,0,0,49,0,
0,10,114,0,16,0,
3,0,0,0,70,2,
16,0,3,0,0,0,
2,64,0,0,0,0,
0,63,250,126,170,62,
250,126,42,63,0,0,
0,0,1,0,0,7,
130,0,16,0,0,0,
0,0,10,0,16,0,
3,0,0,0,1,64,
0,0,0,0,128,63,
50,0,0,9,130,0,
16,0,0,0,0,0,
42,0,16,0,2,0,
0,0,1,64,0,0,
71,3,128,63,58,0,
16,0,0,0,0,0,
56,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,26,0,
0,5,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
49,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,55,0,
0,11,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
26,128,32,0,1,0,
0,0,4,0,0,0,
42,128,32,0,1,0,
0,0,4,0,0,0,
55,0,0,11,98,0,
16,0,4,0,0,0,
166,10,16,0,3,0,
0,0,166,137,32,0,
1,0,0,0,4,0,
0,0,86,134,32,0,
1,0,0,0,4,0,
0,0,54,0,0,6,
18,0,16,0,4,0,
0,0,26,128,32,0,
1,0,0,0,4,0,
0,0,55,0,0,10,
114,0,16,0,3,0,
0,0,86,5,16,0,
3,0,0,0,102,137,
32,0,1,0,0,0,
4,0,0,0,70,2,
16,0,4,0,0,0,
56,0,0,7,114,0,
16,0,3,0,0,0,
246,15,16,0,0,0,
0,0,70,2,16,0,
3,0,0,0,18,0,
0,1,24,0,0,8,
130,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,64,26,128,
32,0,1,0,0,0,
3,0,0,0,31,0,
4,3,58,0,16,0,
0,0,0,0,56,0,
0,7,130,0,16,0,
0,0,0,0,26,0,
16,0,2,0,0,0,
1,64,0,0,10,175,
170,62,26,0,0,5,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,49,0,
0,10,50,0,16,0,
4,0,0,0,246,15,
16,0,0,0,0,0,
2,64,0,0,250,126,
170,62,250,126,42,63,
0,0,0,0,0,0,
0,0,55,0,0,11,
98,0,16,0,5,0,
0,0,86,5,16,0,
4,0,0,0,166,137,
32,0,1,0,0,0,
4,0,0,0,86,134,
32,0,1,0,0,0,
4,0,0,0,54,0,
0,6,18,0,16,0,
5,0,0,0,26,128,
32,0,1,0,0,0,
4,0,0,0,55,0,
0,10,114,0,16,0,
3,0,0,0,6,0,
16,0,4,0,0,0,
102,137,32,0,1,0,
0,0,4,0,0,0,
70,2,16,0,5,0,
0,0,18,0,0,1,
56,0,0,10,210,0,
16,0,2,0,0,0,
6,9,16,0,2,0,
0,0,2,64,0,0,
234,4,64,64,0,0,
0,0,71,3,128,63,
71,3,0,63,50,0,
0,9,130,0,16,0,
0,0,0,0,26,0,
16,0,2,0,0,0,
1,64,0,0,71,3,
128,63,10,0,16,0,
2,0,0,0,56,0,
0,7,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
1,64,0,0,171,170,
42,62,26,0,0,5,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,49,0,
0,10,50,0,16,0,
2,0,0,0,246,15,
16,0,0,0,0,0,
2,64,0,0,250,126,
170,62,250,126,42,63,
0,0,0,0,0,0,
0,0,55,0,0,11,
98,0,16,0,4,0,
0,0,86,5,16,0,
2,0,0,0,166,137,
32,0,1,0,0,0,
4,0,0,0,86,134,
32,0,1,0,0,0,
4,0,0,0,54,0,
0,6,18,0,16,0,
4,0,0,0,26,128,
32,0,1,0,0,0,
4,0,0,0,55,0,
0,10,114,0,16,0,
4,0,0,0,6,0,
16,0,2,0,0,0,
102,137,32,0,1,0,
0,0,4,0,0,0,
70,2,16,0,4,0,
0,0,24,0,0,11,
50,0,16,0,2,0,
0,0,2,64,0,0,
0,0,64,64,0,0,
128,64,0,0,0,0,
0,0,0,0,86,133,
32,0,1,0,0,0,
3,0,0,0,65,0,
0,5,194,0,16,0,
2,0,0,0,166,14,
16,0,2,0,0,0,
50,0,0,9,130,0,
16,0,0,0,0,0,
58,0,16,0,2,0,
0,0,1,64,0,0,
0,0,64,64,42,0,
16,0,2,0,0,0,
56,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
171,170,42,62,26,0,
0,5,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
49,0,0,10,194,0,
16,0,2,0,0,0,
246,15,16,0,0,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,250,126,170,62,
250,126,42,63,55,0,
0,11,98,0,16,0,
5,0,0,0,246,15,
16,0,2,0,0,0,
166,137,32,0,1,0,
0,0,4,0,0,0,
86,134,32,0,1,0,
0,0,4,0,0,0,
54,0,0,6,18,0,
16,0,5,0,0,0,
26,128,32,0,1,0,
0,0,4,0,0,0,
55,0,0,10,114,0,
16,0,5,0,0,0,
166,10,16,0,2,0,
0,0,102,137,32,0,
1,0,0,0,4,0,
0,0,70,2,16,0,
5,0,0,0,55,0,
0,12,226,0,16,0,
2,0,0,0,86,5,
16,0,2,0,0,0,
6,9,16,0,5,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,55,0,
0,9,114,0,16,0,
3,0,0,0,6,0,
16,0,2,0,0,0,
70,2,16,0,4,0,
0,0,150,7,16,0,
2,0,0,0,21,0,
0,1,21,0,0,1,
56,0,0,7,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,70,2,16,0,
3,0,0,0,56,0,
0,8,18,0,16,0,
2,0,0,0,10,0,
16,0,0,0,0,0,
10,128,32,0,1,0,
0,0,2,0,0,0,
56,0,0,8,34,0,
16,0,2,0,0,0,
26,0,16,0,0,0,
0,0,26,128,32,0,
1,0,0,0,0,0,
0,0,56,0,0,10,
50,0,16,0,0,0,
0,0,70,0,16,0,
2,0,0,0,2,64,
0,0,86,14,73,64,
86,14,201,64,0,0,
0,0,0,0,0,0,
77,0,0,6,50,0,
16,0,0,0,0,0,
0,208,0,0,70,0,
16,0,0,0,0,0,
56,0,0,8,18,0,
16,0,2,0,0,0,
10,0,16,0,0,0,
0,0,26,128,32,0,
1,0,0,0,5,0,
0,0,56,0,0,8,
34,0,16,0,2,0,
0,0,26,0,16,0,
0,0,0,0,42,128,
32,0,1,0,0,0,
3,0,0,0,15,0,
0,10,18,0,16,0,
0,0,0,0,70,0,
16,0,2,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,0,0,0,0,
0,0,0,0,0,8,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,42,128,
32,0,1,0,0,0,
5,0,0,0,56,0,
0,7,178,0,16,0,
0,0,0,0,6,0,
16,0,0,0,0,0,
70,8,16,0,1,0,
0,0,47,0,0,5,
178,0,16,0,0,0,
0,0,70,12,16,0,
0,0,0,0,56,0,
0,7,114,0,16,0,
0,0,0,0,70,3,
16,0,0,0,0,0,
166,10,16,0,0,0,
0,0,54,0,0,5,
130,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,0,25,0,
0,5,242,32,16,0,
0,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
73,0,0,0,6,0,
0,0,0,0,0,0,
2,0,0,0,48,0,
0,0,0,0,0,0,
1,0,0,0,3,0,
0,0,2,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,5,0,
0,0,11,0,0,0,
6,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};

}

namespace RetroArch
{
class CrtShadersFakelottesShaderDef : public ShaderDef
{
public:
	CrtShadersFakelottesShaderDef() : ShaderDef{}
	{
		Name = "fakelottes";
		VertexByteCode = RetroArchCrtShadersFakelottesShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersFakelottesShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchCrtShadersFakelottesShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersFakelottesShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("shadowMask", -1, 52, 4, 0.000000f, 4.000000f, 1.000000f, 1.000000f, "shadowMask"));
		Params.push_back(ShaderParam("SCANLINE_SINE_COMP_B", -1, 56, 4, 0.000000f, 1.000000f, 0.400000f, 0.050000f, "Scanline Intensity"));
		Params.push_back(ShaderParam("warpX", -1, 60, 4, 0.000000f, 0.125000f, 0.031000f, 0.010000f, "warpX"));
		Params.push_back(ShaderParam("warpY", -1, 64, 4, 0.000000f, 0.125000f, 0.041000f, 0.010000f, "warpY"));
		Params.push_back(ShaderParam("maskDark", -1, 68, 4, 0.000000f, 2.000000f, 0.500000f, 0.100000f, "maskDark"));
		Params.push_back(ShaderParam("maskLight", -1, 72, 4, 0.000000f, 2.000000f, 1.500000f, 0.100000f, "maskLight"));
		Params.push_back(ShaderParam("crt_gamma", -1, 76, 4, 1.000000f, 4.000000f, 2.500000f, 0.050000f, "CRT Gamma"));
		Params.push_back(ShaderParam("monitor_gamma", -1, 80, 4, 1.000000f, 4.000000f, 2.200000f, 0.050000f, "Monitor Gamma"));
		Params.push_back(ShaderParam("SCANLINE_SINE_COMP_A", -1, 84, 4, 0.000000f, 0.100000f, 0.000000f, 0.010000f, "Scanline Sine Comp A"));
		Params.push_back(ShaderParam("SCANLINE_BASE_BRIGHTNESS", -1, 88, 4, 0.000000f, 1.000000f, 0.950000f, 0.010000f, "Scanline Base Brightness"));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
