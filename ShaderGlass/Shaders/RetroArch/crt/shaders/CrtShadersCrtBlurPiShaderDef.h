/*
ShaderGlass shader crt-shaders\crt-blurPi imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/crt/shaders/crt-blurPi.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.



- crt-blurPi slang shader -

Looks good on low res screens (640 x 480 or less), providing screen space scanlines.
Developed on and for the Raspberry Pi.

Made by Oriol Ferrer Mesi√† (armadillu)
http://uri.cat

MIT license

params....
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

*/

#pragma once

namespace RetroArchCrtShadersCrtBlurPiShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,137,164,
14,204,233,86,162,188,
17,19,20,238,60,220,
229,47,1,0,0,0,
116,6,0,0,5,0,
0,0,52,0,0,0,
216,3,0,0,36,4,
0,0,148,4,0,0,
216,5,0,0,82,68,
69,70,156,3,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
114,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,8,0,0,0,
24,1,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,88,2,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,116,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,152,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
116,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
172,2,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,116,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,190,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,216,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,252,2,0,0,
52,0,0,0,4,0,
0,0,0,0,0,0,
24,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
60,3,0,0,56,0,
0,0,4,0,0,0,
0,0,0,0,24,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,80,3,
0,0,60,0,0,0,
4,0,0,0,0,0,
0,0,24,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,96,3,0,0,
64,0,0,0,4,0,
0,0,0,0,0,0,
24,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
106,2,0,0,112,97,
114,97,109,115,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
112,97,114,97,109,115,
95,79,117,116,112,117,
116,83,105,122,101,0,
112,97,114,97,109,115,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,208,2,
0,0,112,97,114,97,
109,115,95,115,99,97,
110,108,105,110,101,71,
97,105,110,0,102,108,
111,97,116,0,171,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,16,3,0,0,
112,97,114,97,109,115,
95,114,103,98,69,120,
116,114,97,71,97,105,
110,0,112,97,114,97,
109,115,95,98,108,117,
114,71,97,105,110,0,
112,97,114,97,109,115,
95,98,108,117,114,82,
97,100,105,117,115,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,171,171,
73,83,71,78,68,0,
0,0,2,0,0,0,
8,0,0,0,56,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,15,0,0,56,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
3,3,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,104,0,0,0,
3,0,0,0,8,0,
0,0,80,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,12,
0,0,80,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,12,3,
0,0,89,0,0,0,
0,0,0,0,1,0,
0,0,3,0,0,0,
1,0,0,0,15,0,
0,0,84,69,88,67,
79,79,82,68,0,83,
86,95,80,111,115,105,
116,105,111,110,0,171,
171,171,83,72,69,88,
60,1,0,0,80,0,
1,0,79,0,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
0,0,0,0,4,0,
0,0,89,0,0,4,
70,142,32,0,1,0,
0,0,1,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
101,0,0,3,194,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,54,0,0,6,
194,32,16,0,0,0,
0,0,166,142,32,0,
1,0,0,0,0,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,7,0,
0,0,1,0,0,0,
0,0,0,0,5,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,9,234,
24,149,156,72,121,39,
35,152,187,3,23,222,
114,223,1,0,0,0,
104,8,0,0,5,0,
0,0,52,0,0,0,
144,3,0,0,220,3,
0,0,16,4,0,0,
204,7,0,0,82,68,
69,70,84,3,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
42,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,8,0,0,0,
208,0,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,16,2,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,44,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,80,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
44,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
100,2,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,44,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,118,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,144,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,180,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
208,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
244,2,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,208,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,8,3,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,208,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,24,3,0,0,
64,0,0,0,4,0,
0,0,2,0,0,0,
208,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
34,2,0,0,112,97,
114,97,109,115,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
112,97,114,97,109,115,
95,79,117,116,112,117,
116,83,105,122,101,0,
112,97,114,97,109,115,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,136,2,
0,0,112,97,114,97,
109,115,95,115,99,97,
110,108,105,110,101,71,
97,105,110,0,102,108,
111,97,116,0,171,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,200,2,0,0,
112,97,114,97,109,115,
95,114,103,98,69,120,
116,114,97,71,97,105,
110,0,112,97,114,97,
109,115,95,98,108,117,
114,71,97,105,110,0,
112,97,114,97,109,115,
95,98,108,117,114,82,
97,100,105,117,115,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,171,171,
73,83,71,78,68,0,
0,0,2,0,0,0,
8,0,0,0,56,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,3,0,0,56,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
12,12,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,0,
0,0,83,86,95,84,
97,114,103,101,116,0,
171,171,83,72,69,88,
180,3,0,0,80,0,
0,0,237,0,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
1,0,0,0,5,0,
0,0,90,0,0,3,
0,96,16,0,2,0,
0,0,88,24,0,4,
0,112,16,0,2,0,
0,0,85,85,0,0,
98,16,0,3,50,16,
16,0,0,0,0,0,
98,16,0,3,194,16,
16,0,0,0,0,0,
101,0,0,3,242,32,
16,0,0,0,0,0,
104,0,0,2,4,0,
0,0,50,0,0,11,
18,0,16,0,0,0,
0,0,58,128,32,128,
65,0,0,0,1,0,
0,0,3,0,0,0,
1,64,0,0,0,0,
64,63,1,64,0,0,
0,0,128,63,0,0,
0,8,34,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
42,128,32,0,1,0,
0,0,3,0,0,0,
56,0,0,7,18,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,1,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
54,0,0,5,34,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
0,0,56,0,0,8,
50,0,16,0,3,0,
0,0,230,26,16,0,
0,0,0,0,6,128,
32,0,1,0,0,0,
4,0,0,0,54,0,
0,6,18,0,16,0,
2,0,0,0,10,0,
16,128,65,0,0,0,
3,0,0,0,0,0,
0,7,98,0,16,0,
0,0,0,0,6,1,
16,0,2,0,0,0,
6,17,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,242,0,16,0,
2,0,0,0,150,5,
16,0,0,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,56,0,
0,8,34,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,62,
58,128,32,0,1,0,
0,0,3,0,0,0,
56,0,0,7,242,0,
16,0,2,0,0,0,
86,5,16,0,0,0,
0,0,70,14,16,0,
2,0,0,0,50,0,
0,9,242,0,16,0,
1,0,0,0,70,14,
16,0,1,0,0,0,
6,0,16,0,0,0,
0,0,70,14,16,0,
2,0,0,0,54,0,
0,5,66,0,16,0,
3,0,0,0,1,64,
0,0,0,0,0,0,
0,0,0,7,242,0,
16,0,2,0,0,0,
134,6,16,0,3,0,
0,0,70,20,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,242,0,
16,0,3,0,0,0,
70,0,16,0,2,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
242,0,16,0,2,0,
0,0,230,10,16,0,
2,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,50,0,0,9,
242,0,16,0,1,0,
0,0,70,14,16,0,
3,0,0,0,86,5,
16,0,0,0,0,0,
70,14,16,0,1,0,
0,0,50,0,0,9,
242,0,16,0,0,0,
0,0,70,14,16,0,
2,0,0,0,86,5,
16,0,0,0,0,0,
70,14,16,0,1,0,
0,0,56,0,0,8,
18,0,16,0,1,0,
0,0,26,16,16,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
2,0,0,0,67,0,
0,5,18,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
56,0,0,7,34,0,
16,0,1,0,0,0,
10,0,16,0,1,0,
0,0,1,64,0,0,
0,0,0,63,65,0,
0,5,34,0,16,0,
1,0,0,0,26,0,
16,0,1,0,0,0,
50,0,0,10,18,0,
16,0,1,0,0,0,
26,0,16,128,65,0,
0,0,1,0,0,0,
1,64,0,0,0,0,
0,64,10,0,16,0,
1,0,0,0,50,0,
0,9,18,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
10,0,16,0,1,0,
0,0,1,64,0,0,
0,0,128,191,50,0,
0,10,18,0,16,0,
1,0,0,0,26,128,
32,0,1,0,0,0,
3,0,0,0,10,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
128,63,56,0,0,7,
242,32,16,0,0,0,
0,0,70,14,16,0,
0,0,0,0,6,0,
16,0,1,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
27,0,0,0,4,0,
0,0,0,0,0,0,
3,0,0,0,20,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,2,0,
0,0,0,0,0,0,
2,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};

}

namespace RetroArch
{
class CrtShadersCrtBlurPiShaderDef : public ShaderDef
{
public:
	CrtShadersCrtBlurPiShaderDef() : ShaderDef{}
	{
		Name = "crt-blurPi";
		VertexByteCode = RetroArchCrtShadersCrtBlurPiShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersCrtBlurPiShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchCrtShadersCrtBlurPiShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersCrtBlurPiShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("scanlineGain", -1, 52, 4, 0.000000f, 1.000000f, 0.300000f));
		Params.push_back(ShaderParam("rgbExtraGain", -1, 56, 4, 0.000000f, 1.000000f, 0.100000f));
		Params.push_back(ShaderParam("blurGain", -1, 60, 4, 0.000000f, 1.000000f, 0.150000f));
		Params.push_back(ShaderParam("blurRadius", -1, 64, 4, 0.100000f, 3.000000f, 1.500000f));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
