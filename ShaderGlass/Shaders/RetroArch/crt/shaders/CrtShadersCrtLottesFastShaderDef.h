/*
ShaderGlass shader crt-shaders\crt-lottes-fast imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/crt/shaders/crt-lottes-fast.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

//_____________________________/\_______________________________
//==============================================================
//
//
//      [CRTS] PUBLIC DOMAIN CRT-STYLED SCALAR - 20180120b
//
//                      by Timothy Lottes
//             https://www.shadertoy.com/view/MtSfRK
//               adapted for RetroArch by hunterk
//
//
//==============================================================
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//_____________________________/\_______________________________
//==============================================================
//
//                         WHAT'S NEW
//
//--------------------------------------------------------------
// Evolution of prior shadertoy example
//--------------------------------------------------------------
// This one is semi-optimized
//  - Less texture fetches
//  - Didn't get to instruction level optimization
//  - Could likely use texture fetch to generate phosphor mask
//--------------------------------------------------------------
// Added options to disable unused features
//--------------------------------------------------------------
// Added in exposure matching
//  - Given scan-line effect and mask always darkens image
//  - Uses generalized tonemapper to boost mid-level
//  - Note this can compress highlights
//  - And won't get back peak brightness
//  - But best option if one doesn't want as much darkening
//--------------------------------------------------------------
// Includes option saturation and contrast controls
//--------------------------------------------------------------
// Added in subtractive aperture grille
//  - This is a bit brighter than prior
//--------------------------------------------------------------
// Make sure input to this filter is already low-resolution
//  - This is not designed to work on titles doing the following
//     - Rendering to hi-res with nearest sampling
//--------------------------------------------------------------
// Added a fast and more pixely option for 2 tap/pixel
//--------------------------------------------------------------
// Improved the vignette when WARP is enabled
//--------------------------------------------------------------
// Didn't test HLSL or CPU options
//  - Will incorportate patches if they are broken
//  - But out of time to try them myself
//==============================================================
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//_____________________________/\_______________________________
//==============================================================
//
//          LICENSE = UNLICENSE (aka PUBLIC DOMAIN)
//
//--------------------------------------------------------------
// This is free and unencumbered software released into the
// public domain.
//--------------------------------------------------------------
// Anyone is free to copy, modify, publish, use, compile, sell,
// or distribute this software, either in source code form or as
// a compiled binary, for any purpose, commercial or
// non-commercial, and by any means.
//--------------------------------------------------------------
// In jurisdictions that recognize copyright laws, the author or
// authors of this software dedicate any and all copyright
// interest in the software to the public domain. We make this
// dedication for the benefit of the public at large and to the
// detriment of our heirs and successors. We intend this
// dedication to be an overt act of relinquishment in perpetuity
// of all present and future rights to this software under
// copyright law.
//--------------------------------------------------------------
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
// KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
// AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
// OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------
// For more information, please refer to
// <http://unlicense.org/>
//==============================================================
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//_____________________________/\_______________________________
//==============================================================
//
//                       GAMMA FUNCTIONS
//
//--------------------------------------------------------------
//--------------------------------------------------------------
// Since shadertoy doesn't have sRGB textures
// And we need linear input into shader
// Don't do this in your code
//--------------------------------------------------------------
// Convert from linear to sRGB
// Since shader toy output is not linear
//--------------------------------------------------------------
//--------------------------------------------------------------
//_____________________________/\_______________________________
//==============================================================
//
//                           DEFINES
//
//--------------------------------------------------------------
// CRTS_CPU - CPU code
// CRTS_GPU - GPU code
//--------------------------------------------------------------
// CRTS_GLSL - GLSL
// CRTS_HLSL - HLSL (not tested yet)
//--------------------------------------------------------------
// CRTS_DEBUG - Define to see on/off split screen
//--------------------------------------------------------------
// CRTS_WARP - Apply screen warp
//--------------------------------------------------------------
// CRTS_2_TAP - Faster very pixely 2-tap filter (off is 8)
//--------------------------------------------------------------
// CRTS_MASK_GRILLE      - Aperture grille (aka Trinitron)
// CRTS_MASK_GRILLE_LITE - Brighter (subtractive channels)
// CRTS_MASK_NONE        - No mask
// CRTS_MASK_SHADOW      - Horizontally stretched shadow mask
//--------------------------------------------------------------
// CRTS_TONE       - Normalize mid-level and process color
// CRTS_CONTRAST   - Process color - enable contrast control
// CRTS_SATURATION - Process color - enable saturation control
//--------------------------------------------------------------
//==============================================================
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//==============================================================
//                      SETUP FOR CRTS
//--------------------------------------------------------------
//==============================================================
//#define CRTS_DEBUG 1
//--------------------------------------------------------------
//#define CRTS_2_TAP 1
//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------
// Try different masks -> moved to runtime parameters
//#define CRTS_MASK_GRILLE 1
//#define CRTS_MASK_GRILLE_LITE 1
//#define CRTS_MASK_NONE 1
//#define CRTS_MASK_SHADOW 1
//--------------------------------------------------------------
// Scanline thinness
//  0.50 = fused scanlines
//  0.70 = recommended default
//  1.00 = thinner scanlines (too thin)
//--------------------------------------------------------------
// Horizonal scan blur
//  -3.0 = pixely
//  -2.5 = default
//  -2.0 = smooth
//  -1.0 = too blurry
//--------------------------------------------------------------
// Shadow mask effect, ranges from,
//  0.25 = large amount of mask (not recommended, too dark)
//  0.50 = recommended default
//  1.00 = no shadow mask
//--------------------------------------------------------------
//--------------------------------------------------------------
// Setup the function which returns input image color
// For shadertoy, scale to get native texels in the image
// Move towards intersting parts
// uv+=vec2(0.5,0.5);
// Non-shadertoy case would not have the color conversion
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//_____________________________/\_______________________________
//==============================================================
//
//                          GPU CODE
//
//==============================================================
//_____________________________/\_______________________________
//==============================================================
//                         PORTABILITY
//==============================================================
//--------------------------------------------------------------
//==============================================================
//--------------------------------------------------------------
//_____________________________/\_______________________________
//==============================================================
//              TONAL CONTROL CONSTANT GENERATION
//--------------------------------------------------------------
// This is in here for rapid prototyping
// Please use the CPU code and pass in as constants
//==============================================================
//--------------------------------------------------------------
//--------------------------------------------------------------
// Normal R mask is {1.0,mask,mask}
// LITE   R mask is {mask,1.0,1.0}
//--------------------------------------------------------------
//_____________________________/\_______________________________
//==============================================================
//                            MASK
//--------------------------------------------------------------
// Letting LCD/OLED pixel elements function like CRT phosphors
// So "phosphor" resolution scales with display resolution
//--------------------------------------------------------------
// Not applying any warp to the mask (want high frequency)
// Real aperture grille has a mask which gets wider on ends
// Not attempting to be "real" but instead look the best
//--------------------------------------------------------------
// Shadow mask is stretched horizontally
//  RRGGBB
//  GBBRRG
//  RRGGBB
// This tends to look better on LCDs than vertical
// Also 2 pixel width is required to get triad centered
//--------------------------------------------------------------
// The LITE version of the Aperture Grille is brighter
// Uses {dark,1.0,1.0} for R channel
// Non LITE version uses {1.0,dark,dark}
//--------------------------------------------------------------
// 'pos' - This is 'fragCoord.xy'
//         Pixel {0,0} should be {0.5,0.5}
//         Pixel {1,1} should be {1.5,1.5}
//--------------------------------------------------------------
// 'dark' - Exposure of of masked channel
//          0.0=fully off, 1.0=no effect
//==============================================================
//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------
//_____________________________/\_______________________________
//==============================================================
//                        FILTER ENTRY
//--------------------------------------------------------------
// Input must be linear
// Output color is linear
//--------------------------------------------------------------
// Must have fetch function setup: CrtsF3 CrtsFetch(CrtsF2 uv)
//  - The 'uv' range is {0.0 to 1.0} for input texture
//  - Output of this must be linear color
//--------------------------------------------------------------
// SCANLINE MATH & AUTO-EXPOSURE NOTES
// ===================================
// Each output line has contribution from at most 2 scanlines
// Scanlines are shaped by a windowed cosine function
// This shape blends together well with only 2 lines of overlap
//--------------------------------------------------------------
// Base scanline intensity is as follows
// which leaves output intensity range from {0 to 1.0}
// --------
// thin := range {thick 0.5 to thin 1.0}
// off  := range {0.0 to <1.0},
//         sub-pixel offset between two scanlines
//  --------
//  a0=cos(min(0.5,     off *thin)*2pi)*0.5+0.5;
//  a1=cos(min(0.5,(1.0-off)*thin)*2pi)*0.5+0.5;
//--------------------------------------------------------------
// This leads to a image darkening factor of roughly:
//  {(1.5-thin)/1.0}
// This is further reduced by the mask:
//  {1.0/2.0+mask*1.0/2.0}
// Reciprocal of combined effect is used for auto-exposure
//  to scale up the mid-level in the tonemapper
//==============================================================
//--------------------------------------------------------------
// SV_POSITION, fragCoord.xy
//--------------------------------------------------------------
// inputSize / outputSize (in pixels)
//--------------------------------------------------------------
// 0.5 * inputSize (in pixels)
//--------------------------------------------------------------
// 1.0 / inputSize (in pixels)
//--------------------------------------------------------------
// 1.0 / outputSize (in pixels)
//--------------------------------------------------------------
// 2.0 / outputSize (in pixels)
//--------------------------------------------------------------
// inputSize.y
//--------------------------------------------------------------
// Warp scanlines but not phosphor mask
//  0.0 = no warp
//  1.0/64.0 = light warping
//  1.0/32.0 = more warping
// Want x and y warping to be different (based on aspect)
//--------------------------------------------------------------
// Scanline thinness
//  0.50 = fused scanlines
//  0.70 = recommended default
//  1.00 = thinner scanlines (too thin)
// Shared with CrtsTone() function
//--------------------------------------------------------------
// Horizonal scan blur
//  -3.0 = pixely
//  -2.5 = default
//  -2.0 = smooth
//  -1.0 = too blurry
//--------------------------------------------------------------
// Shadow mask effect, ranges from,
//  0.25 = large amount of mask (not recommended, too dark)
//  0.50 = recommended default
//  1.00 = no shadow mask
// Shared with CrtsTone() function
//--------------------------------------------------------------
// Tonal curve parameters generated by CrtsTone()
//--------------------------------------------------------------
//--------------------------------------------------------------
// Show second half processed, and first half un-processed
// Force nearest to get squares
//--------------------------------------------------------------
// Optional apply warp
// Convert to {-1 to 1} range
// Distort pushes image outside {-1 to 1} range
// TODO: Vignette needs optimization
// Leave in {0 to inputSize}
//--------------------------------------------------------------
// Snap to center of first scanline
// Using Inigo's "Improved Texture Interpolation
// http://iquilezles.org/www/articles/texture/texture.htm
// Coordinate adjusted bilinear fetch from 2 nearest scanlines
// Snap to center of one of four pixels
// Inital UV position
// Fetch 4 nearest texels from 2 nearest scanlines
//--------------------------------------------------------------
// Vertical filter
// Scanline intensity is using sine wave
// Easy filter window and integral used later in exposure
//--------------------------------------------------------------
// Get rid of wrong pixels on edge
// Apply vertical filter
// Horizontal kernel is simple gaussian filter
// Get rid of wrong pixels on edge
// Apply horizontal and vertical filters
//--------------------------------------------------------------
// Apply phosphor mask
//--------------------------------------------------------------
// Optional color processing
// Tonal control, start by protecting from /0
// Compute the ratios of {R,G,B}
// Apply tonal curve to peak value
// Apply saturation
// Reconstruct color
//--------------------------------------------------------------
// Shadertoy outputs non-linear color

*/

#pragma once

namespace RetroArchCrtShadersCrtLottesFastShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,47,164,
54,252,164,101,65,87,
188,210,116,226,244,49,
133,52,1,0,0,0,
248,30,0,0,5,0,
0,0,52,0,0,0,
120,4,0,0,172,4,
0,0,224,4,0,0,
92,30,0,0,82,68,
69,70,60,4,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
19,4,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,12,0,0,0,
208,0,0,0,96,0,
0,0,0,0,0,0,
0,0,0,0,176,2,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,204,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,240,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
204,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
4,3,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,204,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,22,3,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,48,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,84,3,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
104,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
140,3,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,104,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,162,3,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,104,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,187,3,0,0,
64,0,0,0,4,0,
0,0,2,0,0,0,
104,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
204,3,0,0,68,0,
0,0,4,0,0,0,
2,0,0,0,104,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,221,3,
0,0,72,0,0,0,
4,0,0,0,2,0,
0,0,104,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,244,3,0,0,
76,0,0,0,4,0,
0,0,2,0,0,0,
104,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
2,4,0,0,80,0,
0,0,4,0,0,0,
2,0,0,0,104,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,97,
114,97,109,115,95,83,
111,117,114,99,101,83,
105,122,101,0,102,108,
111,97,116,52,0,171,
171,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,194,2,
0,0,112,97,114,97,
109,115,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,112,97,
114,97,109,115,95,79,
117,116,112,117,116,83,
105,122,101,0,112,97,
114,97,109,115,95,70,
114,97,109,101,67,111,
117,110,116,0,100,119,
111,114,100,0,171,171,
0,0,19,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,40,3,0,0,
112,97,114,97,109,115,
95,77,65,83,75,0,
102,108,111,97,116,0,
171,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,96,3,
0,0,112,97,114,97,
109,115,95,77,65,83,
75,95,73,78,84,69,
78,83,73,84,89,0,
112,97,114,97,109,115,
95,83,67,65,78,76,
73,78,69,95,84,72,
73,78,78,69,83,83,
0,112,97,114,97,109,
115,95,83,67,65,78,
95,66,76,85,82,0,
112,97,114,97,109,115,
95,67,85,82,86,65,
84,85,82,69,0,112,
97,114,97,109,115,95,
84,82,73,78,73,84,
82,79,78,95,67,85,
82,86,69,0,112,97,
114,97,109,115,95,67,
79,82,78,69,82,0,
112,97,114,97,109,115,
95,67,82,84,95,71,
65,77,77,65,0,77,
105,99,114,111,115,111,
102,116,32,40,82,41,
32,72,76,83,76,32,
83,104,97,100,101,114,
32,67,111,109,112,105,
108,101,114,32,49,48,
46,49,0,171,73,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,116,25,
0,0,80,0,0,0,
93,6,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,6,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,13,0,0,0,
56,0,0,8,18,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
64,63,26,128,32,0,
1,0,0,0,4,0,
0,0,0,0,0,9,
34,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,42,128,
32,128,65,0,0,0,
1,0,0,0,4,0,
0,0,56,0,0,8,
34,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
4,0,0,0,50,0,
0,10,66,0,16,0,
0,0,0,0,58,128,
32,0,1,0,0,0,
3,0,0,0,1,64,
0,0,0,0,0,63,
1,64,0,0,0,0,
0,63,0,0,0,9,
130,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,42,128,
32,128,65,0,0,0,
1,0,0,0,3,0,
0,0,24,0,0,11,
114,0,16,0,1,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
128,63,0,0,0,64,
0,0,0,0,86,133,
32,0,1,0,0,0,
3,0,0,0,55,0,
0,9,18,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
128,63,58,0,16,0,
0,0,0,0,50,0,
0,9,130,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
0,63,1,64,0,0,
0,0,0,63,55,0,
0,9,18,0,16,0,
1,0,0,0,26,0,
16,0,1,0,0,0,
58,0,16,0,1,0,
0,0,10,0,16,0,
1,0,0,0,0,0,
0,8,130,0,16,0,
1,0,0,0,42,0,
16,128,65,0,0,0,
0,0,0,0,1,64,
0,0,0,0,192,63,
50,0,0,9,18,0,
16,0,1,0,0,0,
10,0,16,0,1,0,
0,0,1,64,0,0,
0,0,0,63,1,64,
0,0,0,0,0,63,
56,0,0,7,18,0,
16,0,1,0,0,0,
10,0,16,0,1,0,
0,0,58,0,16,0,
1,0,0,0,14,0,
0,7,18,0,16,0,
1,0,0,0,1,64,
0,0,236,81,56,62,
10,0,16,0,1,0,
0,0,0,0,0,7,
130,0,16,0,1,0,
0,0,10,0,16,0,
1,0,0,0,1,64,
0,0,236,81,56,190,
56,0,0,7,18,0,
16,0,2,0,0,0,
10,0,16,0,1,0,
0,0,1,64,0,0,
133,235,81,63,50,0,
0,9,18,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
1,64,0,0,236,81,
56,190,1,64,0,0,
236,81,56,62,14,0,
0,7,146,0,16,0,
1,0,0,0,6,12,
16,0,1,0,0,0,
6,0,16,0,2,0,
0,0,56,0,0,8,
50,0,16,0,2,0,
0,0,70,16,16,0,
0,0,0,0,70,128,
32,0,1,0,0,0,
2,0,0,0,56,0,
0,11,194,0,16,0,
2,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,63,0,0,0,63,
86,129,32,0,1,0,
0,0,0,0,0,0,
56,0,0,8,50,0,
16,0,3,0,0,0,
22,5,16,0,2,0,
0,0,182,143,32,0,
1,0,0,0,2,0,
0,0,50,0,0,15,
50,0,16,0,3,0,
0,0,70,0,16,0,
3,0,0,0,2,64,
0,0,0,0,0,64,
0,0,0,64,0,0,
0,0,0,0,0,0,
2,64,0,0,0,0,
128,191,0,0,128,191,
0,0,0,0,0,0,
0,0,56,0,0,7,
194,0,16,0,3,0,
0,0,6,4,16,0,
3,0,0,0,6,4,
16,0,3,0,0,0,
50,0,0,9,34,0,
16,0,4,0,0,0,
42,0,16,0,3,0,
0,0,26,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
50,0,0,9,18,0,
16,0,4,0,0,0,
58,0,16,0,3,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
56,0,0,7,50,0,
16,0,0,0,0,0,
70,0,16,0,3,0,
0,0,70,0,16,0,
4,0,0,0,56,0,
0,7,50,0,16,0,
3,0,0,0,22,5,
16,0,0,0,0,0,
22,5,16,0,0,0,
0,0,51,0,0,10,
50,0,16,0,3,0,
0,0,70,0,16,0,
3,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
0,0,0,0,0,0,
0,0,0,11,50,0,
16,0,3,0,0,0,
70,0,16,128,65,0,
0,0,3,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,0,0,0,0,
0,0,50,0,0,10,
18,0,16,0,3,0,
0,0,10,0,16,128,
65,0,0,0,3,0,
0,0,26,0,16,0,
3,0,0,0,1,64,
0,0,0,0,128,63,
50,0,0,10,34,0,
16,0,3,0,0,0,
58,128,32,0,1,0,
0,0,4,0,0,0,
1,64,0,0,111,18,
131,58,1,64,0,0,
238,124,127,63,56,0,
0,7,18,0,16,0,
3,0,0,0,26,0,
16,0,3,0,0,0,
10,0,16,0,3,0,
0,0,50,32,0,12,
18,0,16,0,3,0,
0,0,10,0,16,128,
65,0,0,0,3,0,
0,0,26,128,32,0,
1,0,0,0,0,0,
0,0,26,128,32,0,
1,0,0,0,0,0,
0,0,50,0,0,9,
50,0,16,0,0,0,
0,0,70,0,16,0,
0,0,0,0,230,10,
16,0,2,0,0,0,
230,10,16,0,2,0,
0,0,0,0,0,10,
194,0,16,0,2,0,
0,0,6,4,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,191,0,0,192,191,
65,0,0,5,194,0,
16,0,2,0,0,0,
166,14,16,0,2,0,
0,0,0,0,0,10,
194,0,16,0,2,0,
0,0,166,14,16,0,
2,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,63,0,0,0,63,
56,0,0,8,194,0,
16,0,4,0,0,0,
246,11,16,0,2,0,
0,0,166,142,32,0,
1,0,0,0,0,0,
0,0,74,0,0,141,
194,0,0,128,67,85,
21,0,226,0,16,0,
3,0,0,0,230,10,
16,0,4,0,0,0,
54,121,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,1,64,
0,0,0,0,128,193,
29,0,0,10,114,0,
16,0,5,0,0,0,
2,64,0,0,230,174,
37,61,230,174,37,61,
230,174,37,61,0,0,
0,0,150,7,16,0,
3,0,0,0,56,0,
0,10,114,0,16,0,
6,0,0,0,150,7,
16,0,3,0,0,0,
2,64,0,0,145,131,
158,61,145,131,158,61,
145,131,158,61,0,0,
0,0,50,0,0,16,
226,0,16,0,3,0,
0,0,86,14,16,128,
129,0,0,0,3,0,
0,0,2,64,0,0,
0,0,0,0,110,167,
114,63,110,167,114,63,
110,167,114,63,2,64,
0,0,0,0,0,0,
25,137,85,61,25,137,
85,61,25,137,85,61,
47,0,0,5,226,0,
16,0,3,0,0,0,
86,14,16,0,3,0,
0,0,56,0,0,8,
226,0,16,0,3,0,
0,0,86,14,16,0,
3,0,0,0,6,128,
32,0,1,0,0,0,
5,0,0,0,25,0,
0,5,226,0,16,0,
3,0,0,0,86,14,
16,0,3,0,0,0,
55,0,0,9,226,0,
16,0,3,0,0,0,
6,9,16,0,5,0,
0,0,6,9,16,0,
6,0,0,0,86,14,
16,0,3,0,0,0,
50,0,0,11,50,0,
16,0,4,0,0,0,
182,15,16,0,2,0,
0,0,230,138,32,0,
1,0,0,0,0,0,
0,0,230,138,32,0,
1,0,0,0,0,0,
0,0,74,0,0,141,
194,0,0,128,67,85,
21,0,114,0,16,0,
5,0,0,0,198,0,
16,0,4,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,1,64,
0,0,0,0,128,193,
29,0,0,10,114,0,
16,0,6,0,0,0,
2,64,0,0,230,174,
37,61,230,174,37,61,
230,174,37,61,0,0,
0,0,70,2,16,0,
5,0,0,0,56,0,
0,10,114,0,16,0,
7,0,0,0,70,2,
16,0,5,0,0,0,
2,64,0,0,145,131,
158,61,145,131,158,61,
145,131,158,61,0,0,
0,0,50,0,0,16,
114,0,16,0,5,0,
0,0,70,2,16,128,
129,0,0,0,5,0,
0,0,2,64,0,0,
110,167,114,63,110,167,
114,63,110,167,114,63,
0,0,0,0,2,64,
0,0,25,137,85,61,
25,137,85,61,25,137,
85,61,0,0,0,0,
47,0,0,5,114,0,
16,0,5,0,0,0,
70,2,16,0,5,0,
0,0,56,0,0,8,
114,0,16,0,5,0,
0,0,70,2,16,0,
5,0,0,0,6,128,
32,0,1,0,0,0,
5,0,0,0,25,0,
0,5,114,0,16,0,
5,0,0,0,70,2,
16,0,5,0,0,0,
55,0,0,9,114,0,
16,0,5,0,0,0,
70,2,16,0,6,0,
0,0,70,2,16,0,
7,0,0,0,70,2,
16,0,5,0,0,0,
0,0,0,8,34,0,
16,0,6,0,0,0,
10,0,16,0,4,0,
0,0,42,128,32,0,
1,0,0,0,0,0,
0,0,54,0,0,5,
194,0,16,0,6,0,
0,0,246,7,16,0,
4,0,0,0,74,0,
0,141,194,0,0,128,
67,85,21,0,114,0,
16,0,7,0,0,0,
150,5,16,0,6,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
1,64,0,0,0,0,
128,193,29,0,0,10,
114,0,16,0,8,0,
0,0,2,64,0,0,
230,174,37,61,230,174,
37,61,230,174,37,61,
0,0,0,0,70,2,
16,0,7,0,0,0,
56,0,0,10,114,0,
16,0,9,0,0,0,
70,2,16,0,7,0,
0,0,2,64,0,0,
145,131,158,61,145,131,
158,61,145,131,158,61,
0,0,0,0,50,0,
0,16,114,0,16,0,
7,0,0,0,70,2,
16,128,129,0,0,0,
7,0,0,0,2,64,
0,0,110,167,114,63,
110,167,114,63,110,167,
114,63,0,0,0,0,
2,64,0,0,25,137,
85,61,25,137,85,61,
25,137,85,61,0,0,
0,0,47,0,0,5,
114,0,16,0,7,0,
0,0,70,2,16,0,
7,0,0,0,56,0,
0,8,114,0,16,0,
7,0,0,0,70,2,
16,0,7,0,0,0,
6,128,32,0,1,0,
0,0,5,0,0,0,
25,0,0,5,114,0,
16,0,7,0,0,0,
70,2,16,0,7,0,
0,0,55,0,0,9,
114,0,16,0,7,0,
0,0,70,2,16,0,
8,0,0,0,70,2,
16,0,9,0,0,0,
70,2,16,0,7,0,
0,0,0,0,0,8,
18,0,16,0,6,0,
0,0,26,0,16,0,
6,0,0,0,42,128,
32,0,1,0,0,0,
0,0,0,0,74,0,
0,141,194,0,0,128,
67,85,21,0,114,0,
16,0,8,0,0,0,
134,0,16,0,6,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
1,64,0,0,0,0,
128,193,29,0,0,10,
114,0,16,0,9,0,
0,0,2,64,0,0,
230,174,37,61,230,174,
37,61,230,174,37,61,
0,0,0,0,70,2,
16,0,8,0,0,0,
56,0,0,10,114,0,
16,0,10,0,0,0,
70,2,16,0,8,0,
0,0,2,64,0,0,
145,131,158,61,145,131,
158,61,145,131,158,61,
0,0,0,0,50,0,
0,16,114,0,16,0,
8,0,0,0,70,2,
16,128,129,0,0,0,
8,0,0,0,2,64,
0,0,110,167,114,63,
110,167,114,63,110,167,
114,63,0,0,0,0,
2,64,0,0,25,137,
85,61,25,137,85,61,
25,137,85,61,0,0,
0,0,47,0,0,5,
114,0,16,0,8,0,
0,0,70,2,16,0,
8,0,0,0,56,0,
0,8,114,0,16,0,
8,0,0,0,70,2,
16,0,8,0,0,0,
6,128,32,0,1,0,
0,0,5,0,0,0,
25,0,0,5,114,0,
16,0,8,0,0,0,
70,2,16,0,8,0,
0,0,55,0,0,9,
114,0,16,0,8,0,
0,0,70,2,16,0,
9,0,0,0,70,2,
16,0,10,0,0,0,
70,2,16,0,8,0,
0,0,74,0,0,141,
194,0,0,128,67,85,
21,0,114,0,16,0,
9,0,0,0,198,0,
16,0,6,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,1,64,
0,0,0,0,128,193,
29,0,0,10,114,0,
16,0,10,0,0,0,
2,64,0,0,230,174,
37,61,230,174,37,61,
230,174,37,61,0,0,
0,0,70,2,16,0,
9,0,0,0,56,0,
0,10,114,0,16,0,
11,0,0,0,70,2,
16,0,9,0,0,0,
2,64,0,0,145,131,
158,61,145,131,158,61,
145,131,158,61,0,0,
0,0,50,0,0,16,
114,0,16,0,9,0,
0,0,70,2,16,128,
129,0,0,0,9,0,
0,0,2,64,0,0,
110,167,114,63,110,167,
114,63,110,167,114,63,
0,0,0,0,2,64,
0,0,25,137,85,61,
25,137,85,61,25,137,
85,61,0,0,0,0,
47,0,0,5,114,0,
16,0,9,0,0,0,
70,2,16,0,9,0,
0,0,56,0,0,8,
114,0,16,0,9,0,
0,0,70,2,16,0,
9,0,0,0,6,128,
32,0,1,0,0,0,
5,0,0,0,25,0,
0,5,114,0,16,0,
9,0,0,0,70,2,
16,0,9,0,0,0,
55,0,0,9,114,0,
16,0,9,0,0,0,
70,2,16,0,10,0,
0,0,70,2,16,0,
11,0,0,0,70,2,
16,0,9,0,0,0,
74,0,0,141,194,0,
0,128,67,85,21,0,
114,0,16,0,6,0,
0,0,214,5,16,0,
6,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,1,64,0,0,
0,0,128,193,29,0,
0,10,114,0,16,0,
10,0,0,0,2,64,
0,0,230,174,37,61,
230,174,37,61,230,174,
37,61,0,0,0,0,
70,2,16,0,6,0,
0,0,56,0,0,10,
114,0,16,0,11,0,
0,0,70,2,16,0,
6,0,0,0,2,64,
0,0,145,131,158,61,
145,131,158,61,145,131,
158,61,0,0,0,0,
50,0,0,16,114,0,
16,0,6,0,0,0,
70,2,16,128,129,0,
0,0,6,0,0,0,
2,64,0,0,110,167,
114,63,110,167,114,63,
110,167,114,63,0,0,
0,0,2,64,0,0,
25,137,85,61,25,137,
85,61,25,137,85,61,
0,0,0,0,47,0,
0,5,114,0,16,0,
6,0,0,0,70,2,
16,0,6,0,0,0,
56,0,0,8,114,0,
16,0,6,0,0,0,
70,2,16,0,6,0,
0,0,6,128,32,0,
1,0,0,0,5,0,
0,0,25,0,0,5,
114,0,16,0,6,0,
0,0,70,2,16,0,
6,0,0,0,55,0,
0,9,114,0,16,0,
6,0,0,0,70,2,
16,0,10,0,0,0,
70,2,16,0,11,0,
0,0,70,2,16,0,
6,0,0,0,74,0,
0,141,194,0,0,128,
67,85,21,0,114,0,
16,0,10,0,0,0,
70,0,16,0,4,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
1,64,0,0,0,0,
128,193,29,0,0,10,
114,0,16,0,11,0,
0,0,2,64,0,0,
230,174,37,61,230,174,
37,61,230,174,37,61,
0,0,0,0,70,2,
16,0,10,0,0,0,
56,0,0,10,114,0,
16,0,12,0,0,0,
70,2,16,0,10,0,
0,0,2,64,0,0,
145,131,158,61,145,131,
158,61,145,131,158,61,
0,0,0,0,50,0,
0,16,114,0,16,0,
10,0,0,0,70,2,
16,128,129,0,0,0,
10,0,0,0,2,64,
0,0,110,167,114,63,
110,167,114,63,110,167,
114,63,0,0,0,0,
2,64,0,0,25,137,
85,61,25,137,85,61,
25,137,85,61,0,0,
0,0,47,0,0,5,
114,0,16,0,10,0,
0,0,70,2,16,0,
10,0,0,0,56,0,
0,8,114,0,16,0,
10,0,0,0,70,2,
16,0,10,0,0,0,
6,128,32,0,1,0,
0,0,5,0,0,0,
25,0,0,5,114,0,
16,0,10,0,0,0,
70,2,16,0,10,0,
0,0,55,0,0,9,
114,0,16,0,10,0,
0,0,70,2,16,0,
11,0,0,0,70,2,
16,0,12,0,0,0,
70,2,16,0,10,0,
0,0,74,0,0,141,
194,0,0,128,67,85,
21,0,114,0,16,0,
4,0,0,0,102,10,
16,0,4,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,1,64,
0,0,0,0,128,193,
29,0,0,10,114,0,
16,0,11,0,0,0,
2,64,0,0,230,174,
37,61,230,174,37,61,
230,174,37,61,0,0,
0,0,70,2,16,0,
4,0,0,0,56,0,
0,10,114,0,16,0,
12,0,0,0,70,2,
16,0,4,0,0,0,
2,64,0,0,145,131,
158,61,145,131,158,61,
145,131,158,61,0,0,
0,0,50,0,0,16,
114,0,16,0,4,0,
0,0,70,2,16,128,
129,0,0,0,4,0,
0,0,2,64,0,0,
110,167,114,63,110,167,
114,63,110,167,114,63,
0,0,0,0,2,64,
0,0,25,137,85,61,
25,137,85,61,25,137,
85,61,0,0,0,0,
47,0,0,5,114,0,
16,0,4,0,0,0,
70,2,16,0,4,0,
0,0,56,0,0,8,
114,0,16,0,4,0,
0,0,70,2,16,0,
4,0,0,0,6,128,
32,0,1,0,0,0,
5,0,0,0,25,0,
0,5,114,0,16,0,
4,0,0,0,70,2,
16,0,4,0,0,0,
55,0,0,9,114,0,
16,0,4,0,0,0,
70,2,16,0,11,0,
0,0,70,2,16,0,
12,0,0,0,70,2,
16,0,4,0,0,0,
0,0,0,8,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,230,10,16,128,
65,0,0,0,2,0,
0,0,56,0,0,7,
66,0,16,0,2,0,
0,0,42,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
51,0,0,7,66,0,
16,0,2,0,0,0,
42,0,16,0,2,0,
0,0,1,64,0,0,
0,0,0,63,56,0,
0,7,66,0,16,0,
2,0,0,0,42,0,
16,0,2,0,0,0,
1,64,0,0,219,15,
201,64,77,0,0,6,
0,208,0,0,66,0,
16,0,2,0,0,0,
42,0,16,0,2,0,
0,0,50,0,0,9,
66,0,16,0,2,0,
0,0,42,0,16,0,
2,0,0,0,1,64,
0,0,0,0,0,63,
1,64,0,0,0,0,
0,63,50,0,0,10,
18,0,16,0,0,0,
0,0,10,0,16,128,
65,0,0,0,0,0,
0,0,42,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
51,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,56,0,
0,7,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
1,64,0,0,219,15,
201,64,77,0,0,6,
0,208,0,0,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,50,0,0,9,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,63,
1,64,0,0,0,0,
0,63,0,0,0,10,
114,0,16,0,11,0,
0,0,86,5,16,0,
0,0,0,0,2,64,
0,0,0,0,128,191,
0,0,0,192,0,0,
64,192,0,0,0,0,
56,0,0,7,34,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,56,0,
0,9,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
10,128,32,128,65,0,
0,0,1,0,0,0,
4,0,0,0,25,0,
0,5,34,0,16,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
56,0,0,7,114,0,
16,0,11,0,0,0,
70,2,16,0,11,0,
0,0,70,2,16,0,
11,0,0,0,56,0,
0,9,114,0,16,0,
11,0,0,0,70,2,
16,0,11,0,0,0,
6,128,32,128,65,0,
0,0,1,0,0,0,
4,0,0,0,25,0,
0,5,114,0,16,0,
11,0,0,0,70,2,
16,0,11,0,0,0,
0,0,0,7,66,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,10,0,16,0,
11,0,0,0,0,0,
0,7,66,0,16,0,
0,0,0,0,26,0,
16,0,11,0,0,0,
42,0,16,0,0,0,
0,0,0,0,0,7,
66,0,16,0,0,0,
0,0,42,0,16,0,
11,0,0,0,42,0,
16,0,0,0,0,0,
14,0,0,10,66,0,
16,0,0,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,0,0,
128,63,42,0,16,0,
0,0,0,0,56,0,
0,7,66,0,16,0,
0,0,0,0,10,0,
16,0,3,0,0,0,
42,0,16,0,0,0,
0,0,56,0,0,7,
66,0,16,0,2,0,
0,0,42,0,16,0,
0,0,0,0,42,0,
16,0,2,0,0,0,
56,0,0,7,18,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,56,0,
0,7,114,0,16,0,
5,0,0,0,70,2,
16,0,5,0,0,0,
6,0,16,0,11,0,
0,0,50,0,0,9,
114,0,16,0,3,0,
0,0,150,7,16,0,
3,0,0,0,86,5,
16,0,0,0,0,0,
70,2,16,0,5,0,
0,0,50,0,0,9,
114,0,16,0,3,0,
0,0,70,2,16,0,
7,0,0,0,86,5,
16,0,11,0,0,0,
70,2,16,0,3,0,
0,0,50,0,0,9,
114,0,16,0,3,0,
0,0,70,2,16,0,
8,0,0,0,166,10,
16,0,11,0,0,0,
70,2,16,0,3,0,
0,0,56,0,0,7,
114,0,16,0,5,0,
0,0,70,2,16,0,
10,0,0,0,6,0,
16,0,11,0,0,0,
50,0,0,9,114,0,
16,0,4,0,0,0,
70,2,16,0,4,0,
0,0,86,5,16,0,
0,0,0,0,70,2,
16,0,5,0,0,0,
50,0,0,9,114,0,
16,0,4,0,0,0,
70,2,16,0,6,0,
0,0,86,5,16,0,
11,0,0,0,70,2,
16,0,4,0,0,0,
50,0,0,9,114,0,
16,0,4,0,0,0,
70,2,16,0,9,0,
0,0,166,10,16,0,
11,0,0,0,70,2,
16,0,4,0,0,0,
56,0,0,7,114,0,
16,0,0,0,0,0,
6,0,16,0,0,0,
0,0,70,2,16,0,
4,0,0,0,50,0,
0,9,114,0,16,0,
0,0,0,0,70,2,
16,0,3,0,0,0,
166,10,16,0,2,0,
0,0,70,2,16,0,
0,0,0,0,31,0,
4,3,42,0,16,0,
1,0,0,0,56,0,
0,7,66,0,16,0,
1,0,0,0,10,0,
16,0,2,0,0,0,
1,64,0,0,171,170,
170,62,26,0,0,5,
66,0,16,0,1,0,
0,0,42,0,16,0,
1,0,0,0,49,0,
0,10,194,0,16,0,
2,0,0,0,166,10,
16,0,1,0,0,0,
2,64,0,0,0,0,
0,0,0,0,0,0,
171,170,170,62,171,170,
42,63,55,0,0,9,
34,0,16,0,3,0,
0,0,58,0,16,0,
2,0,0,0,1,64,
0,0,0,0,128,63,
58,0,16,0,0,0,
0,0,55,0,0,9,
66,0,16,0,3,0,
0,0,58,0,16,0,
2,0,0,0,58,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,55,0,0,9,
18,0,16,0,4,0,
0,0,42,0,16,0,
2,0,0,0,1,64,
0,0,0,0,128,63,
58,0,16,0,0,0,
0,0,55,0,0,9,
98,0,16,0,4,0,
0,0,166,10,16,0,
2,0,0,0,246,15,
16,0,0,0,0,0,
86,6,16,0,3,0,
0,0,18,0,0,1,
56,0,0,10,50,0,
16,0,2,0,0,0,
70,0,16,0,2,0,
0,0,2,64,0,0,
171,170,170,62,93,254,
63,64,0,0,0,0,
0,0,0,0,26,0,
0,5,66,0,16,0,
1,0,0,0,10,0,
16,0,2,0,0,0,
49,0,0,10,82,0,
16,0,2,0,0,0,
166,10,16,0,1,0,
0,0,2,64,0,0,
171,170,170,62,0,0,
0,0,171,170,42,63,
0,0,0,0,55,0,
0,9,34,0,16,0,
3,0,0,0,42,0,
16,0,2,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,55,0,
0,9,66,0,16,0,
3,0,0,0,42,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
128,63,58,0,16,0,
0,0,0,0,54,0,
0,5,66,0,16,0,
1,0,0,0,1,64,
0,0,0,0,128,63,
55,0,0,9,18,0,
16,0,5,0,0,0,
10,0,16,0,2,0,
0,0,58,0,16,0,
0,0,0,0,42,0,
16,0,1,0,0,0,
55,0,0,12,98,0,
16,0,5,0,0,0,
6,0,16,0,2,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
128,63,0,0,128,63,
0,0,0,0,86,6,
16,0,3,0,0,0,
24,0,0,8,66,0,
16,0,1,0,0,0,
1,64,0,0,0,0,
64,64,26,128,32,0,
1,0,0,0,3,0,
0,0,50,0,0,10,
18,0,16,0,2,0,
0,0,10,16,16,0,
0,0,0,0,10,128,
32,0,1,0,0,0,
2,0,0,0,26,0,
16,0,2,0,0,0,
56,0,0,7,18,0,
16,0,2,0,0,0,
10,0,16,0,2,0,
0,0,1,64,0,0,
171,170,42,62,26,0,
0,5,18,0,16,0,
2,0,0,0,10,0,
16,0,2,0,0,0,
49,0,0,10,50,0,
16,0,2,0,0,0,
6,0,16,0,2,0,
0,0,2,64,0,0,
171,170,170,62,171,170,
42,63,0,0,0,0,
0,0,0,0,55,0,
0,9,34,0,16,0,
3,0,0,0,26,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
128,63,58,0,16,0,
0,0,0,0,55,0,
0,9,66,0,16,0,
3,0,0,0,26,0,
16,0,2,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,55,0,
0,9,18,0,16,0,
6,0,0,0,10,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
128,63,58,0,16,0,
0,0,0,0,55,0,
0,9,98,0,16,0,
6,0,0,0,6,0,
16,0,2,0,0,0,
246,15,16,0,0,0,
0,0,86,6,16,0,
3,0,0,0,55,0,
0,12,114,0,16,0,
2,0,0,0,166,10,
16,0,1,0,0,0,
70,2,16,0,6,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,63,0,0,128,63,
0,0,0,0,55,0,
0,9,114,0,16,0,
4,0,0,0,86,5,
16,0,1,0,0,0,
70,2,16,0,5,0,
0,0,70,2,16,0,
2,0,0,0,21,0,
0,1,56,0,0,7,
114,0,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,70,2,
16,0,4,0,0,0,
52,0,0,7,130,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,52,0,
0,7,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,52,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,51,
14,0,0,10,34,0,
16,0,1,0,0,0,
2,64,0,0,0,0,
128,63,0,0,128,63,
0,0,128,63,0,0,
128,63,58,0,16,0,
0,0,0,0,50,0,
0,9,18,0,16,0,
1,0,0,0,58,0,
16,0,0,0,0,0,
58,0,16,0,1,0,
0,0,10,0,16,0,
1,0,0,0,14,0,
0,10,18,0,16,0,
1,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,128,63,
10,0,16,0,1,0,
0,0,56,0,0,7,
242,0,16,0,0,0,
0,0,70,14,16,0,
0,0,0,0,86,1,
16,0,1,0,0,0,
56,0,0,7,114,0,
16,0,0,0,0,0,
246,15,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,49,0,
0,10,114,0,16,0,
1,0,0,0,70,2,
16,0,0,0,0,0,
2,64,0,0,28,46,
77,59,28,46,77,59,
28,46,77,59,0,0,
0,0,56,0,0,10,
114,0,16,0,2,0,
0,0,70,2,16,0,
0,0,0,0,2,64,
0,0,82,184,78,65,
82,184,78,65,82,184,
78,65,0,0,0,0,
47,0,0,5,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,56,0,0,10,
114,0,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,2,64,
0,0,118,84,213,62,
118,84,213,62,118,84,
213,62,0,0,0,0,
25,0,0,5,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,50,0,0,15,
114,0,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,2,64,
0,0,61,10,135,63,
61,10,135,63,61,10,
135,63,0,0,0,0,
2,64,0,0,174,71,
97,189,174,71,97,189,
174,71,97,189,0,0,
0,0,55,0,0,9,
114,32,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,70,2,
16,0,2,0,0,0,
70,2,16,0,0,0,
0,0,54,0,0,5,
130,32,16,0,0,0,
0,0,1,64,0,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,187,0,
0,0,13,0,0,0,
0,0,0,0,2,0,
0,0,147,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
8,0,0,0,0,0,
0,0,3,0,0,0,
25,0,0,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};

}

namespace RetroArch
{
class CrtShadersCrtLottesFastShaderDef : public ShaderDef
{
public:
	CrtShadersCrtLottesFastShaderDef() : ShaderDef{}
	{
		Name = "crt-lottes-fast";
		VertexByteCode = RetroArchCrtShadersCrtLottesFastShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchCrtShadersCrtLottesFastShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchCrtShadersCrtLottesFastShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchCrtShadersCrtLottesFastShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("MASK", -1, 52, 4, 0.000000f, 3.000000f, 1.000000f));
		Params.push_back(ShaderParam("MASK_INTENSITY", -1, 56, 4, 0.000000f, 1.000000f, 0.500000f));
		Params.push_back(ShaderParam("SCANLINE_THINNESS", -1, 60, 4, 0.000000f, 1.000000f, 0.500000f));
		Params.push_back(ShaderParam("SCAN_BLUR", -1, 64, 4, 1.000000f, 3.000000f, 2.500000f));
		Params.push_back(ShaderParam("CURVATURE", -1, 68, 4, 0.000000f, 0.250000f, 0.020000f));
		Params.push_back(ShaderParam("TRINITRON_CURVE", -1, 72, 4, 0.000000f, 1.000000f, 0.000000f));
		Params.push_back(ShaderParam("CORNER", -1, 76, 4, 0.000000f, 11.000000f, 3.000000f));
		Params.push_back(ShaderParam("CRT_GAMMA", -1, 80, 4, 0.000000f, 51.000000f, 2.400000f));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
