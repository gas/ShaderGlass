/*
ShaderGlass shader nes_raw_palette-shaders-gtu-famicom\lowPass imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/nes_raw_palette/shaders/gtu-famicom/lowPass.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

//#include "config.h
////////////////////////////////////////////////////////
//  GTU-famicom version 0.50
//  Author: aliaspider - aliaspider@gmail.com
//  License: GPLv3
////////////////////////////////////////////////////////

*/

#pragma once

namespace RetroArchNes_raw_paletteShadersGtuFamicomLowPassShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,240,33,
100,15,17,198,103,219,
19,18,162,104,188,245,
126,204,1,0,0,0,
88,10,0,0,5,0,
0,0,52,0,0,0,
88,3,0,0,140,3,
0,0,192,3,0,0,
188,9,0,0,82,68,
69,70,28,3,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
244,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,7,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,232,1,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,4,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,40,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
4,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
60,2,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,4,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,78,2,
0,0,48,0,0,0,
4,0,0,0,2,0,
0,0,108,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,144,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
108,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
160,2,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,108,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,181,2,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,208,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,79,117,116,
112,117,116,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,250,1,0,0,
112,97,114,97,109,115,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,112,97,114,97,
109,115,95,115,105,103,
110,97,108,82,101,115,
111,108,117,116,105,111,
110,0,102,108,111,97,
116,0,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,102,2,
0,0,112,97,114,97,
109,115,95,97,100,100,
78,111,105,115,101,0,
112,97,114,97,109,115,
95,110,111,105,115,101,
83,116,114,101,110,103,
116,104,0,112,97,114,
97,109,115,95,70,114,
97,109,101,67,111,117,
110,116,0,100,119,111,
114,100,0,171,171,171,
0,0,19,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,199,2,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,244,5,
0,0,80,0,0,0,
125,1,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,4,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,4,0,0,0,
56,0,0,8,50,0,
16,0,0,0,0,0,
70,16,16,0,0,0,
0,0,70,128,32,0,
1,0,0,0,2,0,
0,0,50,0,0,10,
66,0,16,0,0,0,
0,0,10,16,16,0,
0,0,0,0,10,128,
32,0,1,0,0,0,
2,0,0,0,1,64,
0,0,168,0,0,191,
26,0,0,5,66,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,14,0,0,9,
130,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,2,0,
0,0,10,128,32,0,
1,0,0,0,3,0,
0,0,0,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,168,0,0,63,
66,0,0,5,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,51,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,0,0,127,67,
0,0,0,8,18,0,
16,0,1,0,0,0,
58,0,16,128,65,0,
0,0,0,0,0,0,
1,64,0,0,0,0,
128,63,0,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
56,0,0,9,34,0,
16,0,1,0,0,0,
42,128,32,0,1,0,
0,0,2,0,0,0,
10,128,32,0,1,0,
0,0,3,0,0,0,
56,0,0,7,66,0,
16,0,1,0,0,0,
26,0,16,0,1,0,
0,0,1,64,0,0,
219,15,73,64,14,0,
0,10,130,0,16,0,
1,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,128,63,
26,0,16,0,1,0,
0,0,14,0,0,7,
34,0,16,0,1,0,
0,0,1,64,0,0,
0,0,128,191,26,0,
16,0,1,0,0,0,
54,0,0,5,34,0,
16,0,2,0,0,0,
26,16,16,0,0,0,
0,0,54,0,0,5,
66,0,16,0,2,0,
0,0,1,64,0,0,
0,0,0,0,54,0,
0,5,130,0,16,0,
2,0,0,0,10,0,
16,0,1,0,0,0,
48,0,0,1,29,0,
0,7,18,0,16,0,
3,0,0,0,58,0,
16,0,2,0,0,0,
58,0,16,0,0,0,
0,0,3,0,4,3,
10,0,16,0,3,0,
0,0,0,0,0,8,
18,0,16,0,3,0,
0,0,42,0,16,0,
0,0,0,0,58,0,
16,128,65,0,0,0,
2,0,0,0,14,0,
0,8,34,0,16,0,
3,0,0,0,10,0,
16,0,3,0,0,0,
10,128,32,0,1,0,
0,0,2,0,0,0,
0,0,0,8,18,0,
16,0,2,0,0,0,
26,0,16,128,65,0,
0,0,3,0,0,0,
10,16,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,18,0,16,0,
2,0,0,0,70,0,
16,0,2,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,0,0,
0,11,50,0,16,0,
3,0,0,0,6,0,
16,128,129,0,0,0,
3,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,191,0,0,
0,0,0,0,0,0,
51,0,0,7,18,0,
16,0,3,0,0,0,
58,0,16,0,1,0,
0,0,10,0,16,0,
3,0,0,0,56,0,
0,7,66,0,16,0,
3,0,0,0,42,0,
16,0,1,0,0,0,
10,0,16,0,3,0,
0,0,77,0,0,6,
66,0,16,0,3,0,
0,0,0,208,0,0,
42,0,16,0,3,0,
0,0,50,0,0,9,
18,0,16,0,3,0,
0,0,42,0,16,0,
1,0,0,0,10,0,
16,0,3,0,0,0,
42,0,16,0,3,0,
0,0,52,0,0,7,
34,0,16,0,3,0,
0,0,26,0,16,0,
1,0,0,0,26,0,
16,0,3,0,0,0,
51,0,0,7,34,0,
16,0,3,0,0,0,
58,0,16,0,1,0,
0,0,26,0,16,0,
3,0,0,0,56,0,
0,7,66,0,16,0,
3,0,0,0,42,0,
16,0,1,0,0,0,
26,0,16,0,3,0,
0,0,50,0,0,10,
18,0,16,0,3,0,
0,0,42,0,16,128,
65,0,0,0,1,0,
0,0,26,0,16,0,
3,0,0,0,10,0,
16,0,3,0,0,0,
77,0,0,7,34,0,
16,0,3,0,0,0,
0,208,0,0,42,0,
16,128,65,0,0,0,
3,0,0,0,0,0,
0,7,18,0,16,0,
3,0,0,0,26,0,
16,0,3,0,0,0,
10,0,16,0,3,0,
0,0,56,0,0,7,
18,0,16,0,2,0,
0,0,10,0,16,0,
2,0,0,0,10,0,
16,0,3,0,0,0,
50,0,0,9,66,0,
16,0,2,0,0,0,
10,0,16,0,2,0,
0,0,1,64,0,0,
131,249,34,62,42,0,
16,0,2,0,0,0,
0,0,0,7,130,0,
16,0,2,0,0,0,
58,0,16,0,2,0,
0,0,1,64,0,0,
0,0,128,63,22,0,
0,1,49,0,0,8,
66,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
3,0,0,0,0,0,
0,7,130,0,16,0,
0,0,0,0,42,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
0,191,56,0,0,7,
18,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
86,0,0,6,34,0,
16,0,0,0,0,0,
58,128,32,0,1,0,
0,0,3,0,0,0,
15,0,0,10,18,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,2,64,0,0,
57,214,79,65,76,119,
156,66,0,0,0,0,
0,0,0,0,77,0,
0,6,18,0,16,0,
0,0,0,0,0,208,
0,0,10,0,16,0,
0,0,0,0,56,0,
0,7,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
1,64,0,0,140,238,
42,71,26,0,0,5,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,0,0,
0,7,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
1,64,0,0,168,0,
0,191,50,0,0,10,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,42,128,
32,0,1,0,0,0,
3,0,0,0,58,0,
16,0,0,0,0,0,
0,0,0,7,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,63,55,0,
0,9,242,32,16,0,
0,0,0,0,166,10,
16,0,0,0,0,0,
6,0,16,0,0,0,
0,0,166,10,16,0,
2,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,51,0,
0,0,4,0,0,0,
0,0,0,0,2,0,
0,0,41,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};

}

namespace RetroArch
{
class Nes_raw_paletteShadersGtuFamicomLowPassShaderDef : public ShaderDef
{
public:
	Nes_raw_paletteShadersGtuFamicomLowPassShaderDef() : ShaderDef{}
	{
		Name = "lowPass";
		VertexByteCode = RetroArchNes_raw_paletteShadersGtuFamicomLowPassShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchNes_raw_paletteShadersGtuFamicomLowPassShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchNes_raw_paletteShadersGtuFamicomLowPassShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchNes_raw_paletteShadersGtuFamicomLowPassShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("signalResolution", -1, 48, 4, 20.000000f, 2000.000000f, 700.000000f));
		Params.push_back(ShaderParam("addNoise", -1, 52, 4, 0.000000f, 1.000000f, 0.000000f));
		Params.push_back(ShaderParam("noiseStrength", -1, 56, 4, 0.000000f, 1.000000f, 0.000000f));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("SourceSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OutputSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("FrameCount", -1, 60, 4, 0.000000f, 0.000000f, 0.000000f));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
