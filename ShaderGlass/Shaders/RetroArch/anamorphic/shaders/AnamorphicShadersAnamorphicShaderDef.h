/*
ShaderGlass shader anamorphic-shaders\anamorphic imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/anamorphic/shaders/anamorphic.slang
See original file for credits and usage license. 
This file is auto-generated, do not modify directly.
*/

#pragma once

namespace RetroArchAnamorphicShadersAnamorphicShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,110,239,
1,38,44,138,120,137,
121,214,212,137,93,170,
129,5,1,0,0,0,
140,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
240,2,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,8,1,
0,0,80,0,1,0,
66,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,6,0,
0,0,1,0,0,0,
0,0,0,0,4,0,
0,0,4,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,122,222,
74,53,9,143,19,118,
118,72,230,243,219,119,
210,251,1,0,0,0,
128,11,0,0,5,0,
0,0,52,0,0,0,
112,3,0,0,164,3,
0,0,216,3,0,0,
228,10,0,0,82,68,
69,70,52,3,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
11,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,9,0,0,0,
208,0,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,56,2,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,84,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,120,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
84,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
140,2,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,84,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,158,2,
0,0,48,0,0,0,
4,0,0,0,2,0,
0,0,176,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,212,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
176,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
223,2,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,176,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,234,2,
0,0,60,0,0,0,
4,0,0,0,2,0,
0,0,176,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,245,2,0,0,
64,0,0,0,4,0,
0,0,2,0,0,0,
176,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
0,3,0,0,68,0,
0,0,4,0,0,0,
2,0,0,0,176,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,112,97,
114,97,109,115,95,83,
111,117,114,99,101,83,
105,122,101,0,102,108,
111,97,116,52,0,171,
171,171,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,74,2,
0,0,112,97,114,97,
109,115,95,79,114,105,
103,105,110,97,108,83,
105,122,101,0,112,97,
114,97,109,115,95,79,
117,116,112,117,116,83,
105,122,101,0,112,97,
114,97,109,115,95,101,
120,99,0,102,108,111,
97,116,0,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
169,2,0,0,112,97,
114,97,109,115,95,117,
112,99,0,112,97,114,
97,109,115,95,98,116,
99,0,112,97,114,97,
109,115,95,101,120,112,
0,112,97,114,97,109,
115,95,118,117,99,0,
112,97,114,97,109,115,
95,118,97,98,0,77,
105,99,114,111,115,111,
102,116,32,40,82,41,
32,72,76,83,76,32,
83,104,97,100,101,114,
32,67,111,109,112,105,
108,101,114,32,49,48,
46,49,0,171,73,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,4,7,
0,0,80,0,0,0,
193,1,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,5,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,2,0,0,0,
50,0,0,15,50,0,
16,0,0,0,0,0,
70,16,16,0,0,0,
0,0,2,64,0,0,
0,0,0,64,0,0,
0,64,0,0,0,0,
0,0,0,0,2,64,
0,0,0,0,128,191,
0,0,128,191,0,0,
0,0,0,0,0,0,
50,0,0,10,66,0,
16,0,0,0,0,0,
26,0,16,128,193,0,
0,0,0,0,0,0,
1,64,0,0,80,119,
214,61,1,64,0,0,
123,20,126,63,14,0,
0,7,66,0,16,0,
0,0,0,0,1,64,
0,0,22,49,101,63,
42,0,16,0,0,0,
0,0,29,0,0,8,
130,0,16,0,0,0,
0,0,26,0,16,128,
129,0,0,0,0,0,
0,0,1,64,0,0,
205,204,108,63,55,0,
0,9,66,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,56,0,
0,7,66,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,56,0,0,7,
34,0,16,0,1,0,
0,0,42,0,16,0,
0,0,0,0,1,64,
0,0,123,20,126,63,
24,0,0,8,66,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,58,128,32,0,
1,0,0,0,3,0,
0,0,56,0,0,7,
130,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,1,64,
0,0,16,88,129,63,
50,0,0,10,66,0,
16,0,1,0,0,0,
58,0,16,128,193,0,
0,0,0,0,0,0,
1,64,0,0,146,10,
134,190,1,64,0,0,
156,196,128,63,14,0,
0,7,66,0,16,0,
1,0,0,0,1,64,
0,0,164,130,161,63,
42,0,16,0,1,0,
0,0,29,0,0,8,
130,0,16,0,1,0,
0,0,58,0,16,128,
129,0,0,0,0,0,
0,0,1,64,0,0,
164,112,125,63,55,0,
0,9,66,0,16,0,
1,0,0,0,58,0,
16,0,1,0,0,0,
42,0,16,0,1,0,
0,0,1,64,0,0,
0,0,128,63,56,0,
0,7,18,0,16,0,
1,0,0,0,58,0,
16,0,0,0,0,0,
42,0,16,0,1,0,
0,0,55,0,0,9,
50,0,16,0,0,0,
0,0,166,10,16,0,
0,0,0,0,70,0,
16,0,1,0,0,0,
70,0,16,0,0,0,
0,0,56,0,0,8,
66,0,16,0,0,0,
0,0,1,64,0,0,
53,250,14,60,10,128,
32,0,1,0,0,0,
4,0,0,0,50,0,
0,10,66,0,16,0,
0,0,0,0,42,0,
16,128,1,0,0,0,
0,0,0,0,26,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,50,0,0,10,
130,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,4,0,
0,0,1,64,0,0,
53,250,14,60,1,64,
0,0,0,0,128,63,
14,0,0,7,66,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,42,0,16,0,
0,0,0,0,29,0,
0,7,130,0,16,0,
0,0,0,0,1,64,
0,0,0,0,0,0,
26,0,16,0,0,0,
0,0,55,0,0,9,
66,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,57,0,0,11,
50,0,16,0,1,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
128,63,0,0,0,0,
0,0,0,0,70,128,
32,0,1,0,0,0,
4,0,0,0,55,0,
0,9,66,0,16,0,
0,0,0,0,10,0,
16,0,1,0,0,0,
42,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,56,0,
0,7,34,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,0,0,0,9,
66,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,26,128,
32,128,65,0,0,0,
1,0,0,0,4,0,
0,0,50,0,0,10,
66,0,16,0,0,0,
0,0,42,0,16,128,
65,0,0,0,0,0,
0,0,1,64,0,0,
205,204,204,61,1,64,
0,0,0,0,128,63,
50,0,0,10,66,0,
16,0,0,0,0,0,
26,0,16,128,65,0,
0,0,0,0,0,0,
1,64,0,0,80,119,
214,61,42,0,16,0,
0,0,0,0,14,0,
0,7,66,0,16,0,
0,0,0,0,1,64,
0,0,22,49,101,63,
42,0,16,0,0,0,
0,0,29,0,0,8,
130,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
4,0,0,0,55,0,
0,9,66,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
42,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,55,0,
0,9,66,0,16,0,
0,0,0,0,26,0,
16,0,1,0,0,0,
42,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,56,0,
0,7,34,0,16,0,
1,0,0,0,42,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,56,0,0,8,
34,0,16,0,0,0,
0,0,1,64,0,0,
53,250,142,60,10,128,
32,0,1,0,0,0,
3,0,0,0,50,0,
0,11,34,0,16,0,
0,0,0,0,26,0,
16,128,1,0,0,0,
0,0,0,0,10,0,
16,128,129,0,0,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
50,0,0,10,66,0,
16,0,0,0,0,0,
10,128,32,0,1,0,
0,0,3,0,0,0,
1,64,0,0,53,250,
142,60,1,64,0,0,
0,0,128,63,14,0,
0,7,34,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,57,0,0,8,
66,0,16,0,0,0,
0,0,1,64,0,0,
0,0,0,0,10,128,
32,0,1,0,0,0,
3,0,0,0,55,0,
0,9,34,0,16,0,
0,0,0,0,42,0,
16,0,0,0,0,0,
26,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,56,0,
0,7,18,0,16,0,
1,0,0,0,26,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,50,0,0,15,
50,0,16,0,0,0,
0,0,70,0,16,0,
1,0,0,0,2,64,
0,0,0,0,0,63,
0,0,0,63,0,0,
0,0,0,0,0,0,
2,64,0,0,0,0,
0,63,0,0,0,63,
0,0,0,0,0,0,
0,0,50,0,0,11,
130,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,4,0,
0,0,1,64,0,0,
51,51,115,63,26,128,
32,0,1,0,0,0,
3,0,0,0,50,0,
0,9,34,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
1,64,0,0,10,215,
35,60,26,0,16,0,
0,0,0,0,0,0,
0,9,130,0,16,0,
0,0,0,0,42,128,
32,0,1,0,0,0,
3,0,0,0,26,128,
32,0,1,0,0,0,
3,0,0,0,50,0,
0,10,130,0,16,0,
0,0,0,0,10,128,
32,0,1,0,0,0,
4,0,0,0,1,64,
0,0,51,51,115,63,
58,0,16,0,0,0,
0,0,50,0,0,9,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,10,215,35,60,
1,64,0,0,0,0,
128,63,14,0,0,7,
66,0,16,0,0,0,
0,0,26,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,0,0,
0,0,134,0,16,0,
0,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,54,0,0,5,
114,32,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,54,0,
0,5,130,32,16,0,
0,0,0,0,1,64,
0,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
50,0,0,0,2,0,
0,0,0,0,0,0,
2,0,0,0,38,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,2,0,
0,0,8,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};

}

namespace RetroArch
{
class AnamorphicShadersAnamorphicShaderDef : public ShaderDef
{
public:
	AnamorphicShadersAnamorphicShaderDef() : ShaderDef{}
	{
		Name = "anamorphic";
		VertexByteCode = RetroArchAnamorphicShadersAnamorphicShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchAnamorphicShadersAnamorphicShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchAnamorphicShadersAnamorphicShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchAnamorphicShadersAnamorphicShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("exc", -1, 48, 4, -10.000000f, 10.000000f, 0.000000f));
		Params.push_back(ShaderParam("exp", -1, 60, 4, 0.000000f, 1.000000f, 1.000000f));
		Params.push_back(ShaderParam("vuc", -1, 64, 4, 0.000000f, 10.000000f, 0.000000f));
		Params.push_back(ShaderParam("vab", -1, 68, 4, 0.500000f, 1.000000f, 1.000000f));
		Params.push_back(ShaderParam("upc", -1, 52, 4, 0.000000f, 10.000000f, 0.000000f));
		Params.push_back(ShaderParam("btc", -1, 56, 4, 0.000000f, 10.000000f, 0.000000f));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
