/*
ShaderGlass shader ntsc-shaders\ntsc-gauss-pass imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/ntsc/shaders/ntsc-gauss-pass.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

*/

#pragma once

namespace RetroArchNtscShadersNtscGaussPassShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,84,93,
191,172,169,130,57,23,
3,74,71,233,108,136,
6,96,1,0,0,0,
112,6,0,0,5,0,
0,0,52,0,0,0,
124,3,0,0,200,3,
0,0,80,4,0,0,
212,5,0,0,82,68,
69,70,64,3,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
21,3,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,6,0,0,0,
24,1,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,8,2,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,36,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,72,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
36,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
95,2,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,36,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,116,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,144,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,180,2,0,0,
52,0,0,0,4,0,
0,0,0,0,0,0,
212,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
248,2,0,0,56,0,
0,0,4,0,0,0,
0,0,0,0,212,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,114,101,
103,105,115,116,101,114,
115,95,79,117,116,112,
117,116,83,105,122,101,
0,102,108,111,97,116,
52,0,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,29,2,
0,0,114,101,103,105,
115,116,101,114,115,95,
79,114,105,103,105,110,
97,108,83,105,122,101,
0,114,101,103,105,115,
116,101,114,115,95,83,
111,117,114,99,101,83,
105,122,101,0,114,101,
103,105,115,116,101,114,
115,95,70,114,97,109,
101,67,111,117,110,116,
0,100,119,111,114,100,
0,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,137,2,
0,0,114,101,103,105,
115,116,101,114,115,95,
78,84,83,67,95,67,
82,84,95,71,65,77,
77,65,0,102,108,111,
97,116,0,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
205,2,0,0,114,101,
103,105,115,116,101,114,
115,95,78,84,83,67,
95,68,73,83,80,76,
65,89,95,71,65,77,
77,65,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,171,171,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
128,0,0,0,4,0,
0,0,8,0,0,0,
104,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
104,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,12,3,0,0,
104,0,0,0,2,0,
0,0,0,0,0,0,
3,0,0,0,1,0,
0,0,3,12,0,0,
113,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,2,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,124,1,
0,0,80,0,1,0,
95,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
89,0,0,4,70,142,
32,0,1,0,0,0,
3,0,0,0,95,0,
0,3,242,16,16,0,
0,0,0,0,95,0,
0,3,50,16,16,0,
1,0,0,0,101,0,
0,3,50,32,16,0,
0,0,0,0,101,0,
0,3,194,32,16,0,
0,0,0,0,101,0,
0,3,50,32,16,0,
1,0,0,0,103,0,
0,4,242,32,16,0,
2,0,0,0,1,0,
0,0,104,0,0,2,
1,0,0,0,14,0,
0,11,194,32,16,0,
0,0,0,0,2,64,
0,0,0,0,128,63,
0,0,128,63,0,0,
128,63,0,0,128,63,
6,132,32,0,1,0,
0,0,2,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,56,0,0,8,
50,32,16,0,1,0,
0,0,70,16,16,0,
1,0,0,0,70,128,
32,0,1,0,0,0,
2,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,2,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
8,0,0,0,1,0,
0,0,0,0,0,0,
6,0,0,0,6,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,226,43,
118,40,53,66,73,62,
82,239,210,14,193,90,
35,85,1,0,0,0,
144,10,0,0,5,0,
0,0,52,0,0,0,
52,3,0,0,152,3,
0,0,204,3,0,0,
244,9,0,0,82,68,
69,70,248,2,0,0,
1,0,0,0,184,0,
0,0,3,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
205,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
156,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,172,0,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,2,0,
0,0,1,0,0,0,
13,0,0,0,179,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,0,0,0,0,
95,83,111,117,114,99,
101,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,80,
117,115,104,0,179,0,
0,0,6,0,0,0,
208,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,192,1,
0,0,0,0,0,0,
16,0,0,0,0,0,
0,0,220,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,0,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
220,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
23,2,0,0,32,0,
0,0,16,0,0,0,
0,0,0,0,220,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,44,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,72,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,108,2,0,0,
52,0,0,0,4,0,
0,0,2,0,0,0,
140,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
176,2,0,0,56,0,
0,0,4,0,0,0,
2,0,0,0,140,2,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,114,101,
103,105,115,116,101,114,
115,95,79,117,116,112,
117,116,83,105,122,101,
0,102,108,111,97,116,
52,0,1,0,3,0,
1,0,4,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,213,1,
0,0,114,101,103,105,
115,116,101,114,115,95,
79,114,105,103,105,110,
97,108,83,105,122,101,
0,114,101,103,105,115,
116,101,114,115,95,83,
111,117,114,99,101,83,
105,122,101,0,114,101,
103,105,115,116,101,114,
115,95,70,114,97,109,
101,67,111,117,110,116,
0,100,119,111,114,100,
0,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,65,2,
0,0,114,101,103,105,
115,116,101,114,115,95,
78,84,83,67,95,67,
82,84,95,71,65,77,
77,65,0,102,108,111,
97,116,0,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
133,2,0,0,114,101,
103,105,115,116,101,114,
115,95,78,84,83,67,
95,68,73,83,80,76,
65,89,95,71,65,77,
77,65,0,77,105,99,
114,111,115,111,102,116,
32,40,82,41,32,72,
76,83,76,32,83,104,
97,100,101,114,32,67,
111,109,112,105,108,101,
114,32,49,48,46,49,
0,171,171,171,73,83,
71,78,92,0,0,0,
3,0,0,0,8,0,
0,0,80,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,3,3,
0,0,80,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,12,8,
0,0,80,0,0,0,
2,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,2,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,15,0,0,0,
83,86,95,84,97,114,
103,101,116,0,171,171,
83,72,69,88,32,6,
0,0,80,0,0,0,
136,1,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,1,0,
0,0,4,0,0,0,
90,0,0,3,0,96,
16,0,2,0,0,0,
88,24,0,4,0,112,
16,0,2,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,98,16,
0,3,130,16,16,0,
0,0,0,0,98,16,
0,3,34,16,16,0,
1,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,3,0,0,0,
56,0,0,7,34,0,
16,0,0,0,0,0,
58,16,16,0,0,0,
0,0,1,64,0,0,
0,0,0,192,54,0,
0,8,82,0,16,0,
0,0,0,0,2,64,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,7,50,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,70,16,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,1,0,0,0,
70,0,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
47,0,0,5,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,56,0,0,8,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,86,133,
32,0,1,0,0,0,
3,0,0,0,25,0,
0,5,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
54,0,0,6,130,0,
16,0,0,0,0,0,
58,16,16,128,65,0,
0,0,0,0,0,0,
0,0,0,7,50,0,
16,0,0,0,0,0,
230,10,16,0,0,0,
0,0,70,16,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,0,0,0,0,
70,0,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
47,0,0,5,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,56,0,0,8,
114,0,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,86,133,
32,0,1,0,0,0,
3,0,0,0,25,0,
0,5,114,0,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
26,0,0,5,130,0,
16,0,0,0,0,0,
26,16,16,0,1,0,
0,0,0,0,0,10,
242,0,16,0,2,0,
0,0,246,15,16,0,
0,0,0,0,2,64,
0,0,0,0,192,63,
0,0,0,63,0,0,
0,191,0,0,192,191,
0,0,0,7,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,32,192,56,0,
0,7,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,56,0,0,7,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,1,64,
0,0,202,212,230,192,
25,0,0,5,130,0,
16,0,0,0,0,0,
58,0,16,0,0,0,
0,0,56,0,0,7,
242,0,16,0,2,0,
0,0,70,14,16,0,
2,0,0,0,70,14,
16,0,2,0,0,0,
56,0,0,10,242,0,
16,0,2,0,0,0,
70,14,16,0,2,0,
0,0,2,64,0,0,
202,212,230,192,202,212,
230,192,202,212,230,192,
202,212,230,192,25,0,
0,5,242,0,16,0,
2,0,0,0,70,14,
16,0,2,0,0,0,
56,0,0,7,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,86,5,16,0,
2,0,0,0,50,0,
0,9,114,0,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
6,0,16,0,2,0,
0,0,70,2,16,0,
0,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,1,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
47,0,0,5,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,56,0,0,8,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,86,133,
32,0,1,0,0,0,
3,0,0,0,25,0,
0,5,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
50,0,0,9,114,0,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,166,10,16,0,
2,0,0,0,70,2,
16,0,0,0,0,0,
54,0,0,5,34,0,
16,0,1,0,0,0,
58,16,16,0,0,0,
0,0,54,0,0,8,
82,0,16,0,1,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,7,50,0,16,0,
1,0,0,0,70,0,
16,0,1,0,0,0,
70,16,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
2,0,0,0,70,0,
16,0,1,0,0,0,
70,126,16,0,2,0,
0,0,0,96,16,0,
2,0,0,0,47,0,
0,5,114,0,16,0,
2,0,0,0,70,2,
16,0,2,0,0,0,
56,0,0,8,114,0,
16,0,2,0,0,0,
70,2,16,0,2,0,
0,0,86,133,32,0,
1,0,0,0,3,0,
0,0,25,0,0,5,
114,0,16,0,2,0,
0,0,70,2,16,0,
2,0,0,0,50,0,
0,9,114,0,16,0,
0,0,0,0,70,2,
16,0,2,0,0,0,
246,15,16,0,2,0,
0,0,70,2,16,0,
0,0,0,0,56,0,
0,7,130,0,16,0,
1,0,0,0,58,16,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,64,0,0,0,7,
50,0,16,0,1,0,
0,0,230,10,16,0,
1,0,0,0,70,16,
16,0,0,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,1,0,
0,0,70,0,16,0,
1,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,47,0,0,5,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,56,0,
0,8,114,0,16,0,
1,0,0,0,70,2,
16,0,1,0,0,0,
86,133,32,0,1,0,
0,0,3,0,0,0,
25,0,0,5,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,50,0,0,9,
114,0,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,246,15,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,56,0,0,10,
114,0,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,2,64,
0,0,51,51,147,63,
51,51,147,63,51,51,
147,63,0,0,0,0,
47,0,0,5,114,0,
16,0,0,0,0,0,
70,2,16,0,0,0,
0,0,14,0,0,11,
130,0,16,0,0,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,63,0,0,128,63,
0,0,128,63,42,128,
32,0,1,0,0,0,
3,0,0,0,56,0,
0,7,114,0,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
246,15,16,0,0,0,
0,0,25,0,0,5,
114,32,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,54,0,
0,5,130,32,16,0,
0,0,0,0,1,64,
0,0,0,0,128,63,
62,0,0,1,83,84,
65,84,148,0,0,0,
51,0,0,0,3,0,
0,0,0,0,0,0,
4,0,0,0,41,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,5,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,4,0,
0,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};

}

namespace RetroArch
{
class NtscShadersNtscGaussPassShaderDef : public ShaderDef
{
public:
	NtscShadersNtscGaussPassShaderDef() : ShaderDef{}
	{
		Name = "ntsc-gauss-pass";
		VertexByteCode = RetroArchNtscShadersNtscGaussPassShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchNtscShadersNtscGaussPassShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchNtscShadersNtscGaussPassShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchNtscShadersNtscGaussPassShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("NTSC_CRT_GAMMA", -1, 52, 4, 0.000000f, 10.000000f, 2.500000f, 0.100000f, "NTSC CRT Gamma"));
		Params.push_back(ShaderParam("NTSC_DISPLAY_GAMMA", -1, 56, 4, 0.000000f, 10.000000f, 2.100000f, 0.100000f, "NTSC Display Gamma"));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("SourceSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("OutputSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f, 0.000000f, ""));
		Samplers.push_back(ShaderSampler("Source", 2));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
