/*
ShaderGlass shader ntsc-shaders-artifact-colors\artifact-colors2 imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/ntsc/shaders/artifact-colors/artifact-colors2.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.


Adapted for RetroArch from Flyguy's "Apple II-Like Artifact Colors" from shadertoy:
https://www.shadertoy.com/view/llyGzR

Colors created through NTSC artifacting on 4-bit patterns, similar to the Apple II's lo-res mode.

//Composite color artifact simulator
//Change Buf A to change the input image.
//#define HUE 0.0 // moved to parameter
//#define SATURATION 30.0 // moved to parameter
//#define BRIGHTNESS 1.0 // moved to parameter
//#define F_COL (1.0 / 4.0) // moved to parameter
//#define F_LUMA_LP (1.0 / 6.0) // moved to parameter
//#define FIR_SIZE 29  // moved to parameter
//Angle -> 2D rotation matrix
//Non-normalized texture sampling.
//https://en.wikipedia.org/wiki/Window_function
//FIR lowpass filter
//Fc = Cutoff freq., Fs = Sample freq., N = # of taps, i = Tap index
//Filtering out unwanted high freqency content from the chroma(IQ) signal.

*/

#pragma once

namespace RetroArchNtscShadersArtifactColorsArtifactColors2ShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,238,82,
227,84,228,181,62,138,
58,62,216,58,22,135,
16,149,1,0,0,0,
160,3,0,0,5,0,
0,0,52,0,0,0,
60,1,0,0,136,1,
0,0,224,1,0,0,
4,3,0,0,82,68,
69,70,0,1,0,0,
1,0,0,0,96,0,
0,0,1,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
216,0,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,85,66,79,0,
92,0,0,0,1,0,
0,0,120,0,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
160,0,0,0,0,0,
0,0,64,0,0,0,
2,0,0,0,180,0,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,103,108,
111,98,97,108,95,77,
86,80,0,102,108,111,
97,116,52,120,52,0,
2,0,3,0,4,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,171,0,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
80,0,0,0,2,0,
0,0,8,0,0,0,
56,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
65,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,28,1,
0,0,80,0,1,0,
71,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
95,0,0,3,242,16,
16,0,0,0,0,0,
95,0,0,3,50,16,
16,0,1,0,0,0,
101,0,0,3,50,32,
16,0,0,0,0,0,
103,0,0,4,242,32,
16,0,1,0,0,0,
1,0,0,0,104,0,
0,2,1,0,0,0,
56,0,0,10,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,2,64,0,0,
27,13,128,63,27,13,
128,63,0,0,0,0,
0,0,0,0,56,0,
0,8,242,0,16,0,
0,0,0,0,86,21,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,1,0,0,0,
50,0,0,10,242,0,
16,0,0,0,0,0,
6,16,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,0,0,
0,0,70,14,16,0,
0,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,166,26,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,2,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,32,16,0,1,0,
0,0,246,31,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
3,0,0,0,70,14,
16,0,0,0,0,0,
62,0,0,1,83,84,
65,84,148,0,0,0,
6,0,0,0,1,0,
0,0,0,0,0,0,
4,0,0,0,5,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,75,37,
151,246,76,119,198,167,
195,56,22,203,234,92,
149,128,1,0,0,0,
196,13,0,0,5,0,
0,0,52,0,0,0,
184,4,0,0,236,4,
0,0,32,5,0,0,
40,13,0,0,82,68,
69,70,124,4,0,0,
1,0,0,0,16,1,
0,0,5,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
84,4,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
220,0,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,236,0,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,5,0,
0,0,1,0,0,0,
1,0,0,0,251,0,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
2,0,0,0,1,0,
0,0,13,0,0,0,
2,1,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,5,0,0,0,
1,0,0,0,13,0,
0,0,8,1,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,95,83,
111,117,114,99,101,95,
115,97,109,112,108,101,
114,0,95,80,97,115,
115,49,95,115,97,109,
112,108,101,114,0,83,
111,117,114,99,101,0,
80,97,115,115,49,0,
80,117,115,104,0,171,
171,171,8,1,0,0,
12,0,0,0,40,1,
0,0,96,0,0,0,
0,0,0,0,0,0,
0,0,8,3,0,0,
0,0,0,0,16,0,
0,0,2,0,0,0,
36,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
72,3,0,0,16,0,
0,0,16,0,0,0,
0,0,0,0,36,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,92,3,
0,0,32,0,0,0,
16,0,0,0,2,0,
0,0,36,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,110,3,0,0,
48,0,0,0,4,0,
0,0,0,0,0,0,
136,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
172,3,0,0,52,0,
0,0,4,0,0,0,
2,0,0,0,196,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,232,3,
0,0,56,0,0,0,
4,0,0,0,0,0,
0,0,196,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,245,3,0,0,
60,0,0,0,4,0,
0,0,2,0,0,0,
196,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
7,4,0,0,64,0,
0,0,4,0,0,0,
2,0,0,0,196,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,25,4,
0,0,68,0,0,0,
4,0,0,0,2,0,
0,0,196,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,42,4,0,0,
72,0,0,0,4,0,
0,0,2,0,0,0,
196,3,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
53,4,0,0,76,0,
0,0,4,0,0,0,
2,0,0,0,196,3,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,66,4,
0,0,80,0,0,0,
4,0,0,0,2,0,
0,0,196,3,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,26,3,0,0,
112,97,114,97,109,115,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,112,97,114,97,
109,115,95,79,117,116,
112,117,116,83,105,122,
101,0,112,97,114,97,
109,115,95,70,114,97,
109,101,67,111,117,110,
116,0,100,119,111,114,
100,0,171,171,0,0,
19,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
128,3,0,0,112,97,
114,97,109,115,95,70,
73,82,95,83,73,90,
69,0,102,108,111,97,
116,0,171,171,0,0,
3,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
188,3,0,0,112,97,
114,97,109,115,95,70,
95,67,79,76,0,112,
97,114,97,109,115,95,
83,65,84,85,82,65,
84,73,79,78,0,112,
97,114,97,109,115,95,
66,82,73,71,72,84,
78,69,83,83,0,112,
97,114,97,109,115,95,
70,95,76,85,77,65,
95,76,80,0,112,97,
114,97,109,115,95,72,
85,69,0,112,97,114,
97,109,115,95,115,112,
108,105,116,0,112,97,
114,97,109,115,95,115,
112,108,105,116,95,108,
105,110,101,0,77,105,
99,114,111,115,111,102,
116,32,40,82,41,32,
72,76,83,76,32,83,
104,97,100,101,114,32,
67,111,109,112,105,108,
101,114,32,49,48,46,
49,0,73,83,71,78,
44,0,0,0,1,0,
0,0,8,0,0,0,
32,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,3,0,0,
84,69,88,67,79,79,
82,68,0,171,171,171,
79,83,71,78,44,0,
0,0,1,0,0,0,
8,0,0,0,32,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
15,0,0,0,83,86,
95,84,97,114,103,101,
116,0,171,171,83,72,
69,88,0,8,0,0,
80,0,0,0,0,2,
0,0,106,8,0,1,
89,0,0,4,70,142,
32,0,1,0,0,0,
6,0,0,0,90,0,
0,3,0,96,16,0,
2,0,0,0,90,0,
0,3,0,96,16,0,
5,0,0,0,88,24,
0,4,0,112,16,0,
2,0,0,0,85,85,
0,0,88,24,0,4,
0,112,16,0,5,0,
0,0,85,85,0,0,
98,16,0,3,50,16,
16,0,0,0,0,0,
101,0,0,3,242,32,
16,0,0,0,0,0,
104,0,0,2,4,0,
0,0,56,0,0,9,
18,0,16,0,0,0,
0,0,10,128,32,0,
1,0,0,0,0,0,
0,0,26,128,32,0,
1,0,0,0,4,0,
0,0,56,0,0,8,
98,0,16,0,0,0,
0,0,6,17,16,0,
0,0,0,0,6,129,
32,0,1,0,0,0,
2,0,0,0,14,0,
0,8,98,0,16,0,
0,0,0,0,86,6,
16,0,0,0,0,0,
6,129,32,0,1,0,
0,0,0,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
130,0,16,0,0,0,
0,0,150,5,16,0,
0,0,0,0,150,115,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,27,0,0,6,
18,0,16,0,1,0,
0,0,26,128,32,0,
1,0,0,0,3,0,
0,0,14,0,0,8,
18,0,16,0,0,0,
0,0,10,0,16,0,
0,0,0,0,10,128,
32,0,1,0,0,0,
0,0,0,0,30,0,
0,7,34,0,16,0,
1,0,0,0,10,0,
16,0,1,0,0,0,
1,64,0,0,255,255,
255,255,43,0,0,5,
34,0,16,0,1,0,
0,0,26,0,16,0,
1,0,0,0,0,0,
0,7,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,87,0,0,7,
66,0,16,0,1,0,
0,0,10,0,16,0,
1,0,0,0,1,64,
0,0,2,0,0,0,
36,0,0,8,130,0,
16,0,1,0,0,0,
10,0,16,0,1,0,
0,0,10,0,16,128,
65,0,0,0,1,0,
0,0,85,0,0,7,
130,0,16,0,1,0,
0,0,58,0,16,0,
1,0,0,0,1,64,
0,0,1,0,0,0,
40,0,0,5,18,0,
16,0,2,0,0,0,
58,0,16,0,1,0,
0,0,1,0,0,7,
66,0,16,0,1,0,
0,0,42,0,16,0,
1,0,0,0,1,64,
0,0,0,0,0,128,
55,0,0,9,66,0,
16,0,1,0,0,0,
42,0,16,0,1,0,
0,0,10,0,16,0,
2,0,0,0,58,0,
16,0,1,0,0,0,
54,0,0,5,34,0,
16,0,2,0,0,0,
1,64,0,0,0,0,
0,0,54,0,0,8,
194,0,16,0,2,0,
0,0,2,64,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,54,0,
0,5,130,0,16,0,
1,0,0,0,1,64,
0,0,0,0,0,0,
48,0,0,1,33,0,
0,7,18,0,16,0,
3,0,0,0,58,0,
16,0,1,0,0,0,
10,0,16,0,1,0,
0,0,3,0,4,3,
10,0,16,0,3,0,
0,0,30,0,0,8,
18,0,16,0,3,0,
0,0,58,0,16,128,
65,0,0,0,1,0,
0,0,10,0,16,0,
1,0,0,0,30,0,
0,7,18,0,16,0,
3,0,0,0,10,0,
16,0,3,0,0,0,
1,64,0,0,255,255,
255,255,43,0,0,5,
34,0,16,0,3,0,
0,0,10,0,16,0,
3,0,0,0,14,0,
0,7,34,0,16,0,
3,0,0,0,26,0,
16,0,3,0,0,0,
26,0,16,0,1,0,
0,0,56,0,0,10,
98,0,16,0,3,0,
0,0,86,5,16,0,
3,0,0,0,2,64,
0,0,0,0,0,0,
219,15,201,64,219,15,
73,65,0,0,0,0,
77,0,0,6,0,208,
0,0,98,0,16,0,
3,0,0,0,86,6,
16,0,3,0,0,0,
50,0,0,10,34,0,
16,0,3,0,0,0,
26,0,16,128,65,0,
0,0,3,0,0,0,
1,64,0,0,0,0,
0,63,1,64,0,0,
62,10,215,62,50,0,
0,9,34,0,16,0,
3,0,0,0,42,0,
16,0,3,0,0,0,
1,64,0,0,10,215,
163,61,26,0,16,0,
3,0,0,0,30,0,
0,8,18,0,16,0,
3,0,0,0,42,0,
16,128,65,0,0,0,
1,0,0,0,10,0,
16,0,3,0,0,0,
43,0,0,5,18,0,
16,0,3,0,0,0,
10,0,16,0,3,0,
0,0,56,0,0,7,
50,0,16,0,3,0,
0,0,6,0,16,0,
0,0,0,0,70,0,
16,0,3,0,0,0,
24,0,0,7,66,0,
16,0,3,0,0,0,
10,0,16,0,3,0,
0,0,1,64,0,0,
0,0,0,0,56,0,
0,7,18,0,16,0,
3,0,0,0,10,0,
16,0,3,0,0,0,
1,64,0,0,219,15,
73,64,77,0,0,6,
130,0,16,0,3,0,
0,0,0,208,0,0,
10,0,16,0,3,0,
0,0,14,0,0,7,
18,0,16,0,3,0,
0,0,58,0,16,0,
3,0,0,0,10,0,
16,0,3,0,0,0,
55,0,0,9,18,0,
16,0,3,0,0,0,
42,0,16,0,3,0,
0,0,1,64,0,0,
0,0,128,63,10,0,
16,0,3,0,0,0,
56,0,0,7,18,0,
16,0,3,0,0,0,
10,0,16,0,3,0,
0,0,26,0,16,0,
3,0,0,0,43,0,
0,5,34,0,16,0,
3,0,0,0,58,0,
16,0,1,0,0,0,
50,0,0,11,18,0,
16,0,2,0,0,0,
26,128,32,128,65,0,
0,0,1,0,0,0,
3,0,0,0,1,64,
0,0,0,0,0,63,
26,0,16,0,3,0,
0,0,50,0,0,11,
98,0,16,0,3,0,
0,0,6,17,16,0,
0,0,0,0,6,129,
32,0,1,0,0,0,
2,0,0,0,6,1,
16,128,65,0,0,0,
2,0,0,0,14,0,
0,8,98,0,16,0,
3,0,0,0,86,6,
16,0,3,0,0,0,
6,129,32,0,1,0,
0,0,0,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
98,0,16,0,3,0,
0,0,150,5,16,0,
3,0,0,0,70,126,
16,0,2,0,0,0,
0,96,16,0,2,0,
0,0,50,0,0,9,
194,0,16,0,2,0,
0,0,86,9,16,0,
3,0,0,0,6,0,
16,0,3,0,0,0,
166,14,16,0,2,0,
0,0,30,0,0,7,
130,0,16,0,1,0,
0,0,58,0,16,0,
1,0,0,0,1,64,
0,0,1,0,0,0,
22,0,0,1,56,0,
0,8,18,0,16,0,
0,0,0,0,1,64,
0,0,219,15,201,64,
42,128,32,0,1,0,
0,0,4,0,0,0,
77,0,0,7,18,0,
16,0,1,0,0,0,
18,0,16,0,2,0,
0,0,10,0,16,0,
0,0,0,0,77,0,
0,7,18,0,16,0,
3,0,0,0,0,208,
0,0,10,0,16,128,
65,0,0,0,0,0,
0,0,54,0,0,5,
34,0,16,0,3,0,
0,0,10,0,16,0,
2,0,0,0,54,0,
0,5,66,0,16,0,
3,0,0,0,10,0,
16,0,1,0,0,0,
15,0,0,7,34,0,
16,0,1,0,0,0,
150,5,16,0,3,0,
0,0,230,10,16,0,
2,0,0,0,15,0,
0,7,66,0,16,0,
1,0,0,0,70,0,
16,0,3,0,0,0,
230,10,16,0,2,0,
0,0,56,0,0,8,
18,0,16,0,2,0,
0,0,58,0,16,0,
0,0,0,0,10,128,
32,0,1,0,0,0,
4,0,0,0,56,0,
0,8,98,0,16,0,
2,0,0,0,86,6,
16,0,1,0,0,0,
246,143,32,0,1,0,
0,0,3,0,0,0,
16,0,0,10,18,0,
16,0,1,0,0,0,
70,2,16,0,2,0,
0,0,2,64,0,0,
0,0,128,63,106,188,
116,63,219,249,30,63,
0,0,0,0,16,0,
0,10,34,0,16,0,
1,0,0,0,70,2,
16,0,2,0,0,0,
2,64,0,0,0,0,
128,63,150,67,139,190,
203,161,37,191,0,0,
0,0,16,0,0,10,
66,0,16,0,1,0,
0,0,70,2,16,0,
2,0,0,0,2,64,
0,0,0,0,128,63,
104,145,141,191,231,251,
217,63,0,0,0,0,
49,0,0,8,18,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
0,63,58,128,32,0,
1,0,0,0,4,0,
0,0,31,0,4,3,
10,0,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,18,0,16,0,
0,0,0,0,150,5,
16,0,0,0,0,0,
70,126,16,0,5,0,
0,0,0,96,16,0,
5,0,0,0,54,0,
0,5,242,0,16,0,
0,0,0,0,6,0,
16,0,0,0,0,0,
18,0,0,1,54,0,
0,5,130,0,16,0,
1,0,0,0,1,64,
0,0,0,0,0,0,
54,0,0,5,242,0,
16,0,0,0,0,0,
70,14,16,0,1,0,
0,0,21,0,0,1,
49,0,0,8,18,0,
16,0,2,0,0,0,
10,128,32,0,1,0,
0,0,5,0,0,0,
10,16,16,0,0,0,
0,0,54,0,0,5,
130,0,16,0,1,0,
0,0,1,64,0,0,
0,0,0,0,55,0,
0,9,242,32,16,0,
0,0,0,0,6,0,
16,0,2,0,0,0,
70,14,16,0,1,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,70,0,
0,0,4,0,0,0,
0,0,0,0,2,0,
0,0,31,0,0,0,
8,0,0,0,3,0,
0,0,2,0,0,0,
2,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,9,0,0,0,
3,0,0,0,5,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};

}

namespace RetroArch
{
class NtscShadersArtifactColorsArtifactColors2ShaderDef : public ShaderDef
{
public:
	NtscShadersArtifactColorsArtifactColors2ShaderDef() : ShaderDef{}
	{
		Name = "artifact-colors2";
		VertexByteCode = RetroArchNtscShadersArtifactColorsArtifactColors2ShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchNtscShadersArtifactColorsArtifactColors2ShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchNtscShadersArtifactColorsArtifactColors2ShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchNtscShadersArtifactColorsArtifactColors2ShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("FIR_SIZE", -1, 52, 4, 1.000000f, 50.000000f, 29.000000f));
		Params.push_back(ShaderParam("F_COL", -1, 56, 4, 0.250000f, 0.500000f, 0.250000f));
		Params.push_back(ShaderParam("SATURATION", -1, 60, 4, 0.000000f, 100.000000f, 30.000000f));
		Params.push_back(ShaderParam("BRIGHTNESS", -1, 64, 4, 0.000000f, 2.000000f, 1.000000f));
		Params.push_back(ShaderParam("F_LUMA_LP", -1, 68, 4, 0.000100f, 0.333333f, 0.166670f));
		Params.push_back(ShaderParam("HUE", -1, 72, 4, 0.000000f, 1.000000f, 0.000000f));
		Params.push_back(ShaderParam("split", -1, 76, 4, 0.000000f, 1.000000f, 0.000000f));
		Params.push_back(ShaderParam("split_line", -1, 80, 4, 0.000000f, 1.000000f, 0.500000f));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f));
		Samplers.push_back(ShaderSampler("Source", 2));
		Samplers.push_back(ShaderSampler("Pass1", 5));
		Samplers.push_back(ShaderSampler("Original", 3));
		Samplers.push_back(ShaderSampler("Pass2", 4));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
