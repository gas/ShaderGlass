/*
ShaderGlass shader handheld-shaders-lcd-shader\lcd-pass-0 imported from RetroArch:
https://github.com/libretro/slang-shaders/blob/master/handheld/shaders/lcd-shader/lcd-pass-0.slang
See original file for full credits and usage license with excerpts below. 
This file is auto-generated, do not modify directly.

/////////////////////////////////////////////////////////////////////////
                                                                       //
 LCD Shader v0.0.1                                                     //
                                                                       //
 Copyright (C) 2013 Harlequin : unknown92835@gmail.com                 //
                                                                       //
 This program is free software: you can redistribute it and/or modify  //
 it under the terms of the GNU General Public License as published by  //
 the Free Software Foundation, either version 3 of the License, or     //
 (at your option) any later version.                                   //
                                                                       //
 This program is distributed in the hope that it will be useful,       //
 but WITHOUT ANY WARRANTY; without even the implied warranty of        //
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
 GNU General Public License for more details.                          //
                                                                       //
 You should have received a copy of the GNU General Public License     //
 along with this program.  If not, see <http://www.gnu.org/licenses/>. //
                                                                       //
/////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
config                                                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 Simulate response time
 Higher values result in longer color transition periods - [0, 1]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex definitions                                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
vertex shader                                                                                                                           //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fragment definitions                                                                                                                    //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ANY CHANGE TO THIS SHOULD BE REPEATED IN lcd_pass_3 SO IT CAN IDENTIFY LINE FRAGMENTS PROPERLY
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
fragment shader                                                                                                                         //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
motion blur
add horizontal lines

*/

#pragma once

namespace RetroArchHandheldShadersLcdShaderLcdPass0ShaderDefs
{
static const BYTE sVertexByteCode[] =
{
68,88,66,67,103,170,
171,152,166,233,195,225,
216,85,53,63,74,254,
123,100,1,0,0,0,
104,6,0,0,5,0,
0,0,52,0,0,0,
40,3,0,0,116,3,
0,0,252,3,0,0,
204,5,0,0,82,68,
69,70,236,2,0,0,
2,0,0,0,136,0,
0,0,2,0,0,0,
60,0,0,0,0,5,
254,255,0,129,0,0,
196,2,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
124,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
1,0,0,0,1,0,
0,0,128,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,85,66,
79,0,80,117,115,104,
0,171,171,171,124,0,
0,0,1,0,0,0,
184,0,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,128,0,
0,0,5,0,0,0,
24,1,0,0,64,0,
0,0,0,0,0,0,
0,0,0,0,224,0,
0,0,0,0,0,0,
64,0,0,0,2,0,
0,0,244,0,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,103,108,111,98,
97,108,95,77,86,80,
0,102,108,111,97,116,
52,120,52,0,2,0,
3,0,4,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
235,0,0,0,224,1,
0,0,0,0,0,0,
16,0,0,0,2,0,
0,0,252,1,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,32,2,0,0,
16,0,0,0,16,0,
0,0,0,0,0,0,
252,1,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
52,2,0,0,32,0,
0,0,16,0,0,0,
2,0,0,0,252,1,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,70,2,
0,0,48,0,0,0,
4,0,0,0,0,0,
0,0,96,2,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,132,2,0,0,
52,0,0,0,4,0,
0,0,0,0,0,0,
160,2,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
112,97,114,97,109,115,
95,83,111,117,114,99,
101,83,105,122,101,0,
102,108,111,97,116,52,
0,171,171,171,1,0,
3,0,1,0,4,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
242,1,0,0,112,97,
114,97,109,115,95,79,
114,105,103,105,110,97,
108,83,105,122,101,0,
112,97,114,97,109,115,
95,79,117,116,112,117,
116,83,105,122,101,0,
112,97,114,97,109,115,
95,70,114,97,109,101,
67,111,117,110,116,0,
100,119,111,114,100,0,
171,171,0,0,19,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,88,2,
0,0,112,97,114,97,
109,115,95,114,101,115,
112,111,110,115,101,95,
116,105,109,101,0,102,
108,111,97,116,0,171,
0,0,3,0,1,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,153,2,0,0,
77,105,99,114,111,115,
111,102,116,32,40,82,
41,32,72,76,83,76,
32,83,104,97,100,101,
114,32,67,111,109,112,
105,108,101,114,32,49,
48,46,49,0,73,83,
71,78,68,0,0,0,
2,0,0,0,8,0,
0,0,56,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,15,
0,0,56,0,0,0,
1,0,0,0,0,0,
0,0,3,0,0,0,
1,0,0,0,3,3,
0,0,84,69,88,67,
79,79,82,68,0,171,
171,171,79,83,71,78,
128,0,0,0,4,0,
0,0,8,0,0,0,
104,0,0,0,0,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,3,12,0,0,
104,0,0,0,1,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,4,11,0,0,
104,0,0,0,2,0,
0,0,0,0,0,0,
3,0,0,0,0,0,
0,0,8,7,0,0,
113,0,0,0,0,0,
0,0,1,0,0,0,
3,0,0,0,1,0,
0,0,15,0,0,0,
84,69,88,67,79,79,
82,68,0,83,86,95,
80,111,115,105,116,105,
111,110,0,171,171,171,
83,72,69,88,200,1,
0,0,80,0,1,0,
114,0,0,0,106,8,
0,1,89,0,0,4,
70,142,32,0,0,0,
0,0,4,0,0,0,
89,0,0,4,70,142,
32,0,1,0,0,0,
3,0,0,0,95,0,
0,3,242,16,16,0,
0,0,0,0,95,0,
0,3,50,16,16,0,
1,0,0,0,101,0,
0,3,50,32,16,0,
0,0,0,0,101,0,
0,3,66,32,16,0,
0,0,0,0,101,0,
0,3,130,32,16,0,
0,0,0,0,103,0,
0,4,242,32,16,0,
1,0,0,0,1,0,
0,0,104,0,0,2,
1,0,0,0,56,0,
0,9,18,0,16,0,
0,0,0,0,58,128,
32,0,1,0,0,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
2,0,0,0,65,0,
0,5,18,0,16,0,
0,0,0,0,10,0,
16,0,0,0,0,0,
56,0,0,8,18,0,
16,0,0,0,0,0,
10,0,16,0,0,0,
0,0,26,128,32,0,
1,0,0,0,0,0,
0,0,14,0,0,10,
130,32,16,0,0,0,
0,0,2,64,0,0,
0,0,128,63,0,0,
128,63,0,0,128,63,
0,0,128,63,10,0,
16,0,0,0,0,0,
54,0,0,5,50,32,
16,0,0,0,0,0,
70,16,16,0,1,0,
0,0,54,0,0,6,
66,32,16,0,0,0,
0,0,58,128,32,0,
1,0,0,0,0,0,
0,0,56,0,0,8,
242,0,16,0,0,0,
0,0,86,21,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
1,0,0,0,50,0,
0,10,242,0,16,0,
0,0,0,0,6,16,
16,0,0,0,0,0,
70,142,32,0,0,0,
0,0,0,0,0,0,
70,14,16,0,0,0,
0,0,50,0,0,10,
242,0,16,0,0,0,
0,0,166,26,16,0,
0,0,0,0,70,142,
32,0,0,0,0,0,
2,0,0,0,70,14,
16,0,0,0,0,0,
50,0,0,10,242,32,
16,0,1,0,0,0,
246,31,16,0,0,0,
0,0,70,142,32,0,
0,0,0,0,3,0,
0,0,70,14,16,0,
0,0,0,0,62,0,
0,1,83,84,65,84,
148,0,0,0,11,0,
0,0,1,0,0,0,
0,0,0,0,6,0,
0,0,8,0,0,0,
0,0,0,0,0,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
0,0,0,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0
};


static const BYTE sFragmentByteCode[] =
{
68,88,66,67,159,189,
7,28,184,19,246,32,
92,213,62,27,65,38,
16,246,1,0,0,0,
56,13,0,0,5,0,
0,0,52,0,0,0,
208,5,0,0,52,6,
0,0,104,6,0,0,
156,12,0,0,82,68,
69,70,148,5,0,0,
1,0,0,0,168,3,
0,0,17,0,0,0,
60,0,0,0,0,5,
255,255,0,129,0,0,
108,5,0,0,82,68,
49,49,60,0,0,0,
24,0,0,0,32,0,
0,0,40,0,0,0,
36,0,0,0,12,0,
0,0,0,0,0,0,
92,2,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,2,0,0,0,
1,0,0,0,1,0,
0,0,108,2,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,1,0,0,0,
1,0,0,0,134,2,
0,0,3,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
4,0,0,0,1,0,
0,0,1,0,0,0,
160,2,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,5,0,0,0,
1,0,0,0,1,0,
0,0,186,2,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,6,0,
0,0,1,0,0,0,
1,0,0,0,212,2,
0,0,3,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
7,0,0,0,1,0,
0,0,1,0,0,0,
238,2,0,0,3,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,8,0,0,0,
1,0,0,0,1,0,
0,0,8,3,0,0,
3,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,9,0,
0,0,1,0,0,0,
1,0,0,0,34,3,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
2,0,0,0,1,0,
0,0,13,0,0,0,
41,3,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,3,0,0,0,
1,0,0,0,13,0,
0,0,58,3,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,4,0,
0,0,1,0,0,0,
13,0,0,0,75,3,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
5,0,0,0,1,0,
0,0,13,0,0,0,
92,3,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,6,0,0,0,
1,0,0,0,13,0,
0,0,109,3,0,0,
2,0,0,0,5,0,
0,0,4,0,0,0,
255,255,255,255,7,0,
0,0,1,0,0,0,
13,0,0,0,126,3,
0,0,2,0,0,0,
5,0,0,0,4,0,
0,0,255,255,255,255,
8,0,0,0,1,0,
0,0,13,0,0,0,
143,3,0,0,2,0,
0,0,5,0,0,0,
4,0,0,0,255,255,
255,255,9,0,0,0,
1,0,0,0,13,0,
0,0,160,3,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,95,83,
111,117,114,99,101,95,
115,97,109,112,108,101,
114,0,95,79,114,105,
103,105,110,97,108,72,
105,115,116,111,114,121,
49,95,115,97,109,112,
108,101,114,0,95,79,
114,105,103,105,110,97,
108,72,105,115,116,111,
114,121,50,95,115,97,
109,112,108,101,114,0,
95,79,114,105,103,105,
110,97,108,72,105,115,
116,111,114,121,51,95,
115,97,109,112,108,101,
114,0,95,79,114,105,
103,105,110,97,108,72,
105,115,116,111,114,121,
52,95,115,97,109,112,
108,101,114,0,95,79,
114,105,103,105,110,97,
108,72,105,115,116,111,
114,121,53,95,115,97,
109,112,108,101,114,0,
95,79,114,105,103,105,
110,97,108,72,105,115,
116,111,114,121,54,95,
115,97,109,112,108,101,
114,0,95,79,114,105,
103,105,110,97,108,72,
105,115,116,111,114,121,
55,95,115,97,109,112,
108,101,114,0,83,111,
117,114,99,101,0,79,
114,105,103,105,110,97,
108,72,105,115,116,111,
114,121,49,0,79,114,
105,103,105,110,97,108,
72,105,115,116,111,114,
121,50,0,79,114,105,
103,105,110,97,108,72,
105,115,116,111,114,121,
51,0,79,114,105,103,
105,110,97,108,72,105,
115,116,111,114,121,52,
0,79,114,105,103,105,
110,97,108,72,105,115,
116,111,114,121,53,0,
79,114,105,103,105,110,
97,108,72,105,115,116,
111,114,121,54,0,79,
114,105,103,105,110,97,
108,72,105,115,116,111,
114,121,55,0,80,117,
115,104,0,171,171,171,
160,3,0,0,5,0,
0,0,192,3,0,0,
64,0,0,0,0,0,
0,0,0,0,0,0,
136,4,0,0,0,0,
0,0,16,0,0,0,
0,0,0,0,164,4,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,200,4,
0,0,16,0,0,0,
16,0,0,0,0,0,
0,0,164,4,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,220,4,0,0,
32,0,0,0,16,0,
0,0,0,0,0,0,
164,4,0,0,0,0,
0,0,255,255,255,255,
0,0,0,0,255,255,
255,255,0,0,0,0,
238,4,0,0,48,0,
0,0,4,0,0,0,
0,0,0,0,8,5,
0,0,0,0,0,0,
255,255,255,255,0,0,
0,0,255,255,255,255,
0,0,0,0,44,5,
0,0,52,0,0,0,
4,0,0,0,2,0,
0,0,72,5,0,0,
0,0,0,0,255,255,
255,255,0,0,0,0,
255,255,255,255,0,0,
0,0,112,97,114,97,
109,115,95,83,111,117,
114,99,101,83,105,122,
101,0,102,108,111,97,
116,52,0,171,171,171,
1,0,3,0,1,0,
4,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,154,4,0,0,
112,97,114,97,109,115,
95,79,114,105,103,105,
110,97,108,83,105,122,
101,0,112,97,114,97,
109,115,95,79,117,116,
112,117,116,83,105,122,
101,0,112,97,114,97,
109,115,95,70,114,97,
109,101,67,111,117,110,
116,0,100,119,111,114,
100,0,171,171,0,0,
19,0,1,0,1,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,5,0,0,112,97,
114,97,109,115,95,114,
101,115,112,111,110,115,
101,95,116,105,109,101,
0,102,108,111,97,116,
0,171,0,0,3,0,
1,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,65,5,
0,0,77,105,99,114,
111,115,111,102,116,32,
40,82,41,32,72,76,
83,76,32,83,104,97,
100,101,114,32,67,111,
109,112,105,108,101,114,
32,49,48,46,49,0,
73,83,71,78,92,0,
0,0,3,0,0,0,
8,0,0,0,80,0,
0,0,0,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
3,3,0,0,80,0,
0,0,1,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
4,4,0,0,80,0,
0,0,2,0,0,0,
0,0,0,0,3,0,
0,0,0,0,0,0,
8,8,0,0,84,69,
88,67,79,79,82,68,
0,171,171,171,79,83,
71,78,44,0,0,0,
1,0,0,0,8,0,
0,0,32,0,0,0,
0,0,0,0,0,0,
0,0,3,0,0,0,
0,0,0,0,15,0,
0,0,83,86,95,84,
97,114,103,101,116,0,
171,171,83,72,69,88,
44,6,0,0,80,0,
0,0,139,1,0,0,
106,8,0,1,89,0,
0,4,70,142,32,0,
1,0,0,0,4,0,
0,0,90,0,0,3,
0,96,16,0,2,0,
0,0,90,0,0,3,
0,96,16,0,3,0,
0,0,90,0,0,3,
0,96,16,0,4,0,
0,0,90,0,0,3,
0,96,16,0,5,0,
0,0,90,0,0,3,
0,96,16,0,6,0,
0,0,90,0,0,3,
0,96,16,0,7,0,
0,0,90,0,0,3,
0,96,16,0,8,0,
0,0,90,0,0,3,
0,96,16,0,9,0,
0,0,88,24,0,4,
0,112,16,0,2,0,
0,0,85,85,0,0,
88,24,0,4,0,112,
16,0,3,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
4,0,0,0,85,85,
0,0,88,24,0,4,
0,112,16,0,5,0,
0,0,85,85,0,0,
88,24,0,4,0,112,
16,0,6,0,0,0,
85,85,0,0,88,24,
0,4,0,112,16,0,
7,0,0,0,85,85,
0,0,88,24,0,4,
0,112,16,0,8,0,
0,0,85,85,0,0,
88,24,0,4,0,112,
16,0,9,0,0,0,
85,85,0,0,98,16,
0,3,50,16,16,0,
0,0,0,0,98,16,
0,3,66,16,16,0,
0,0,0,0,98,16,
0,3,130,16,16,0,
0,0,0,0,101,0,
0,3,242,32,16,0,
0,0,0,0,104,0,
0,2,3,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,0,0,
0,0,70,16,16,0,
0,0,0,0,70,126,
16,0,5,0,0,0,
0,96,16,0,5,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
1,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,3,0,
0,0,0,96,16,0,
3,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,114,0,
16,0,2,0,0,0,
70,16,16,0,0,0,
0,0,70,126,16,0,
2,0,0,0,0,96,
16,0,2,0,0,0,
0,0,0,8,114,0,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,70,2,16,128,
65,0,0,0,2,0,
0,0,50,0,0,10,
114,0,16,0,1,0,
0,0,70,2,16,0,
1,0,0,0,86,133,
32,0,1,0,0,0,
3,0,0,0,70,2,
16,0,2,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,2,0,
0,0,70,16,16,0,
0,0,0,0,70,126,
16,0,4,0,0,0,
0,96,16,0,4,0,
0,0,0,0,0,8,
114,0,16,0,2,0,
0,0,70,2,16,128,
65,0,0,0,1,0,
0,0,70,2,16,0,
2,0,0,0,56,0,
0,9,130,0,16,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
3,0,0,0,26,128,
32,0,1,0,0,0,
3,0,0,0,50,0,
0,9,114,0,16,0,
1,0,0,0,70,2,
16,0,2,0,0,0,
246,15,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,0,0,
0,8,114,0,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
70,2,16,128,65,0,
0,0,1,0,0,0,
56,0,0,8,130,0,
16,0,1,0,0,0,
58,0,16,0,0,0,
0,0,26,128,32,0,
1,0,0,0,3,0,
0,0,50,0,0,9,
114,0,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,246,15,
16,0,1,0,0,0,
70,2,16,0,1,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
1,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,6,0,
0,0,0,96,16,0,
6,0,0,0,0,0,
0,8,114,0,16,0,
1,0,0,0,70,2,
16,128,65,0,0,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
56,0,0,7,130,0,
16,0,1,0,0,0,
58,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,56,0,
0,7,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
58,0,16,0,1,0,
0,0,50,0,0,9,
114,0,16,0,0,0,
0,0,70,2,16,0,
1,0,0,0,246,15,
16,0,1,0,0,0,
70,2,16,0,0,0,
0,0,56,0,0,8,
18,0,16,0,1,0,
0,0,58,0,16,0,
1,0,0,0,26,128,
32,0,1,0,0,0,
3,0,0,0,69,0,
0,139,194,0,0,128,
67,85,21,0,226,0,
16,0,1,0,0,0,
70,16,16,0,0,0,
0,0,54,121,16,0,
7,0,0,0,0,96,
16,0,7,0,0,0,
0,0,0,8,226,0,
16,0,1,0,0,0,
6,9,16,128,65,0,
0,0,0,0,0,0,
86,14,16,0,1,0,
0,0,50,0,0,9,
114,0,16,0,0,0,
0,0,150,7,16,0,
1,0,0,0,6,0,
16,0,1,0,0,0,
70,2,16,0,0,0,
0,0,69,0,0,139,
194,0,0,128,67,85,
21,0,114,0,16,0,
1,0,0,0,70,16,
16,0,0,0,0,0,
70,126,16,0,8,0,
0,0,0,96,16,0,
8,0,0,0,0,0,
0,8,114,0,16,0,
1,0,0,0,70,2,
16,128,65,0,0,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
50,0,0,9,114,0,
16,0,0,0,0,0,
70,2,16,0,1,0,
0,0,246,15,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
69,0,0,139,194,0,
0,128,67,85,21,0,
114,0,16,0,1,0,
0,0,70,16,16,0,
0,0,0,0,70,126,
16,0,9,0,0,0,
0,96,16,0,9,0,
0,0,0,0,0,8,
114,0,16,0,1,0,
0,0,70,2,16,128,
65,0,0,0,0,0,
0,0,70,2,16,0,
1,0,0,0,47,0,
0,6,130,0,16,0,
0,0,0,0,26,128,
32,0,1,0,0,0,
3,0,0,0,56,0,
0,7,130,0,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
224,64,25,0,0,5,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,50,0,
0,9,114,0,16,0,
0,0,0,0,70,2,
16,0,1,0,0,0,
246,15,16,0,0,0,
0,0,70,2,16,0,
0,0,0,0,14,0,
0,7,130,0,16,0,
0,0,0,0,26,16,
16,0,0,0,0,0,
42,16,16,0,0,0,
0,0,65,0,0,5,
130,0,16,0,0,0,
0,0,58,0,16,0,
0,0,0,0,50,0,
0,10,130,0,16,0,
0,0,0,0,42,16,
16,128,65,0,0,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
26,16,16,0,0,0,
0,0,49,0,0,7,
130,0,16,0,0,0,
0,0,58,16,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
1,0,0,7,18,0,
16,0,1,0,0,0,
58,0,16,0,0,0,
0,0,1,64,0,0,
0,0,128,63,55,0,
0,9,130,32,16,0,
0,0,0,0,58,0,
16,0,0,0,0,0,
1,64,0,0,0,0,
128,63,1,64,0,0,
0,0,0,63,56,0,
0,7,114,32,16,0,
0,0,0,0,70,2,
16,0,0,0,0,0,
6,0,16,0,1,0,
0,0,62,0,0,1,
83,84,65,84,148,0,
0,0,38,0,0,0,
3,0,0,0,0,0,
0,0,4,0,0,0,
27,0,0,0,0,0,
0,0,1,0,0,0,
1,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,8,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0,
0,0,0,0,0,0
};

}

namespace RetroArch
{
class HandheldShadersLcdShaderLcdPass0ShaderDef : public ShaderDef
{
public:
	HandheldShadersLcdShaderLcdPass0ShaderDef() : ShaderDef{}
	{
		Name = "lcd-pass-0";
		VertexByteCode = RetroArchHandheldShadersLcdShaderLcdPass0ShaderDefs::sVertexByteCode;
		VertexLength = sizeof(RetroArchHandheldShadersLcdShaderLcdPass0ShaderDefs::sVertexByteCode);
		FragmentByteCode = RetroArchHandheldShadersLcdShaderLcdPass0ShaderDefs::sFragmentByteCode;
		FragmentLength = sizeof(RetroArchHandheldShadersLcdShaderLcdPass0ShaderDefs::sFragmentByteCode);
		Params.push_back(ShaderParam("response_time", -1, 52, 4, 0.000000f, 0.777000f, 0.333000f));
		Params.push_back(ShaderParam("MVP", 0, 0, 64, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("SourceSize", -1, 0, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OriginalSize", -1, 16, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("OutputSize", -1, 32, 16, 0.000000f, 0.000000f, 0.000000f));
		Params.push_back(ShaderParam("FrameCount", -1, 48, 4, 0.000000f, 0.000000f, 0.000000f));
		Samplers.push_back(ShaderSampler("Source", 2));
		Samplers.push_back(ShaderSampler("OriginalHistory1", 3));
		Samplers.push_back(ShaderSampler("OriginalHistory2", 4));
		Samplers.push_back(ShaderSampler("OriginalHistory3", 5));
		Samplers.push_back(ShaderSampler("OriginalHistory4", 6));
		Samplers.push_back(ShaderSampler("OriginalHistory5", 7));
		Samplers.push_back(ShaderSampler("OriginalHistory6", 8));
		Samplers.push_back(ShaderSampler("OriginalHistory7", 9));
/*
VertexSource = %*VERTEX_SOURCE*%;
*/
/*
FragmentSource = %*FRAGMENT_SOURCE*%;
*/
	}
};
}
